version: 2.1


commands:
  wait-database:
    description: "Wait for the database"
    parameters:
      port:
        type: integer
    steps:
      - run: dockerize -wait tcp://localhost:<< parameters.port >> -timeout 1m

  create-virtualenv:
    description: "Create python virtualenv"
    steps:
      - run: python3 -m venv ~/venv
      - run: echo "source ~/venv/bin/activate" >> $BASH_ENV

  install-creme-system-packages:
    description: "Install creme dependencies"
    steps:
      - run: sudo apt update
      - run: sudo apt install -y python-dev graphviz libgraphviz-dev pkg-config lcab

  install-py-dev-env:
    steps:
      - restore_cache:
          keys:
            - creme_crm-{{ checksum "creme/requirements.txt" }}-{{ checksum "creme/requirements-dev.txt" }}-{{ checksum "creme/requirements-mysql.txt" }}-{{ checksum "creme/requirements-pgsql.txt" }}
            - creme_crm-{{ checksum "creme/requirements.txt" }}-{{ checksum "creme/requirements-dev.txt" }}

      - create-virtualenv
      - run: pip install -r creme/requirements-dev.txt
      - run: pip install -r creme/requirements-mysql.txt
      - run: pip install -r creme/requirements-pgsql.txt
      - run: pip list --outdated

      - save_cache:
          key: creme_crm-{{ checksum "creme/requirements.txt" }}-{{ checksum "creme/requirements-dev.txt" }}-{{ checksum "creme/requirements-mysql.txt" }}-{{ checksum "creme/requirements-pgsql.txt" }}
          paths: "~/venv"

  install-node-env:
    steps:
      - restore_cache:
          key: node-dependencies-{{ checksum "package-lock.json" }}

      - run: npm install

      - save_cache:
          key: node-dependencies-{{ checksum "package-lock.json" }}
          paths:
           - node_modules

  setup-locale:
    description: "Setup locale"
    parameters:
      language:
        type: string
      encoding:
        type: string
    steps:
      - run:
          name: "Locale gen"
          command: |
            echo "<< parameters.language >>.<< parameters.encoding >> << parameters.encoding >>" | sudo tee -a /etc/locale.gen
            sudo locale-gen
      - run:
          name: "Setup Environment Variables"
          command: |
            echo "export LANG=<< parameters.language >>.<< parameters.encoding >>" >> $BASH_ENV
            echo "export LANGUAGE=<< parameters.language >>" >> $BASH_ENV
            echo "export LC_ALL=<< parameters.language >>.<< parameters.encoding >>" >> $BASH_ENV

jobs:
  lint-isort:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - install-py-dev-env
      - run: make isort-check


  lint-flake8:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - install-py-dev-env
      - run: flake8 creme/


  tests-mysql:
    docker:
      - image: circleci/python:3.7-browsers
      - image: circleci/mysql:5.7-ram
        environment:
          MYSQL_ROOT_PASSWORD: creme
          MYSQL_DATABASE: cremecrm
    steps:
      - checkout

      - setup-locale:
          language: fr_FR
          encoding: UTF-8

      - wait-database:
          port: 3306

      - install-creme-system-packages
      - run: sudo apt install -y mariadb-client
      - install-py-dev-env
      - run: cp ~/project/.circleci/mysql_settings.py creme/local_settings.py
      - run: python manage.py migrate
      - run: python manage.py creme_populate
      - run: python manage.py generatemedia
      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ manage.py test --noinput --parallel=6
      - run: coverage combine
      - run: coverage html
      - store_artifacts:
          path: artifacts/coverage_html


  tests-pgsql:
    docker:
      - image: circleci/python:3.7-browsers
      - image: circleci/postgres:12-ram
        environment:
          POSTGRES_USER: creme
          POSTGRES_PASSWORD: creme
          POSTGRES_DB: cremecrm
    steps:
      - checkout

      - setup-locale:
          language: en_US
          encoding: UTF-8

      - wait-database:
          port: 5432

      - install-creme-system-packages
      - install-py-dev-env
      - run: cp ~/project/.circleci/pgsql_settings.py creme/local_settings.py
      - run: python manage.py migrate
      - run: python manage.py creme_populate
      - run: python manage.py generatemedia
      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ manage.py test --noinput --parallel=8
      - run: coverage combine
      - run: coverage html
      - store_artifacts:
          path: artifacts/coverage_html


  lint-js:
    docker:
     - image: circleci/python:3.7-node-browsers
    steps:
      - checkout
      - install-node-env
      - run:
          name: Run linter
          command: |
            node_modules/.bin/eslint --config .eslintrc --ignore-path .eslintignore --format stylish --quiet creme/


  tests-js:
    docker:
     - image: circleci/python:3.7-node-browsers
    steps:
      - checkout
      - install-creme-system-packages
      - install-py-dev-env
      - run: python manage.py generatemedia
      - install-node-env
      - run:
          name: Run javascript tests
          command: |
            make karma-ci


workflows:
  version: 2
  build:
    jobs:
      - lint-isort
      - lint-flake8
      - lint-js
      - tests-js:
          requires:
           - lint-js
      - tests-mysql:
          requires:
            - lint-isort
            - lint-flake8
      - tests-pgsql:
          requires:
            - lint-isort
            - lint-flake8
