version: 2.1


commands:
  wait-database:
    description: "Wait for the database"
    parameters:
      port:
        type: integer
    steps:
      - run: dockerize -wait tcp://localhost:<< parameters.port >> -timeout 1m

  install-creme-system-packages:
    description: "Install creme dependencies"
    steps:
      - run: sudo apt update
      - run: sudo apt install -y python3-dev graphviz libgraphviz-dev pkg-config lcab

  install-py-dev-env:
    parameters:
      python:
        type: string
    steps:
      - restore_cache:
          keys:
            - <<parameters.python>>-creme_crm-v2.2-{{ checksum "setup.cfg" }}
            - <<parameters.python>>-creme_crm-v2.2

      - run: <<parameters.python>> -m venv ~/venv
      # Require setuptools v46.4.0 at least
      - run: ~/venv/bin/pip install -U pip setuptools
      - run: echo "source ~/venv/bin/activate" >> $BASH_ENV
      - run: pip install -U -e .[dev,mysql,pgsql,graphs]
      - run: python --version
      - run: pip freeze
      - run: pip list --outdated

      - save_cache:
          key: <<parameters.python>>-creme_crm-v2.2-{{ checksum "setup.cfg" }}
          paths: "~/venv"

  install-node-env:
    steps:
      - restore_cache:
          key: node-dependencies-{{ checksum "package-lock.json" }}

      - run: npm install

      - save_cache:
          key: node-dependencies-{{ checksum "package-lock.json" }}
          paths:
           - node_modules

  setup-locale:
    description: "Locale: Setup"
    parameters:
      language:
        type: string
      encoding:
        type: string
    steps:
      - run:
          name: "Locale: locale-gen"
          command: |
            echo "<< parameters.language >>.<< parameters.encoding >> << parameters.encoding >>" | sudo tee -a /etc/locale.gen
            sudo locale-gen
      - run:
          name: "Locale: Setup Environment Variables"
          command: |
            echo "export LANG=<< parameters.language >>.<< parameters.encoding >>" >> $BASH_ENV
            echo "export LANGUAGE=<< parameters.language >>" >> $BASH_ENV
            echo "export LC_ALL=<< parameters.language >>.<< parameters.encoding >>" >> $BASH_ENV


orbs:
  browser-tools: circleci/browser-tools@1.2.5


jobs:
  python36-lint-isort:
    docker:
      - image: cimg/python:3.6-browsers
    steps:
      - checkout
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
      - run: make isort-check


  python36-lint-flake8:
    docker:
      - image: cimg/python:3.6-browsers
    steps:
      - checkout
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
      - run: flake8 creme/


  python36-tests-mysql:
    docker:
      - image: cimg/python:3.6-browsers
      - image: cimg/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: creme
          MYSQL_DATABASE: cremecrm
    resource_class: large
    steps:
      - checkout

      - setup-locale:
          language: fr_FR
          encoding: UTF-8

      - wait-database:
          port: 3306

      - install-creme-system-packages
      - run: sudo apt install -y mariadb-client
      - install-py-dev-env:
          python: "python3.6"
      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
      - run: cp ~/project/.circleci/mysql_settings.py creme/local_settings.py
      - run: python creme/manage.py migrate
      - run: python creme/manage.py creme_populate
      - run: python creme/manage.py generatemedia
      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
      - run: coverage combine
      - run: coverage html
      - store_artifacts:
          path: artifacts/coverage_html


  python36-tests-pgsql:
    docker:
      - image: cimg/python:3.6-browsers
      - image: cimg/postgres:12.10
        environment:
          POSTGRES_USER: creme
          POSTGRES_PASSWORD: creme
          POSTGRES_DB: cremecrm
    resource_class: large
    steps:
      - checkout

      - setup-locale:
          language: en_US
          encoding: UTF-8

      - wait-database:
          port: 5432

      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
      - run: cp ~/project/.circleci/pgsql_settings.py creme/local_settings.py
      - run: python creme/manage.py migrate
      - run: python creme/manage.py creme_populate
      - run: python creme/manage.py generatemedia
      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
      - run: coverage combine
      - run: coverage html
      - store_artifacts:
          path: artifacts/coverage_html

  python36-tests-sqlite3:
    docker:
      - image: cimg/python:3.6-browsers
    resource_class: large
    steps:
      - checkout

      - setup-locale:
          language: fr_FR
          encoding: UTF-8

      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
      - run: cp ~/project/.circleci/sqlite3_settings.py creme/local_settings.py
      - run: python creme/manage.py migrate
      - run: python creme/manage.py creme_populate
      - run: python creme/manage.py generatemedia
      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
      - run: coverage combine
      - run: coverage html
      - store_artifacts:
          path: artifacts/coverage_html


  python37-tests-sqlite3:
    docker:
      - image: cimg/python:3.7-browsers
    resource_class: large
    steps:
      - checkout

      - setup-locale:
          language: fr_FR
          encoding: UTF-8

      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.7"
      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
      - run: cp ~/project/.circleci/sqlite3_settings.py creme/local_settings.py
      - run: python creme/manage.py migrate
      - run: python creme/manage.py creme_populate
      - run: python creme/manage.py generatemedia
      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
      - run: coverage combine
      - run: coverage html
      - store_artifacts:
          path: artifacts/coverage_html


  python38-tests-sqlite3:
    docker:
      - image: cimg/python:3.8-browsers
    resource_class: large
    steps:
      - checkout

      - setup-locale:
          language: fr_FR
          encoding: UTF-8

      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.8"
      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
      - run: cp ~/project/.circleci/sqlite3_settings.py creme/local_settings.py
      - run: python creme/manage.py migrate
      - run: python creme/manage.py creme_populate
      - run: python creme/manage.py generatemedia
      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
      - run: coverage combine
      - run: coverage html
      - store_artifacts:
          path: artifacts/coverage_html


  python39-tests-sqlite3:
    docker:
      - image: cimg/python:3.9-browsers
    resource_class: large
    steps:
      - checkout

      - setup-locale:
          language: fr_FR
          encoding: UTF-8

      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.9"
      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
      - run: cp ~/project/.circleci/sqlite3_settings.py creme/local_settings.py
      - run: python creme/manage.py migrate
      - run: python creme/manage.py creme_populate
      - run: python creme/manage.py generatemedia
      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
      - run: coverage combine
      - run: coverage html
      - store_artifacts:
          path: artifacts/coverage_html


  javascript-lint:
    docker:
     - image: cimg/python:3.6-node
    steps:
      - checkout
      - install-node-env
      - run: make eslint


  javascript-tests:
    docker:
     - image: cimg/python:3.6-browsers
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
      - run: python creme/manage.py generatemedia
      - install-node-env
      - run: make karma-ci


workflows:
  version: 2
  build:
    jobs:
      - javascript-lint
      - javascript-tests:
          requires:
            - javascript-lint
      - python36-lint-isort
      - python36-lint-flake8
      - python36-tests-sqlite3:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python36-tests-mysql:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python36-tests-pgsql:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python37-tests-sqlite3:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python38-tests-sqlite3:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python39-tests-sqlite3:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
