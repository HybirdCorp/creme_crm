version: 2.1
parameters:
  source_path:
    type: string
    default: '~/creme_crm'
  instance_directory:
    type: string
    default: 'creme_project'

commands:
  wait-database:
    description: Wait for the database
    parameters:
      port:
        type: integer
    steps:
      - run: dockerize -wait tcp://localhost:<< parameters.port >> -timeout 1m

  checkout-creme:
    description: Retrieve the Creme's source
    steps:
      - checkout:
          path: << pipeline.parameters.source_path >>

  install-creme-system-packages:
    description: Install creme dependencies
    steps:
      - run: sudo apt update
      - run: sudo apt install -y python3-dev graphviz libgraphviz-dev pkg-config lcab

  install-py-dev-env:
    parameters:
      python:
        type: string
    steps:
      - restore_cache:
          keys:
#            - <<parameters.python>>-creme_crm-{{ checksum "setup.cfg" }}
            - << parameters.python >>-creme_crm-{{ checksum "<< pipeline.parameters.source_path >>/setup.cfg" }}
            - << parameters.python >>-creme_crm

      - run: <<parameters.python>> -m venv ~/venv
      # Require setuptools v46.4.0 at least
      - run: ~/venv/bin/pip install -U pip setuptools
      - run: echo "source ~/venv/bin/activate" >> $BASH_ENV
#      - run: pip install -U -e .[dev,mysql,pgsql,graphs]
      - run: pip install -U -e << pipeline.parameters.source_path >>[dev,mysql,pgsql,graphs]
      - run: python --version
      - run: pip freeze
      - run: pip list --outdated

      - save_cache:
#          key: <<parameters.python>>-creme_crm-{{ checksum "setup.cfg" }}
          key: << parameters.python >>-creme_crm-{{ checksum "<< pipeline.parameters.source_path >>/setup.cfg" }}
          paths: "~/venv"

  install-node-env:
    steps:
      - restore_cache:
          key: node-dependencies-{{ checksum "<< pipeline.parameters.source_path >>/package-lock.json" }}

      - run: cp << pipeline.parameters.source_path >>/package*.json << pipeline.parameters.instance_directory >>
      - run:
          name: Installing NodeJS
          working_directory: << pipeline.parameters.instance_directory >>
          command: npm install && npm run eslint-install
          environment:
            ESLINT_CREME_PLUGINS: "<< pipeline.parameters.source_path >>/creme/static/utils/eslint/"
      - run:
          working_directory: << pipeline.parameters.instance_directory >>
          command: npm list

      - save_cache:
          key: node-dependencies-{{ checksum "<< pipeline.parameters.source_path >>/package-lock.json" }}
          paths:
            - << pipeline.parameters.instance_directory >>/node_modules

  create-creme-project:
    description: Create Creme project
    steps:
      - run: mkdir << pipeline.parameters.instance_directory >>
      - run: touch << pipeline.parameters.instance_directory >>/__init__.py
      - run: mkdir << pipeline.parameters.instance_directory >>/media
      - run: mkdir << pipeline.parameters.instance_directory >>/media/static
      # Not really useful because unit tests override with a sub-folder in /tmp/
      - run: mkdir << pipeline.parameters.instance_directory >>/media/upload
      - run: cp << pipeline.parameters.source_path >>/.circleci/circleci_settings.py << pipeline.parameters.instance_directory >>/settings.py

  setup-creme-statics:
    description: Setup Creme static resources
    steps:
      - run: creme generatemedia --settings=<< pipeline.parameters.instance_directory >>.settings

  setup-creme-unit-tests:
    description: Setup Creme database
    parameters:
      local_settings:
        type: string
        default: 'sqlite3_settings'
    steps:
      - run: cp << pipeline.parameters.source_path >>/.circleci/<< parameters.local_settings >>.py << pipeline.parameters.instance_directory >>/local_settings.py
      - run: creme migrate --settings=<< pipeline.parameters.instance_directory >>.settings
      - run: creme creme_populate --settings=<< pipeline.parameters.instance_directory >>.settings
      - run: creme generatemedia --settings=<< pipeline.parameters.instance_directory >>.settings

  run-creme-unit-tests:
    description: Run Creme unit tests
    steps:
      # File .coveragerc is implicitly used by coverage.py (use argument "--rcfile" instead?)
      - run: cp << pipeline.parameters.source_path >>/.circleci/circleci_coverage.ini .coveragerc
      - run: COVERAGE_PROCESS_START=.coveragerc coverage run --source << pipeline.parameters.source_path >>/creme/ << pipeline.parameters.source_path >>/creme/manage.py test --settings=<< pipeline.parameters.instance_directory >>.settings --noinput --parallel=8 creme
      - run: coverage combine
      - run: coverage html
      - store_artifacts:
          # NB: see .circleci/circleci_coverage.ini
          path: artifacts/coverage_html

  setup-locale:
    description: "Locale: Setup"
    parameters:
      language:
        type: string
      encoding:
        type: string
    steps:
      - run:
          name: "Locale: locale-gen"
          command: |
            echo "<< parameters.language >>.<< parameters.encoding >> << parameters.encoding >>" | sudo tee -a /etc/locale.gen
            sudo locale-gen
      - run:
          name: "Locale: Setup Environment Variables"
          command: |
            echo "export LANG=<< parameters.language >>.<< parameters.encoding >>" >> $BASH_ENV
            echo "export LANGUAGE=<< parameters.language >>" >> $BASH_ENV
            echo "export LC_ALL=<< parameters.language >>.<< parameters.encoding >>" >> $BASH_ENV


jobs:
  python36-lint-isort:
    docker:
      - image: circleci/python:3.6
    steps:
#      - checkout
      - checkout-creme
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
#      - run: make isort-check
      - run: make -C << pipeline.parameters.source_path >> isort-check


  python36-lint-flake8:
    docker:
      - image: circleci/python:3.6
    steps:
#      - checkout
      - checkout-creme
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
#      - run: flake8 creme/
      - run: flake8 << pipeline.parameters.source_path >>/creme/ --config << pipeline.parameters.source_path >>/setup.cfg


  python36-tests-mysql:
    docker:
      - image: circleci/python:3.6-browsers
      - image: circleci/mysql:5.7-ram
        environment:
          MYSQL_ROOT_PASSWORD: creme
          MYSQL_DATABASE: cremecrm
    resource_class: large
    steps:
#      - checkout
      - checkout-creme
      - setup-locale:
          language: fr_FR
          encoding: UTF-8
      - wait-database:
          port: 3306
      - install-creme-system-packages
      - run: sudo apt install -y mariadb-client
      - install-py-dev-env:
          python: "python3.6"
#      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
#      - run: cp ~/project/.circleci/mysql_settings.py creme/local_settings.py
#      - run: python creme/manage.py migrate
#      - run: python creme/manage.py creme_populate
#      - run: python creme/manage.py generatemedia
      - create-creme-project
      - setup-creme-unit-tests:
          local_settings: 'mysql_settings'
#      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
#      - run: coverage combine
#      - run: coverage html
#      - store_artifacts:
#          path: artifacts/coverage_html
      - run-creme-unit-tests


  python36-tests-pgsql:
    docker:
      - image: circleci/python:3.6-browsers
      - image: circleci/postgres:12-ram
        environment:
          POSTGRES_USER: creme
          POSTGRES_PASSWORD: creme
          POSTGRES_DB: cremecrm
    resource_class: large
    steps:
#      - checkout
      - checkout-creme
      - setup-locale:
          language: en_US
          encoding: UTF-8
      - wait-database:
          port: 5432
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
#      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
#      - run: cp ~/project/.circleci/pgsql_settings.py creme/local_settings.py
#      - run: python creme/manage.py migrate
#      - run: python creme/manage.py creme_populate
#      - run: python creme/manage.py generatemedia
      - create-creme-project
      - setup-creme-unit-tests:
          local_settings: 'pgsql_settings'
#      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
#      - run: coverage combine
#      - run: coverage html
#      - store_artifacts:
#          path: artifacts/coverage_html
      - run-creme-unit-tests


  python36-tests-sqlite3:
    docker:
      - image: circleci/python:3.6-browsers
    resource_class: large
    steps:
#      - checkout
      - checkout-creme
      - setup-locale:
          language: fr_FR
          encoding: UTF-8
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
#      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
#      - run: cp ~/project/.circleci/sqlite3_settings.py creme/local_settings.py
#      - run: python creme/manage.py migrate
#      - run: python creme/manage.py creme_populate
#      - run: python creme/manage.py generatemedia
      - create-creme-project
      - setup-creme-unit-tests
#      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
#      - run: coverage combine
#      - run: coverage html
#      - store_artifacts:
#          path: artifacts/coverage_html
      - run-creme-unit-tests


  python37-tests-sqlite3:
    docker:
      - image: circleci/python:3.7-browsers
    resource_class: large
    steps:
#      - checkout
      - checkout-creme
      - setup-locale:
          language: fr_FR
          encoding: UTF-8
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.7"
#      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
#      - run: cp ~/project/.circleci/sqlite3_settings.py creme/local_settings.py
#      - run: python creme/manage.py migrate
#      - run: python creme/manage.py creme_populate
#      - run: python creme/manage.py generatemedia
      - create-creme-project
      - setup-creme-unit-tests
#      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
#      - run: coverage combine
#      - run: coverage html
#      - store_artifacts:
#          path: artifacts/coverage_html
      - run-creme-unit-tests


  python38-tests-sqlite3:
    docker:
      - image: circleci/python:3.8-browsers
    resource_class: large
    steps:
#      - checkout
      - checkout-creme
      - setup-locale:
          language: fr_FR
          encoding: UTF-8
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.8"
#      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
#      - run: cp ~/project/.circleci/sqlite3_settings.py creme/local_settings.py
#      - run: python creme/manage.py migrate
#      - run: python creme/manage.py creme_populate
#      - run: python creme/manage.py generatemedia
      - create-creme-project
      - setup-creme-unit-tests
#      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
#      - run: coverage combine
#      - run: coverage html
#      - store_artifacts:
#          path: artifacts/coverage_html
      - run-creme-unit-tests


  python39-tests-sqlite3:
    docker:
      - image: circleci/python:3.9-browsers
    resource_class: large
    steps:
#      - checkout
      - checkout-creme
      - setup-locale:
          language: fr_FR
          encoding: UTF-8
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.9"
#      - run: cp ~/project/.circleci/circleci_settings.py creme/project_settings.py
#      - run: cp ~/project/.circleci/sqlite3_settings.py creme/local_settings.py
#      - run: python creme/manage.py migrate
#      - run: python creme/manage.py creme_populate
#      - run: python creme/manage.py generatemedia
      - create-creme-project
      - setup-creme-unit-tests
#      - run: COVERAGE_PROCESS_START=setup.cfg coverage run --source creme/ creme/manage.py test --noinput --parallel=8
#      - run: coverage combine
#      - run: coverage html
#      - store_artifacts:
#          path: artifacts/coverage_html
      - run-creme-unit-tests


  javascript-lint:
    docker:
     - image: circleci/python:3.6-node-browsers
    steps:
      - checkout-creme
      - install-py-dev-env:
          python: "python3.6"
      - create-creme-project
      - setup-creme-statics
      - install-node-env
      - run: cp << pipeline.parameters.source_path >>/.eslint* << pipeline.parameters.instance_directory >>
      - run:
          name: Javascript linting
          working_directory: << pipeline.parameters.instance_directory >>
          command: |
              find << pipeline.parameters.source_path >>/creme -iname *.js | xargs --no-run-if-empty \
                  node_modules/.bin/eslint \
                  --no-eslintrc \
                  --config .eslintrc \
                  --ignore-path .eslintignore \
                  --format stylish
      - run:
          name: Template javascript linting
          working_directory: << pipeline.parameters.instance_directory >>
          command: |
              find << pipeline.parameters.source_path >>/creme -iname *.html | xargs --no-run-if-empty \
                  node_modules/.bin/eslint \
                  --no-eslintrc \
                  --config .eslintrc \
                  --ignore-path .eslintignore \
                  --plugin template \
                  --rule 'template/no-template-branch: 2' \
                  --global '____' \
                  --format stylish

  javascript-tests:
    docker:
     - image: circleci/python:3.6-node-browsers
    steps:
      - checkout-creme
      - install-creme-system-packages
      - install-py-dev-env:
          python: "python3.6"
      - create-creme-project
      - setup-creme-statics
      - install-node-env
      - run:
          name: Karma Tests
          working_directory: << pipeline.parameters.instance_directory >>
          command: node_modules/.bin/karma start << pipeline.parameters.source_path >>/.circleci/.karma.conf.js
          environment:
              KARMA_DJANGOSTATICS: ../project/<< pipeline.parameters.instance_directory >>/media/static
              KARMA_COVERAGEOUTPUT: artifacts/karma_coverage
      - store_artifacts:
          path: artifacts/karma_coverage


  build-creme-demo:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    environment:
      DOCKER_BUILDKIT: 1
    steps:
      - checkout
      - run: docker build --target creme-demo --tag cremecrm/cremecrm-demo:$CIRCLE_BRANCH .
      - run: docker run --detach --rm --name creme_demo --publish 8001:80 --volume creme_data:/srv/creme/data --env CREME_LANGUAGE_CODE=en cremecrm/cremecrm-demo:$CIRCLE_BRANCH
      - run: wget -c --retry-connrefused --waitretry 1 --tries 60 -O /dev/null http://127.0.0.1:8001
      - run: docker kill creme_demo


workflows:
  version: 2
  build:
    jobs:
      - build-creme-demo
      - javascript-lint
      - javascript-tests:
          requires:
            - javascript-lint
      - python36-lint-isort
      - python36-lint-flake8
      - python36-tests-sqlite3:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python36-tests-mysql:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python36-tests-pgsql:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python37-tests-sqlite3:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python38-tests-sqlite3:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
      - python39-tests-sqlite3:
          requires:
            - python36-lint-isort
            - python36-lint-flake8
