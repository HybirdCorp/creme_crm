== Version 2.2 Work in progress (not released -- this is a draft) ==

  UPGRADE NOTE :
    - You should create a all new virtual environment based on Python 3.6+
      (eg: "mkvirtualenv -p /usr/bin/python3XX" if you use 'mkvirtualenv')
      and populate it with "pip install -r creme/requirements.txt" of course.
    - Execute the well known commands "migrate", "generatemedia" & "creme_populate".

  Users side :
  ------------
    # CustomFields have been improved :
        - 3 new types of CustomFields ha ve benn added : TEXT, DATE & URL.
        - New choices for ENUM (Choice list) & MULTI_ENUM (Multiple choice list) CustomFields can be created on-the-go in forms.
        - In mass import, duplicates choices are managed : no error is raised, the first choice is used.
    # Add a new secured view to download dynamic files (ie: uploaded files, files related to entity, files generated by export...).
    # An exception handler for errors 400 (Bad Request) has been added.
    # In listviews, the popup that displays the selected entity filter information is replaced by a popover (see issue #64)
    # The buttons got descriptions, which are displayed as tool-tips.
    # Apps :
        * Creme_config :
            - The possibility to export & import some configured models has been added.
              It's useful to deploy a test/prototype server, & re-use their data on the production server.
              The transferred models are : UserRole, HeaderFilter, EntityFilter, CremePropertyTypes, RelationTypes, Bricks configuration, Buttons configuration, Search configuration.
            - The configuration of CustomFields has been improved :
                - CustomFields can now be marked as required.
                - CustomFields which are related to values cannot be deleted any more; they are just marked as deleted.
                  Marked CustomFields do not appear in list-views, reports etc...
                  If a marked CustomField has no value any more (ie: no entity uses it), it can be definitely deleted.
                - The management of choices for CustomFields (so with type ENUM or MULTI_ENUM) has been improved :
                    - A new view to manage them will improve the managing of great number of choices.
                    - The deletion view proposes now to replace a choice by another one in related entities.
                    - Duplicated choices are now avoided when creating or editing choices.
            - The deletion/replacement of UserRoles uses now the "deletor" Job.
            - A popover is used for permissions by filter in the role configuration.
            - In the configuration of bricks :
                - The constraints of InstanceBricks are displayed.
                - It's now forbidden to delete a RelationType block, a custom block or an instance block when it is used in a configuration.
        * Reports :
            - In Reports, the aggregates related to hidden field are hidden too.
            - The way the abscissa & the ordinate of 'models.AbstractReportGraph' are stored has been rework.
            - The ReportGraph's form has been improved too :
                - The fields for abscissa & ordinate have been replaced by 2 composite/chained fields.
                - The new widget for abscissa does not perform AJAX requests & has autocompletion.
            - A new ReportGraph fetcher specific to Contact has been added : "belows to the Contact/User".
            - The report graph bricks set now the compatible entities types (attribute "target_ctypes") ;
              so they are only proposed for detail-view's brick configuration which are relevant.
        * Billing :
            - A backend system to export documents as files replaces the old PDF export (based on LateX) ;
              Several backends have been created, based on: xhtml2pdf, weasyprint, xlwt (python packages) & pdflatex (external binary, like before).
              All these backends export PDF files, excepted the one based on 'xlwt' which exports raw data in XLS files.
              In the default settings, the one based on 'xhtml2pdf' & 'xlwt' are activated ; there are easy to install with "pip", even on Windows, & give good results.
              The 2 "new" PDF exporters ('xhtml2pdf' & 'weasyprint') got new visual design.
              If you were using LateX in previous releases, configure your setting 'BILLING_EXPORTERS', & then select it in the configuration GUI of 'billing'.
        * Activities :
            - The version of Fullcalendar has been upgraded (from "1.6.7" to "3.10").
            - The creation/edition of events through a range selection is now possible in the calendar.
        * Persons :
            - The constraints of the RelationTypes "owns => belongs to" have been narrowed to: [Contact, Organisation] => Organisation.
        * Tickets :
            - A field 'Status.is_closed' has been added ; it can be edited in configuration.
        * Commercial :
            - The constraints of some RelationTypes have been narrowed :
                - "has sold => has been sold by" : [Contact, Organisation] => [Product, Service].
                - with "completes a goal of the commercial action", this types cannot be subject any more :
                  Strategy, billing.{CreditNote, TemplateBase, ProductLine, ServiceLine}
        * Projects :
            - The fields "start" & "end" of Tasks cannot be emptied with the inner-edition any more.
              BEWARE: if you have empty values, they are replaced at migration (<0> for duration, <01-01-1970> for start/end).

  Developers side :
  -----------------

    Non breaking changes :
    ----------------------
        # Deprecations :
            - In 'creme_core.models', some custom managers have been added to :
                - The method 'ButtonMenuItem.create_if_needed()' is deprecated ; use 'ButtonMenuItem.objects.create_if_needed()' instead.
                - In 'entity_filter' :
                    - The method 'EntityFilter.create()' is deprecated ; use 'EntityFilter.objects.smart_update_or_create()' instead.
                    - The method 'EntityFilter.get_for_user()' is deprecated ; use "EntityFilter.objects.filter_by_user(...).filter(entity_type[in]=...)" instead.
                    - The method 'EntityFilter.get_latest_version()' is deprecated ; use 'EntityFilter.objects.get_latest_version()' instead.
                - In 'header_filter' :
                    - The method 'HeaderFilter.get_for_user()' is deprecated ; use "HeaderFilter.objects.filter_by_user(...).filter(entity_type=...)" instead.
                    - The method 'HeaderFilter.create()' is deprecated ; use 'HeaderFilter.objects.create_if_needed()' instead.
                - In 'custom_field' :
                    - These methods of 'CustomField' are deprecated : type_verbose_name(), get_pretty_value()
                    - The method 'CustomField.get_value_class()' is deprecated ; use the property 'value_class' instead.
                    - The method 'CustomFieldValue.delete_all()' is deprecated.
                - In 'fields_config' :
                    - The method 'FieldsConfig.create()' is deprecated ; use 'FieldsConfig.objects.create()' instead.
                    - The method 'FieldsConfig.field_enumerator()' is deprecated ; use 'FieldsConfig.objects.field_enumerator()' instead.
                    - The method 'FieldsConfig.filter_cells()' is deprecated ; use 'creme_core.core.entity_cell.EntityCell.is_excluded' instead.
                    - The method 'FieldsConfig.get_4_model()' is deprecated ; use 'FieldsConfig.objects.get_for_model()' instead.
                    - The method 'FieldsConfig.get_4_models()' is deprecated ; use 'FieldsConfig.objects.get_for_models()' instead.
                    - The method 'FieldsConfig.is_model_valid()' is deprecated ; use 'FieldsConfig.objects.is_model_valid()' instead.
                - In 'bricks' :
                    - The property 'BrickHomeLocation.brick_verbose_name' is deprecated.
                    - The property 'BrickMypageLocation.brick_verbose_name' is deprecated.
                    - The method 'CustomBrickConfigItem.generate_id()' is deprecated ; use the property "brick_id" instead.
                    - The method 'InstanceBrickConfigItem.errors()' is deprecated ; use 'InstanceBrickConfigItem.brick.errors' instead.
                - In 'search' :
                    - The method 'SearchConfigItem.create_if_needed()' is deprecated ; use 'SearchConfigItem.objects.create_if_needed()' instead.
                    - The method 'SearchConfigItem.get_4_models()' is deprecated ; use 'SearchConfigItem.objects.iter_for_models()' instead.
            - In the class 'creme_core.backends._BackendRegistry':
                - The property 'backends' is deprecated ; use 'backend_classes' instead.
                - The method 'get_backend() is deprecated ; use 'get_backend_class()' instead.
            - In 'creme_core.forms' :
                - In 'widgets', these classes are deprecated : DependentSelect, AjaxChoiceField & AjaxMultipleChoiceField
            - In 'creme_core.gui' :
                - In 'field_printers' :
                    - These functions are deprecated : 'print_integer()', 'print_decimal()'.
                    - The class 'M2MPrinter' is deprecated ; use 'M2MPrinterForHTML' instead.
                - The class 'quick_forms.QuickFormsRegistry' has been improved :
                    - The method 'iter_models()' is deprecated ; use '@models' instead.
                    - The method 'get_form() is deprecated ; use 'get_form_class()' instead.
            - In 'creme_core.views' :
                - These functions of 'bricks' are deprecated ; use the class-based view 'BricksReloading' instead :
                    - get_brick_ids_or_404()
                    - bricks_render_info()
                    - build_context()
                    - render_detailview_brick() & render_home_brick()
                - The function-view 'file_handling.download_file()' is deprecated; use the class-based view 'RegisteredFileFieldDownloadView' instead.
                - In 'decorators', "@POST_only" is deprecated ; use 'django.views.decorators.http.require_POST' instead.
            - In 'creme_core.utils' :
                - The function 'entities2unicode()' is deprecated ; use 'entities_to_str()' instead.
                - The function 'related2unicode()' is deprecated.
                - A new module 'content_type' has been added :
                    - The function 'creme_entity_content_types()' is deprecated ; use 'content_type.entity_ctypes()' instead.
                    - The function 'get_ct_or_404() is deprecated ; use 'content_type.get_ctype_or_404()' instead.
                    - The function 'build_ct_choices() is deprecated ; use 'content_type.ctype_choices()' instead.
            - In 'creme_core.templatetags' :
                - "{% creme_media_url %}" is deprecated ; use the icon system instead.
                - "{% hg_info %}" is deprecated ; use "{% scm_info %}" instead.
            - In JavaScript :
                - The package "creme.color" is deprecated and can be replaced by RGBColor tools.
            - Apps :
                * Creme_config :
                    - The class 'forms.user_role.UserRoleDeleteForm' is deprecated ; use 'UserRoleDeletionForm' instead.
                    - In 'forms.custom_fields' :
                        - The class 'CustomFieldsBaseForm' is deprecated ; use 'CustomFieldBaseForm' instead.
                        - The class 'CustomFieldsCTAddForm' is deprecated ; use 'FirstCustomFieldCreationForm' instead.
                        - The class 'CustomFieldsAddForm' is deprecated ; use 'CustomFieldCreationForm' instead.
                        - The class 'CustomFieldsEditForm' is deprecated.
                * Persons :
                    - These function-views in 'views.crud_relations' are deprecated ; use the view named "creme_core__save_relations" instead :
                      become_customer(), become_prospect(), become_suspect(), become_inactive(), become_supplier()
                    - The abstract function-view 'views.crud_relations._link()' is deprecated.
                * Reports :
                    - In 'core.graph' :
                        - In the class 'ReportGraphHand', the property 'verbose_ordinate' is deprecated ; you can use the templatetag "{% reports_graph_ordinate %}" instead.
                        - The method 'fetcher.RegularFieldLinkedGraphFetcher.validate_fieldname()' is deprecated.
                    - In 'models' :
                        - The method 'AbstractReport.get_related_fields_choices()' is deprecated.
                        - In 'AbstractReportGraph' :
                            - The method 'create_instance_brick_config_item() is deprecated ; use 'GraphFetcher.create_brick_config_item()' instead.
                            - The method 'get_fetcher_from_instance_brick()' is deprecated ; use "ReportGraphBrick(...).fetcher" instead.
                            - The inner-class 'InstanceBrickConfigItemError' is deprecated.
                    - In 'views.graph':
                        - The function-view 'get_available_report_graph_types()' is deprecated.
                        - The function '_get_available_report_graph_types()' is deprecated.
                * Documents :
                    - The method 'models.AbstractDocument.get_linkeddoc_relations()' is deprecated.
                * Billing :
                    - In 'models.Base', the methods 'get_source()/get_target()' are deprecated ; use the properties "source/target" instead.
                * Commercial :
                    - These constants are deprecated : REL_SUB_SOLD_BY REL_OBJ_SOLD_BY. Use REL_SUB_SOLD & REL_OBJ_SOLD instead.
                * Emails :
                    - The method 'models.EmailSending.get_mails()' is deprecated ; use '.mails_set' instead.
                    - The method 'models.EmailSending.get_unsent_mails_count()' is deprecated ; use the property 'unsent_mails' instead.
                    - These function-views of 'views.crudity' are deprecated ; use the class 'EmailStatusSetting' instead :
                      spam(), validated(), waiting()
                    - The function 'views.crudity.set_emails_status()' is deprecated.
                * Projects :
                 - The property 'AbstractProjectTask.safe_duration' is deprecated ; use the field "duration" instead.
        # Some static typing has been made in 'creme_core' with the help of mypy (& pyCharm).
        # A configuration for CircleCI has been added ; many checks have been added (isort, flake8, ...).
        # A string permission for staff users has been added : creme_core.auth.STAFF_PERM
        # In 'creme_core.core.entity_cell.EntityCell'
            - A class attribute "verbose_name" has been added.
            - An attribute "is_excluded" has been added.
        # In 'creme_core.forms.base', the calls to class-methods "add_post_*_callback()" can be chained.
        # In the class 'creme_core.gui.bricks.Brick', the attribute "permission" has been clearly added (it was dynamiccaly checked by the views).
          If you set it, youy should use an empty string isntead of <None>.
        # A custom manager has been added to CustomField ; some queries are now cached.
        # A new templatetag for bricks has been added : {% brick_get_by_ids ... %}.
        # In unit tests :
            - 2 new assertions: assertInChoices(), assertNotInChoices()
            - 2 new methods : get_choices_group_or_fail(), create_user()
        # In JavaScript :
            - A class 'Assert()', which factorizes some validation code, has been added.
            - A builtin method 'instance' has been added in 'creme.utils.newJQueryPlugin'.
        # Apps :
            * Reports :
                - A property 'models.AbstractReportGraph.abscissa_info' has been added.
            * CTI :
                - Javascript :
                    - Refactor 'creme.cti.phoneCall' and add 'creme.cti.PhoneCallAction'

    Breaking changes :
    ------------------
        # The minimum version of Python has been upgraded to "3.6".
        # The Closure compiler is used instead of YUI for JavaScript (YUI fails on recent JS, but is still used for CSS).
        # Deprecated stuffs which have been removed :
            - In 'creme_core.models' :
                - The method 'CremePropertyType.get_compatible_ones()' has been removed.
                - In 'Relation', these methods have been removed: get_compatible_ones(), models.Relation.filter_in()
                - The method 'RelationBrickItem.objects.create_if_needed()' has been removed.
                - In 'BrickDetailviewLocation', these method have been removed :
                    - config_exists()
                    - create_if_needed(), create_4_model_brick()
                    - id_is_4_model()
                - In 'BrickState', these methods have been removed: get_for_brick_id(), get_for_brick_ids()
            - In 'creme_core.forms' :
                - The class 'base.CremeModelWithUserForm' has been removed.
                - The method 'mass_import.CustomFieldExtractor.extract_value()' does not raise ValidationErrors anymore ; their are transparently converted into error message like in basic 'Extractor'.
                - The method 'relation._RelationsCreateForm._hash_relation()' has been removed.
            - In 'creme_core.views' :
                - In 'relation' :
                    - These function-views have been removed : 'delete_all()' & 'json_entity_rtypes()'.
                    - The variable 'JSON_PREDICATE_FIELDS' has been removed.
                - The class generic.wizard.PopupWizardMixin' has been removed.
                - The method 'enumerators.EntityFilterEnumerator.efilter_as_dict()' has been removed.
            - The function 'utils.queries.get_q_from_dict()' has been removed.
            - The templatetags "{% get_export_backends %}" & "{% get_import_backends %}" (from the lib "creme_core_tags")  have been removed.
            - These template files in "creme_core/generics/blockform/"  have been removed :
              add_wizard.html, add_wizard_popup.html, edit_wizard_popup.html, wizard_popup.html
            - In JavaScript :
                - The function 'creme.utils.appendInUrl()' has been removed.
                - The method 'creme.lv_widget.selectedLines()' has been removed.
            - Apps :
                * Creme_config :
                    - The support of "creme_config_register" files has been removed.
                    - The class-view 'views.custom_fields.CTypeCustomFieldsDeletion' (& so the related URL named "creme_config__delete_ctype_custom_fields") has been removed.
                    - The function-view 'views.creme_property_type.delete()' has been removed.
                    - The template "creme_config/custom_fields_portal.html" has been moved/renamed : "creme_config/custom_field/portal.html"
                * Activities :
                    - These methods of 'models.AbstractActivity' have been removed :
                        - get_title_for_calendar()
                        - get_future_linked(), get_future_linked_for_orga()
                        - get_past_linked(), get_past_linked_for_orga()
                        - _get_linked_aux(), _get_linked_for_orga()
                        - is_auto_orga_subject_enabled()
                    - These methods of 'models.Calendar' have been removed :
                        - _create_default_calendar(), get_user_calendars(), get_user_default_calendar()
                        - new_color()
                * Persons :
                    - The method 'models.AbstractOrganisation.get_all_managed_by_creme()' has been removed.
                    - The attributes "what" & "url_name" of the button 'buttons.CrmButton' (& so its children) have been removed.
                    - JavaScript:
                        - The function 'creme.persons.become()' has been removed and replaced by 'creme.persons.BecomeAction'.
                * Billing :
                    - These constants have been removed: DISPLAY_PAYMENT_INFO_ONLY_CREME_ORGA, PERCENT_PK & AMOUNT_PK.
                    - There were some changes in 'bricks._LinesBrick' (and child classes):
                        - The method '_get_document_lines()' has been removed.
                        - These class attributes have been removed: related_item_model & related_item_label
                    - These templates of 'billing/frags/' have been removed : button_convert2invoice.html, button_convert2order.html
                    - The JavaScript function 'creme.billing.generateInvoiceNumber()' has been removed.
                * Opportunities :
                    - 'constants.SETTING_USE_CURRENT_QUOTE' has been removed.
                    - These methods of 'models.AbstractOpportunity' have been removed: 'get_contacts()', 'get_products()', 'get_responsibles()', 'get_services()'.
                * Reports :
                    - The view 'views.graph.cast_order()' has been removed.
                    - The JavaScript function 'creme.reports.exportReport()' has been removed.
                * Projects :
                    - The model 'Resource' does not inherit 'CremeEntity' any more. Beware the "pure" 'CremeEntity' fields (like "description") are dropped.
                    - In 'forms.task.RelatedActivityEditForm', the field "resource" is now related to 'persons.models.Contact'.
                * Commercial :
                    - The template filter "|has_quickform" (from the lib "commercial_tags") has been removed.
                * Tickets :
                    - The constants 'models.status.BASE_STATUS' has changed (2-tuple => 3-tuple).
                * Mobile :
                    - The template filter "|employers" (from "mobile_tags") has been removed.
                * Crudity :
                    - The template filter "|truncate" (from the lib "crudity_tags") has been removed.
                * Events :
                    - The template file "creme/events/templates/events/lv_button_link_contacts.html" has been removed.
                * Graphs :
                    - The model-field 'Graph.orbital_relation_types' is not editable (it was manually excluded from forms).
        # The root URL 'site_media/*' has been removed.
        # The URL named "creme_core__dl_file" has been removed ; use the URL named "creme_core__download" instead (beware: the arguments are different).
        # In 'creme_core.core' :
            - In 'entity_cell' :
                - The attribute 'EntityCell.title' (& constructor's argument "title") has been removed ; use the property (read-only) instead.
                - The attribute 'EntityCellCustomField._CF_CSS' has been removed.
                - In 'EntityCellVolatile.__init__()', the argument "render_func" has been removed ; implement the methods 'render_csv()/render_html()' in child classes instead.
            - In 'job' several classes have been renamed in order to add a custom manager class to Job in the future :
                - The class 'JobManager' has been renamed 'JobScheduler'.
                - The class '_BaseJobManagerQueue' has been renamed '_BaseJobSchedulerQueue'.
                - The class 'JobManagerQueue' has been renamed 'JobSchedulerQueue'.
            - In the class 'reminder.Reminder':
                - The class attribute 'id' is now an empty string, not <None> any more.
                - The class attribute 'model' is now <CremeModel>, not <None> any more.
            - The class attribute 'sandbox.SandboxType.id' is now an empty string, not <None> any more.
        # In 'creme_core.backends' :
            - The property '_BackendRegistry.extensions' now returns an iterator (not a keys-view anymore).
            - The method 'base.ExportBackend.save()' takes now an additional argument: user.
            - The class 'xls_export.XLSExportBackend' does not inherit 'creme_core.utils.xlwt_utils.XlwtWriter' anymore (there is a "writer" attribute instead).
        # The class attribute 'creme_core.creme_jobs.base.JobType.id' is now an empty string, not <None> any more.
        # In 'creme_core.forms' :
            - A Quick Form class must now inherit 'creme_core.forms.base.CremeEntityQuickForm'.
            - In 'mass_import':
                - The class 'Extractor' has ben renamed 'RegularFieldExtractor'.
                - The medthods 'extract_value' of these classes take an additional argument "user" :
                  'RegularFieldExtractor', 'CustomFieldExtractor'.
                - The class 'ExtractorField' has been renamed 'RegularFieldExtractorField'.
                - The class 'ExtractorWidget' has been renamed 'RegularFieldExtractorWidget'.
                - The template "creme_core/forms/widgets/mass-import/extractor.html" has been renamed "field-extractor.html".
                - The attribute 'ImportForm4CremeEntity.cfields' is now a <Dict[int, CustomField]>.
        # In 'creme_core.gui' :
            - In 'actions' :
                - The class attribute 'UIAction.id' is now an empty string, not <None> any more.
                - The class attribute 'UIAction.model' is now <django.db.models.Model>, not <None> any more.
                - The class 'VoidAction' now inherits 'UIAction'.
            - In 'bricks' :
                - The class attribute 'Brick.id_' is now an empty string, not <None> any more.
                - Classes of "Instance brick" must now inherit the new base class 'InstanceBrick'.
            - The class attribute 'button_menu.Button.id_' is now an empty string, not <None> any more.
        # In 'creme_core.models' :
            - In 'RelationType', these ManyToManyFields are now properties, & must be replaced when used in queries :
                - The field "object_ctypes" ; use "symmetric_type__subject_ctypes" instead.
                - The field "object_properties" ; use "symmetric_type__subject_properties" instead.
            - In the method 'FieldsConfig.LocalCache.is_fieldinfo_hidden()', the argument "model" has been removed.
            - The way the model 'InstanceBrickConfigItem' stores extra data has been reworked :
              it's a JSON dictionnary now, & data are not duplicated in the brick ID anymore.
                - The field 'brick_id' has been replaced by 'brick_class_id' ;
                  it only contains the basic class ID ("instanceblock_{appname}-{name}") not the second part with the related entity ID.
                  A proprerty named "brick_id" has been added, but it returns the new kind of ID for the instance of the bricks ("instanceblock-{config_item_id}").
                - The field 'data' has been replaced by 'json_extra_data', which contains a JSON dictionary.
                  If you wrote your own class of 'InstanceBrick' & which uses extra data, you should write a data migration (see the app 'reports' for an example).
                - The field 'verbose' has been removed.
                - These methods have been removed: generate_id(), get_base_id(), id_is_specific()
            - The PK ("id" field) of 'ButtonMenuItem' is now a classical AutoField (so IDs are integers), not a CharField anymore.
            - The method 'CustomFieldValue._get_formfield()' is now abstract (ie: it will raise a 'NotImplementedError' if not overriden).
            - In 'EntityFilterCondition' :
                - The field "value" has been renamed "raw_value".
                - The property 'decoded_value' has been renamed 'value' (and the related setter has been added).
                - The static method 'encode_value()' has been removed ; use the setter named "value" instead.
            - The field 'SetCredentials.ctype' cannot be set to 'CremeEntity' (use 'None' instead).
            - The constructor of 'entity_filter.EntityFilterList' does not work with <None> or list of ContentTypes for the attribute "content_type" any more.
            - The constructor of 'header_filter.HeaderFilterList' does not accept <None> for content_type's value any more.
        # In 'creme_core.forms' :
            - In 'header_filter':
                - In the form field 'EntityCellsField' :
                    - The argument "content_type" (ContentType instance) of '__init__()' has been replaced by "model" (model class).
                    - The property 'content_type' is deprecated ; use the property 'models' instead.
                      Beware: the default value is 'CremeEntity', <None> cannot be used anymore.
                    - Many protected methods have been removed.
               - These constants have been removed: _RFIELD_PREFIX, _CFIELD_PREFIX, _FFIELD_PREFIX, _RTYPE_PREFIX.
            - The function 'mass_import.get_backend()' has been renamed 'get_import_backend_class()'.
        # In 'creme_core.utils' :
            - The first argument of 'dependence_sort.dependence_sort()' has been renamed from "l" to "iterable".
        # In 'creme_core.views' :
            - The function-view 'exceptions.permission_denied()' does not inject a context variable "protected_objects" any more ;
              the related template "creme_core/forbidden.html" has been updated.
            - More views are now class-based (notably the reloading views for Bricks) :
                - The function-view 'batch_process.get_ops()' has been replaced by the class 'OperatorChoices'.
                - These function-views of 'bricks' have been replaced by classes :
                    - 'reload_basic()' by 'BricksReloading'.
                    - 'reload_detailview()' by 'DetailviewBricksReloading'.
                    - 'reload_home()' by 'HomeBricksReloading'.
                - The function-view 'creme_property.reload_bricks()' has been replaced by the class 'PropertyTypeBricksReloading'.
                - In 'entity' :
                    - These function-views have been replaced by classes :
                        - 'delete_entity()' by 'EntityDeletion'.
                        - 'delete_entities()' by 'EntitiesDeletion'.
                        - 'empty_trash()' by 'TrashCleaning'.
                        - 'get_info_fields()' by 'FieldsInformation'.
                        - 'get_sanitized_html_field()' by 'HTMLFieldSanitizing'.
                        - 'restore_entity()' by 'EntityRestoration'.
                        - 'restrict_to_superusers()' by 'SuperusersRestriction'.
                    - The function 'entity._delete_entity()' has been removed.
                - These function-views of 'job' have been replaced by classes :
                    - 'enable()' by 'JobEnabling'.
                    - 'get_info' by 'JobsInformation'.
                    - 'reload_bricks()' by 'JobBricksReloading'.
                - The method 'mass_export.MassExport.get_backend()' has been renamed 'get_backend_class()'.
                - The function-view 'search.reload_brick()' has been replaced by the class 'SearchBricksReloading'.
        # The URL named "creme_core__quick_form" has changed : the sub-string "from_widget/" has been removed (no problem if you use 'urls.reverse()' of course).
        # In "creme_core/templates/" :
            - The structure of the base template has been cleaned :
                - In the template "creme_core/base.html", these "{% block %}" have been removed: before_content_1, before_content_2, before_content_3, after_content_1, after_content_2, after_content_3.
                - In the template "creme_core/detailview.html", "{% block before_content_1 %}" has been replaced by "{% block global_buttons_container %}".
            - The template "creme_core/forms/widgets/entity-cells.html" has been replaced by "creme_core/forms/widgets/entity-cells/widget.html"
        # In JavaScript :
            - The name "instance" cannot be used for plugin method any more (because it's already used).
            - <element.data("list_view")> will not work any more ; use <element.list_view("instance")> instead.
            - The class 'creme.utils.ConverterRegistry' has been reworked :
                - 'creme.utils.converters' is now a method and gives access to a private instance of 'ConverterRegistry'.
                - The function 'creme.utils.converter()' has been removed.
        # Apps :
            * Creme_config :
                - The attributes "form_list" of wizard views are now lists (ie: not tuples anymore).
                - These function-views of 'views.generics_views' have by replaced by classes :
                    - 'reload_model_brick()' by 'ModelBrickReloading'.
                    - 'reload_app_bricks()' by 'AppBricksReloading'.
                - In 'views.user_role' :
                    - The class 'BaseRoleEdition' has been removed.
                    - There were many changes in the class 'RoleDeletion' (mainly: it does not delete the role any more).
            * Persons :
                - The function-view 'views.organisation.unset_managed()' has been replaced by the class 'OrganisationUnmanage'.
            * Documens :
                - The method 'models.Document.get_dl_url()' has been removed ; use the method 'get_download_absolute_url()' instead.
            * Activities :
                - The view named "activities__create_activity_popup" now accepts "start" & "end" arguments in ISO8601.
                - The ending date returned by the view named "activities__calendars_activities" has changed : "end day + 1 at 00:00" instead of "end day at 23:59"
                - In JavaScript, all methods of 'creme.activities.calendar' have been removed & replaced by 'creme.activities.CalendarController'.
            * Emails :
                - These fields of 'models.AbstractMailingList' are now <editable=False> :
                  'children', 'contacts' & 'organisations'.
                - These function-views have been replaced by classes :
                    - 'sending.reload_sending_bricks()' by 'SendingBricksReloading'.
                    - 'mail.resend_mails()' by 'EntityEmailsResending' (beware the response is not JSON anymore).
                    - 'mail.get_lightweight_mail_body()' by 'LightWeightEmailBody'.
                - In JavaScript :
                    - 'creme.emails.ResendEMailsAction' does not expect a JSON response anymore.
            * Billing :
                _ In 'models':
                    - In 'Base' (& so child classes 'Invoice', 'Quote'…), "source" & "target" must be provided before saving.
                    - In 'Line' :
                        - The way discount types are represented has been fixed (we used some hacks since years).
                            - The model-field 'total_discount' has been removed.
                            - In the model-field 'discount_unit' :
                                - The choice 'DISCOUNT_ITEM_AMOUNT' has been added.
                                - The value of these attributes has changed :
                                    - "null == False" & "blank == False".
                                    - "editable == True".
                        - These attribute of the model-field 'vat_value' have changed :
                            - "null == False" & "blank == False".
                            - "default == 1".
                - Several changes in 'forms.base.BaseEditForm' :
                    - The attributes "issued_relation" & "received_relation" have been removed.
                    - The method '_manage_relation()' has been removed.
                - In 'views' :
                    - The function-view 'invoice.generate_number()' has been replaced by the class 'NumberGeneration'.
                    - The function-view 'export.export_as_pdf()' has been replaced by the class 'Export'.
                      Notice that the context injected in '.tex' files (if you still use this backend) has changed (only "object" is injected).
                    - The variable 'export.TEMPLATE_PATHS' has been removed.
                - The URL named "billing__export" has changed ("/generate_pdf/" became "/export/" ) ; no problem if you use the name.
                - In 'templates/billing/' :
                    - The template directory 'form' has been renamed 'forms' ; class-views have been updated.
                    - The files 'templates/*.tex' has changed :
                        - 'invoice.tex' has moved to 'export/latex/FR/fr_FR/clear/', and now extends 'export/latex/FR/fr_FR/clear/base.tex'.
                        - 'billings.tex' has been removed (see other files in 'export/latex/FR/fr_FR/clear/').
                - In Javascript :
                    - Remove creme.billing.ExportDocumentAction
                    - Remove the hatbar action 'billing-export' and use a simple link instead : the export output format is selected on server side.
            * Commercial :
                - These function-views of 'views.strategy' have been replaced by classes.
                    - 'reload_matrix_brick()' by 'MatrixBricksReloading'.
                    - 'set_asset_score()' by 'AssetScoreSetting'.
                    - 'set_charm_score()' by 'CharmScoreSetting'.
                    - 'set_segment_category()' by 'SegmentCategorySetting'.
                    - '_set_score()' (abstract view) by 'BaseScoreSetting'.
            * Products :
                - The method 'forms.mass_import.CategoriesExtractor.extract_value()' takes an additional argument "user".
            * Reports :
                - In the class 'bricks.ReportGraphBrick', the attribute "instance_brick_id" has been removed.
                - In 'core' :
                    - The class 'graph.ReportGraphYCalculator' (& child classes) has been replaced by 'ReportGraphAggregator/ReportGraphAggregatorRegistry'.
                    - The ReportGraph fetchers' code ('graph.fetcher') has been reworked to be configurable/extensible :
                        - The attribute 'GraphFetcher.verbose_volatile_column' has been removed.
                        - The arguments of the constructors for 'RegularFieldLinkedGraphFetcher'/'RelationLinkedGraphFetcher' have changed (see 'GraphFetcher.__init__()').
                - In 'forms' :
                    - The only field of 'bricks.GraphInstanceBrickForm' has changed ; the protected method '_get_volatile_choices()' has been removed.
                    - In 'graph' :
                        - There were many changes in 'ReportGraphForm' :
                            - The fields "abscissa_field" & "abscissa_group_by" have been replaced by "abscissa".
                            - These methods have been removed: _filter_abcissa_field(), clean_abscissa_group_by(), _clean_field(), _clean_customfield()
                        - The widget 'AbscissaGroupBySelect' has been removed.
                    - In 'report':
                        - These 'EntityCell' classes have been replaced :
                            - '_EntityCellRelated'  by 'ReportEntityCellRelated'.
                            - '_EntityCellAggregate' by 'ReportEntityCellRegularAggregate'.
                            - '_EntityCellCustomAggregate' by 'ReportEntityCellCustomAggregate'.
                        - These constants have been removed: _RELATED_PREFIX, _REGULAR_AGG_PREFIX, _CUSTOM_AGG_PREFIX.
                        - The method 'ReportExportPreviewFilterForm.get_backend()' now returns a backend instance, not a class anymore.
                - In the model 'AbstractReportGraph', these fields have changed :
                    - "type" has been renamed "abscissa_type".
                    - "abscissa" has been renamed "abscissa_cell_value".
                    - "days" has been replaced by "abscissa_parameter" (the type changed from <int> to <string>). It is not editable anymore.
                    - "ordinate" has been split into 2 fields : ordinate_type & ordinate_cell_key.
                    - "is_count" has been removed (instead the new field 'ordinate_type' contains "count").
                - In 'views', the remaining function-views have been replaced by classes :
                    - 'export.export()' by 'Export'.
                    - 'report.unlink_report()' by 'ReportUnlinking'.
                    - 'report.set_selected()' by 'FieldSelection'.
                    - The constant 'export._PREVIEW_LIMIT_COUNT' has been removed.
                - In the class 'report_aggregation_registry.FieldAggregationRegistry' :
                    - The method 'iter()' has been removed.
                    - The class attribute 'authorized_customfields' has been removed ; use the new method 'is_custom_field_allowed()' instead.
                - The template "reports/forms/widgets/report-hands.html" has been replaced by "reports/forms/widgets/report-hands/widget.html".
                - In JavaScript, these functions have been removed :
                    - creme.reports.toggleDaysField()
                    - creme.reports.toggleDisableOthers()
            * Geolocation :
                - These function-views have been replaced by classes :
                    - 'set_address_info()' by 'AddressInfoSetting'.
                    - 'get_addresses_from_filter()' by 'AddressesInformation'.
                    - 'get_neighbours()' by 'NeighboursInformation'.
                - In JavaScript, 'GoogleMapController' has been reworked (a generic interface 'GeoMapController' for bricks controllers has been added) :
                    - 'GoogleMapController' is now a specific backend that extends 'GeoMapController'.
                    - These classes have been reworked : PersonsBrick, AddressesBrick & PersonsNeighborhoodBrick.
            * Events :
                - In 'views.event' :
                    - The function-view 'set_invitation_status()' has been replaced by the class 'InvitationStatusSetting'.
                    - The function-view 'set_presence_status()' has been replaced by the class 'PresenceStatusSetting'.
                    - The function '_get_status()' has been removed.
                    - The function '_get_event_n_contact()' has been removed.
            * Projects :
                - In 'models' :
                    - The model-field 'AbstractProject.effective_end_date' is not editable any more.
                    - These model-fields of 'AbstractProjectTask' are not null/blank anymore: start, end, duration.
                - The function-view 'views.project.close()' has been replaced by the class 'ProjectClosure'.
            * Polls :
                - The function-view 'views.poll_reply.clean()' has been replaced by the class 'PollReplyCleaning'.
            * Crudity :
                - These properties have been remove (use 'utils.is_sandbox_by_user()' instead) :
                    - backends.models.CrudityBackend.is_sandbox_by_user
                    - bricks.CrudityQuerysetBrick.is_sandbox_by_user
                - These function-views of 'views' have by replaced by classes :
                    - 'actions.delete()' by 'ActionsDeletion'.
                    - 'actions.refresh()' by 'ActionsRefreshing'.
                    - 'actions.validate()' by 'ActionsValidation'.
                    - 'actions.reload_bricks()' by 'ActionsBricksReloading'.
                    - 'history.reload_bricks()' by 'HistoryBricksReloading'.
                - The class-attribute 'backends.models.CrudityBackend.model' is not set to <None> by default anymore.
            * CTI :
                - The remaining function-views have been replaced by classes :
                    - 'reload_callers_brick()' has been replaced by 'CallersBrickReloading'.
                    - 'create_phonecall_as_caller()' has been replaced by 'AsCallerPhoneCallCreation'.
                    - 'add_phonecall()' has been replaced by 'PhoneCallCreation'.
                    - The constant 'views.RESPOND_TO_A_CALL_MODELS' has been removed.
                    - These functions have been removed :
                        - 'abstract_add_phonecall()' & 'abstract_create_phonecall_as_caller()'
                        - '_build_related_phonecall()' & '_create_phonecall()'
            * SMS :
                - The function-view 'views.sending.reload_messages_brick()' has been replaced by the class 'MessageBrickReloading'.
            * Activesync :
                - Its support was dropped with Creme2.0, and is now removed from the codebase.
        # The unused django setting 'JAVASCRIPT_DEBUG' was removed.

    Internal breaking changes :
    ---------------------------
    (they should not cause problem if you have not deeply modified the source code of Creme)

        # In the class 'creme_core.backends._BackendRegistry':
            - The constructor takes an additional argument "base_backend_class".
            - The attribute '_backends' has been renamed '_backend_classes'.
            - The method '_get_backends()' has been renamed '_get_backend_classes()'.
            - The inner-class 'InvalidId' has been removed.
        # In 'creme_core.core' :
            - The method 'function_field.FunctionFieldDecimal._format_decimal()' has been removed.
        # In 'creme_core.forms' :
            - Some rework has been done in 'base' :
                - The class 'HookableForm' has been renamed 'HookableFormMixin'.
                - The order of the parent classes of 'CremeForm' & 'CremeModelForm' has changed.
            - In 'fields.RelationEntityField', the default value of the attribute "allowed_rtypes" has changed (empty queryset now).
        # In 'creme_core.gui' :
            - The attribute 'field_printers._FieldPrintersRegistry._printers' has been renamed '_html_printers'.
        # In 'creme_core.models' :
            - The method 'Relation._build_symmetric_relation()' is deprecated.
            - The attribute 'fields.RealEntityForeignKey.cache_attr' has been removed.
            - The method 'EntityFilterCondition._get_subfilter()' has been removed (unused).
            - The method 'CustomField.get_custom_values_map()' returns now a 'DefaultDict[int, Dict[int, Any]]' (it returned a 'DefaultDict[int, DefaultDict[int, list]]').
        # The default value of 'creme_core.gui.bricks.BricksManager.var_name' has changed ("blocks_manager" -> "bricks_manager").
        # The attribute 'creme_core.registry.CremeRegistry._generic_registry' has been removed.
        # Apps :
            * Creme_config :
                - These functions of 'views.generics_views' have been removed : _get_appconf(), _get_modelconf()
                - In 'forms.fields.CreatorModelChoiceMixin', the initial value of the class attribute "_create_action_url" is <''> (it was <None>).
                - The constant 'forms.button_menu._PREFIX' has been removed.
            * Commercial :
                - The function 'views.strategy._get_strategy_n_orga()' has been removed.
            * Reports :
                - Some imports of "core.graph.XXX" may have been broken since the splitting of this module.
                - The method 'core.report.ReportHand._get_value_single_on_allowed()' raises a 'NotImplementedError' now.
                - The attribute 'core.graph.ReportGraphHand._y_calculator' is now an instance of 'ReportGraphYCalculator'.
            * Crudity :
                - These functions of 'views' have been removed : _build_portal_bricks(), _retrieve_actions_ids()


== Version 2.1 ==

  UPGRADE NOTE :
    - You should create a all new virtual environment based on Python 3.5+
      (eg: "mkvirtualenv -p /usr/bin/python3XX" if you use 'mkvirtualenv')
      and populate it with "pip install -r creme/requirements.txt" of course.
    - If you override INSTALLED_DJANGO_APPS in you local settings, you should replace "django.contrib.contenttypes" by "creme.creme_core.apps.ContentTypesConfig" (see settings.py).
    - Execute the well known commands "migrate", "generatemedia" & "creme_populate".

  Users side :
  ------------
    # The version of Django has been upgraded to 2.2.
    # A field "description" has been added to CremeEntity. Data has been migrated for entities classes which already had this field, of course.
    # The credentials system has been improved :
        - The credentials can now be configured to forbid some actions.
          Eg: if you want a user to see all kinds of entities excepted one, you are not obliged to create all-minus-one credentials lines ; you can just allow all of types of entities & forbid this one.
        - The credentials can now use an EntityFilter.
            - These filters can check: regular-fields (not date ones), custom-field (not date ones), relationships, properties.
            - These filters can be specific to a type on entities ; when there is no specific type
                - Only regular-fields of CremeEntity are available (ie: user & description).
                - Custom-fields are not available.
            - These filters remain related to the credentials, & cannot be selected in list-views for example.
    # In the list-views :
        - The quick-search on numeric (integer/float/decimal) fields (regular & custom) has been improved : complex filter like ">100; <=250" can be used.
        - The selector of HeaderFilter now uses <optgroup> to group views by owner.
        - A description of the filter can be displayed (so you can see the conditions without editing the filter).
    # In the forms :
        - Most of the form for entities have now fields to add Relationships & Properties at creation.
          The setting "FORMS_RELATION_FIELDS" can be set to False to remove these new fields.
        - The inactive users are now in a specific <optgroup> in the "Owner" form-field.
    # In the global search, the searched string is split in words, which can be contained in different fields. Words can be grouped with " (double quote). Double quotes can be searched with \" .
    # The blocks configuration of "Home" can now be specific to a role.
    # The inner-edition in hat-card bricks is now possible.
    # A setting to initialize the field 'is_private' of creation forms for HeaderFilters & EntityFilters has ben added: "FILTERS_INITIAL_PRIVATE".
    # The file "requirements.txt" has been split for different RDBMS.
    # A command to create staff users has been added : "creme_createstaffuser".
      Previously you had to modify manually (in DB or with Python code) the field 'is_staff'.
    # Apps :
        * Creme_config :
            - The deletion of instance has been improved.
              The removing of an instance (of a registered model) uses now a form which proposes a replacement value for the different kind of entities using it.
              The replacement is then processed by a job.
            - In the block to configure Users, inactive users can be hidden (from the block menu in its header).
        * Persons :
            - A view to create "suspect/prospects/customer" has been added.
            - A new quick-search field for Address has been added. It searches in all (not-hidden) fields of the related addresses.
            - A setting to hide the entry "My customers / prospects / suspects" in the main menu has been added : "PERSONS_MENU_CUSTOMERS_ENABLED".
        * Activities :
            - The calendar view has been improved :
                - Selected Calendars are kept in session.
                - Users are ordered alphabetically.
                - Inactive & staff users are excluded from the users list.
            - A default public calendar is now created when a user (not a staff one) is created.
              The old behaviour can be set with "ACTIVITIES_DEFAULT_CALENDAR_IS_PUBLIC = None" in your file '{local,project}_settings.py'.
        * Billing :
            - A field has been added in 'Invoice' : number of buyer's order. It's required by the french legislation.
            - The buttons (in button bar) to create related Quote/Invoice/... redirects now to the new entity's detail-view.
              The old behaviour (ie: staying on the Contact/Organisaton's detail-view) can be restored in the billing's configuration portal.
        * Opportunities :
            - The statuses of the billing documents are now displayed in the bricks of the detail-view.
            - Two SettingKeys which add constraints on selected billing documents to link have been added : same emitter & same target than the Opportunity.
            - The hat-card brick now only displays a maximum of 5 related Contacts.
        * Reports :
            - The chart's type and the order of a ReportGraph are saved when changed from the preview on a block.
            - The description of the filter used by a Report can be seen in the list-view & the detail-view.
        * Assistants :
            - The FunctionFields have now the quick-search feature (to search related Alerts/ToDos/Memos from the list-views).
        * Graphs :
            - The module "pygraphviz" has been removed from the main 'requirements.txt'. The "download PNG" button is displayed only if the package is installed.
        * Events :
            - The buttons of the related contacts list-view have been improved.
                - A button "Back to the event" has been added.
                - Some buttons have been removed :
                    - Mass import (imported contacts won't be linked to the event automatically which is confusing).
                    - Batch process (process contacts won't be filtered to be linked to the event).
                    - Export header (because it's mostly useful for mass import).

  Developers side :
  -----------------
      In this version, there are 3 main changes for developers :
        - The version of Django is now "2.2".
          You should probably read the following releases notes for Django versions :
            - https://docs.djangoproject.com/en/2.2/releases/2.0/
            - https://docs.djangoproject.com/en/2.2/releases/2.1/
            - https://docs.djangoproject.com/en/2.2/releases/2.2/
        - The work on class-based views continues ; lots ot new function-views have been converted, but the biggest
          changes happened for list-views.
          The compatibility with function-views is totally broken, but migrating the code of your own list-views should be easy in most cases.
          This new class-based list-view is more stronger ; for example you can now easily customise the buttons & the actions.
        - The way the registration in 'creme_config' is done has heavily changed.
          Now a method in the files "apps.py" is used instead of the files "creme_config_register.py".
          Lot of things can now be configured about a model :
            - The forms for creation & edition can now be different ; the deletion form can be customised now.
            - The creation, edition & deletion URLs can be customised.
            - The creation, edition & deletion can be disabled.
            - The Brick used to display its instances can be customised.

      Other important changes:
        - The code related to EntityFilters have been heavily reworked (but it won't be a problem if you did not modified it) :
            - A lot of code from 'creme_core.models.EntityFilterCondition' has moved to a new package : 'creme_core.core.entity_filter'.
            - The code of the forms has notably been split (fields/widgets/forms).
            - A new registry has been created to register handlers (which contain the behaviour code which was in 'EntityFilterCondition') & operands (new name for 'EntityFilterVariable').
        -  The code of the search in list-views has been massively reworked.
           The old code was monolithic ; the new one is more extensible & customisable : it is separated in form/fields/widgets (like regular forms, plus some specialization).
           A tree-registry has been created in order to easily customise the search-fields used for each column of the list-views
           (see 'AppConfig.register_search_fields()' & 'creme_core.gui.listview.search.search_field_registry').

    Non breaking changes :
    ----------------------
        # Deprecations :
            - In 'creme_core.models':
                - The method 'CremePropertyType.get_compatible_ones()' is deprecated ; use 'CremePropertyType.objects.compatible()' instead.
                - The method 'Relation.get_compatible_ones()' is deprecated ; use 'RelationType.objects.compatible()' instead.
                - The method 'Relation.filter_in()' is deprecated.
                - A custom object manager has been added to 'bricks.BrickDetailviewLocation' :
                    - The method 'config_exists()' is deprecated ; use '.objects.filter_for_model()' instead.
                    - The method 'create_if_needed()' is deprecated ; use '.objects.create_if_needed() instead.
                    - The method 'create_4_model_brick()' is deprecated ; use '.objects.create_for_model_brick()' instead.
                    - The method 'id_is_4_model()' is deprecated.
                - A custom object manager has been added to 'bricks.BrickState' :
                    - The method 'get_for_brick_id()' is deprecated ; use '.objects.get_for_brick_id()' instead.
                    - The method 'get_for_brick_ids()' is deprecated ; use '.objects.get_for_brick_ids()' instead.
                - The method 'bricks.RelationBrickItem.create()' is deprecated ; use '.objects.create_if_needed()' instead.
            - In 'creme_core.forms' :
                - The class 'base.CremeModelWithUserForm' is deprecated ; use 'CremeModelForm' instead.
                  BEWARE : if you have a "Meta.fields" in you form, you may have to add "user".
                - The method 'relation._RelationsCreateForm._hash_relation()' is deprecated.
            - In 'creme_core.views' :
                - In 'relation', these function-views are deprecated : 'delete_all()' & 'json_entity_rtypes()'.
                  The constant 'JSON_PREDICATE_FIELDS' is deprecated too.
                - The mixin class 'generic.wizard.PopupWizardMixin' is deprecated ; use a class inheriting the base class 'generic.wizard.AbstractWizardView' instead.
            - The method 'creme_core.enumerators.EntityFilterEnumerator.efilter_as_dict()' is deprecated ; use 'instance_as_dict()' instead.
            - The function 'creme_core.utils.queries.get_q_from_dict()' is deprecated ; use 'django.db.models.query.Q(my_dict)' instead.
            - The templatetags "{% get_export_backends %}" & "{% get_import_backends %}" (from the lib "creme_core_tags") are deprecated.
            - These template files in "creme_core/generics/blockform/" are deprecated :
                - add_wizard.html (use "add-wizard.html" instead).
                - add_wizard_popup.html (use "add-wizard-popup.html" instead).
                - edit_wizard_popup.html (use "edit-wizard-popup.html" instead).
                - wizard_popup.html (use "base-wizard.html" instead).
            - In JavaScript :
                - The function 'creme.utils.appendInUrl()' is deprecated; use the function 'creme.utils.goTo()' or the class 'creme.ajax.URL' instead.
                - The method 'creme.lv_widget.selectedLines()' is now deprecated; Use "$(list).list_view('selectedRows')" instead.
            - Apps :
                * Creme_config :
                    - The use of a module "creme_config_register" in an app is deprecated ; add a method "register_creme_config()" in the AppConfig instead.
                    - The function-view 'views.creme_property_type.delete()' (URL named "creme_config__delete_ptype") is deprecated ;
                      use the class 'creme_core.views.creme_property.PropertyTypeDeletion' (URL named "creme_core__delete_ptype") instead.
                * Persons :
                    - The method 'models.AbstractOrganisation.get_all_managed_by_creme()' is deprecated ; use '.objects.filter_managed_by_creme()' instead.
                * Activities :
                    - The method 'models.AbstractActivity.is_auto_orga_subject_enabled()' is deprecated ; use the function 'utils.is_auto_orga_subject_enabled()' instead.
                    - The method 'models.AbstractActivity.get_title_for_calendar()' is deprecated ; use the attribute 'title' instead.
                    - Some class-methods of 'models.AbstractActivity' have ben moved to a new manager :
                        - The method 'get_future_linked()' is deprecated ; use '.objects.future_linked()' instead.
                        - The method 'get_future_linked_for_orga()' is deprecated ; use '.objects.future_linked_to_organisation()' instead.
                        - The method 'get_past_linked()' is deprecated ; use '.objects.past_linked()' instead.
                        - The method 'get_past_linked_for_orga()' is deprecated ; use '.objects.past_linked_to_organisation()' instead.
                    - Several static-methods of 'models.Calendar' are deprecated :
                        - get_user_calendars().
                        - get_user_default_calendar() (use '.objects.get_default_calendar()' instead).
                        - new_color() (use '.objects.new_color()' instead).
                        - _create_default_calendar()' (use '.objects.create_default_calendar()' instead).
                * Commercial :
                    - The template filter "|has_quickform" (from the lib "commercial_tags") is deprecated ; use "|ctype_has_quickform" (lib "creme_ctype") instead.
                * Billing :
                    - 'constants.DISPLAY_PAYMENT_INFO_ONLY_CREME_ORGA' is deprecated ; use 'billing.settings_keys.payment_info_key.id' instead.
                    - These templates are deprecated :
                        - billing/frags/button_convert2invoice.html
                        - billing/frags/button_convert2order.html
                    - The JavaScript function 'creme.billing.generateInvoiceNumber()' is deprecated; use the action named "billing-hatmenubar-invoice-number" instead.
                * Opportunities :
                    - 'constants.SETTING_USE_CURRENT_QUOTE' is deprecated.
                    - These methods of 'models.AbstractOpportunity' are deprecated: 'get_contacts()', 'get_products()', 'get_responsibles()', 'get_services()'.
                * Reports :
                    - The function 'views.graph.cast_order()' is deprecated ; use the class 'creme_core.utils.meta.Order' instead.
                    - The JavaScript function 'creme.reports.exportReport()' is deprecated.
                * Mobile :
                    - The template filter "|employers" is deprecated ; use the method 'AbstractContact.get_employers()' (so "my_contact.get_employers" in the template) instead.
                * Crudity :
                    - The filter "|truncate" (from the lib "crudity_tags") is deprecated ; use "|truncatewords" and "|truncatewords" instead.
                * Events :
                    - The template file "creme/events/templates/events/lv_button_link_contacts.html" is deprecated.
        # A string permission has been added : 'creme_core.auth.SUPERUSER_PERM'.
        # In 'creme_core.models' :
            - Two new values for the field attribute "on_delete" are available in 'creme_core.models.deletion' : 'CREME_REPLACE' & 'CREME_REPLACE_NULL'.
              They act respectively like regular PROTECT & SET_NULL, but they indicate to 'creme_config' that a
              replacement value can be proposed to the user when an instance is deleted.
            - The model-fields 'fields.CTypeForeignKey' & 'fields.CTypeOneToOneField' accept now a model class directly.
            - A new method 'get_4_keys()' ahs been added in the manager of 'SettingValue' to retrieve several values at once.
            - The model 'BrickState' can now store extra data in a JSON field to manage specific states.
            - It's now possible to check already retrieved entities with an EntityFilter (see the new method 'accept()').
        # In 'creme_core.views' :
            - Generic/base deletion views have been added.
            - The list-views (& so their popup version) have now a <no-selection> mode.
        # In 'creme_core.forms' :
            - Two new form-fields have been added : 'fields.EnhancedMultipleChoiceField' & 'fields.EnhancedModelMultipleChoiceField'.
              They are Multiple[model]ChoiceField which allow to force some values & add help text to each choice.
            - The label of the creation button in selectors can now be customised.
        # It's now possible to clean a 'FileField' in inner-edition. 'FileFields' are always excluded from choice of field in the bulk-update form.
        # A shortcut function function has been added : 'creme_core.shortcuts.get_bulk_or_404()'.
        # A decorator for the per-request cache has been added: 'creme_core.global_info.cached_per_request'.
        # In 'creme_core.core' :
            - A method 'paginator.FlowPaginator.get_page()' has been added.
            - A new system for ordering query has been introduced : 'creme_core.core.sorter'.
            - You can check if your DB server is case sensitive with this new function : 'db.is_db_case_sensitive()'.
            - The calls to 'enumerable._EnumerableRegistry.register_*()' can now be chained.
        # A new assertion has been added to help the unit testing of forms : 'assertFormInstanceErrors()'.
        # In JavaScript, a method 'creme.component.Action.stack()', that returns previous actions chained by 'after()', has been added.

    Breaking changes :
    ------------------
        # Deprecated stuffs which have been removed :
            - In 'creme_core.models' :
                - The class 'entity.EntityAction' has been removed.
                - In 'entity.CremeEntity', these methods have been removed : 'allowed_unicode()' & 'get_entity_m2m_summary()'.
                - The function 'lock.mutex_autolock()' has been removed.
            - In 'creme_core.core' :
                - The class 'function_field.FunctionFieldsManager' has been removed.
                - The method 'reminder.ReminderRegistry.itervalues()' has been removed.
            - In 'creme_core.templatetags.creme_core_tags' :
                - These filters have been removed: "|get_tag", "|xrange", "|allowed_unicode".
                - These tags have been removed: "{% get_field_verbose_name %}", "{% get_viewable_fields %}".
            - In 'creme_core.views' :
                - The argument "q_filter" of the list-view do not manage the old "dictionary" format (use 'QSerializer' instead).
                - In 'generic', these functions have been removed :
                    - add.add_entity(), add.add_to_entity(), add.add_model_with_popup().
                    - edit.edit_entity(), edit.edit_related_to_entity(), edit.edit_model_with_popup().
                    - popup.inner_popup(), portal.app_portal()
                    - 'listview._clean_value()'.
                - The function 'enumerable.json_list_enumerable()' has been removed.
                - The function 'quick_forms.add()' has been removed.
            - In 'creme_core.utils' :
                - The function 'chunktools.iter_splitlinechunks()' has been removed.
                - The function 'db.reorder_instances()' has been removed.
                - In the function 'queries.get_q_from_dict()', the "~" feature has been removed.
            - In the class 'creme_core.backends._BackendRegistry' these methods have been removed : 'iterbackends()' & 'iterkeys()'.
            - The signal 'creme_core.signals.form_post_save' has been removed.
            - The method 'creme_core.gui.menu.CreationFormsItem.verbose_unicode()' has been removed.
            - The method 'creme_core.forms.creme_property._AddPropertiesForm._create_properties()' has been removed.
            - 'creme_core.constants.MODELBLOCK_ID' has been removed.
            - These template files of "creme/creme_core/templates/creme_core/" have been removed :
                - generics/inner_popup.html
                - generics/portal.html
                - generics/blockform/add_popup.html, generics/blockform/edit_popup.html, generics/blockform/link_popup.html.
                - generics/blockformset/add_popup.html, generics/blockformset/base.html.
                - generics/form/add_innerpopup.html, generics/form/edit_innerpopup.html.
                - templatetags/quickforms_panel.html
            - In JavaScript, the function 'creme.relations.addRelationTo()' has been removed.
            - Apps :
                * Persons :
                    - In 'forms.contact.RelatedContactForm' :
                        - The argument "linked_orga" is mandatory.
                        - The attribute "rtype" can not be set with the 'initial' data any more.
                    - The deprecated function-views have been removed in :
                        - views.address
                        - views.contact
                        - views.organisation
                * Documents :
                    - The function-views have been removed.
                * Activities :
                    - 'constants.DISPLAY_REVIEW_ACTIVITIES_BLOCKS' has been removed.
                    - These methods of 'models.AbstractActivity' have been removed :
                        - _get_linked_for_ctypes_aux(), get_future_linked_for_ctypes(), get_past_linked_for_ctypes()
                        - display_review()
                    - The deprecated function-views of 'views.activity' have been removed.
                    - In 'views.bricks' :
                        - The function-view 'delete_participant()' has been replaced by the class 'ParticipantRemoving'.
                        - The function-view 'unlink_activity()' has been replaced by the class 'ActivityUnlinking'.
                    - The JavaScript function 'creme.activities.exportAsICal()' have been removed.
                    - These templates in "creme/activities/templates/activities/" : "add_popup_activity_form.html", "view_activity_popup.html" & "frags/ical_list_view_button.html".
                * Products :
                    - The deprecated function-views have been removed in :
                        - views.product
                        - views.service
                * Billing :
                    - 'constants.CURRENCY' has been removed.
                    - The method 'registry.AlgoRegistry.itervalues()' has been removed.
                    - In 'models.AbstractTemplateBase', the method 'get_verbose_status()' & the property 'verbose_status' have been removed.
                    - The deprecated function-views have been removed in :
                        - views.credit_note
                        - views.invoice
                        - views.line
                        - views.quote
                        - views.sales_order
                        - views.templatebase
                    - The module 'views.workflow' has been removed.
                    - The JavaScript function 'creme.billing.exportAs()' has been removed.
                * Opportunities :
                    - These classes in 'forms.opportunity' have been removed : 'OpportunityEditForm' & 'OpportunityCreateForm'.
                    - The method 'models.AbstractOpportunity.get_weighted_sales()' has been removed.
                    - The function-views have been removed in 'views.opportunity'.
                * Commercial :
                    - The class 'forms.salesman.SalesManCreateForm' has been removed.
                    - The method 'models.CommercialApproach.get_approaches_for_ctypes()' has been removed.
                    - The deprecated function-views have been removed in :
                        - views.act
                        - views.salesman
                        - views.strategy
                * Reports :
                    - In 'bricks.ReportGraphBrick', the variable "instance_block_id" is not injected in the context any more.
                    - The method 'report_aggregation_registry.FieldAggregationRegistry.itervalues()' has been removed.
                    - In 'models.graph.AbstractReportGraph' :
                        - these methods have ben removed: 'get_fetcher_from_instance_block()' & 'create_instance_block_config_item()'.
                        - The nested class 'InstanceBlockConfigItemError' has been removed.
                    - The deprecated function-views have been removed in :
                        - views.graph
                        - views.report
                    - The template file "creme/reports/templates/reports/frags/report_export_filter.html" has been removed.
                * Assistants :
                    - The methods 'models.Action.get_actions_*()' have been removed.
                    - The methods 'models.Alert.get_alerts*()' have been removed.
                    - The methods 'models.Memo.get_memos*()' have been removed.
                    - The methods 'models.ToDo.get_todos*()' have been removed.
                    - The methods 'models.UserMessage.get_messages*()' have been removed.
                * Emails :
                    - These classes in 'forms.mail' have been removed : 'TemplateSelectionForm' & 'EntityEmailFromTemplateForm'.
                    - The deprecated function-views have been removed in :
                        - views.campaign
                        - views.mail
                        - views.mailing_list
                        - views.sending
                        - views.template
                    - These templates in "creme/emails/templates/emails": "popup_sending.html", "view_email.html" & "view_entity_mail_popup.html".
                - Tickets :
                    - The method 'models.AbstractTicket.get_resolving_duration()' has been removed.
                    - The function-views have been removed.
                * Geolocation :
                    - The function 'utils.get_setting()' has been removed.
                * Mobile :
                    - The deprecated function-views have been removed.
                * Events :
                    - In 'views.event', the deprecated function-views have been removed.
                * Graphs :
                    - In 'views.graph', the deprecated function-views have been removed.
                * Projects :
                    - The deprecated function-views have been removed in :
                        - views.project
                        - views.task
                * Polls :
                    - The deprecated function-views have been removed in :
                        - views.campaign
                        - views.poll_form
                        - views.poll_reply
                * Recurrents :
                    - The function-views have been removed.
                * CTI :
                    - The deprecated function-views have been removed ('abstract_add_*()' & 'add_*()').
                * SMS :
                    - The function-views have been removed in :
                        - views.campaign
                        - views.messaging_list
                        - views.template
                    - The template file "creme/sms/templates/sms/popup_sending.html" has been removed.
        # About the upgrade to 'Django 2.0' :
            - In form fields constructors, positional arguments must be replaced by keyword arguments.
            - The imports <from django.conf.urls import url> should be replaced by <from django.urls import re_path>.
            - In custom model fields, the argument "context" of method 'from_db_value()' should be removed.
            - The internal cache management of 'ForeignKey' has slightly changed ; a internal '_state' attribute has been added in instances.
        # About the upgrade to 'Django 2.1' :
            - The function 'django.template.defaultfilters.linebreaks()' generates "<br>" instead of "<br />".
        # About the upgrade to 'Django 2.2'.
            - The function 'django.utils.http.urlencode()' now raises TypeError if None is passed as a value to encode.
            - When performing queries like '.annotate().values()' (GROUP BY), an explicit order_by() should be made.
        # If you have coded your own entity class with a "description" field, you should migrate it to store your data in CremeEntity table.
        # If you have written a creation form/view which creates some (not internal) Relations,
          it can now fail because of duplicated Relationships if you don't use the safe creation methods ('Relation.objects.safe_create()' & 'Relation.objects.safe_multi_save()').
            - In forms, you should use the new method 'CremeEntityForm._get_relations_to_create()'.
            - In views, use the argument "forced_relations" in 'get_form_kwargs()' instead of creating the Relation in the view.
        # The "development" mode of the media generator has been removed. It was broken & so nobody used it.
            - These settings have been removed from 'settings.py' : "MEDIA_DEV_MODE" & "DEV_MEDIA_URL".
            - The middleware "mediagenerator.middleware.MediaMiddleware" is not available anymore.
        # The method 'creme_core.auth.entity_credentials.EntityCredentials.filter_entities()' can now raise an exception ('EntityCredentials.FilteringError')
          if the credentials use an EntityFilter on specific fields (so a 'QuerySet' on 'CremeEntity' is not possible).
        # In 'creme_core.models' :
            - The method 'base.CremeModel._delete_m2m()' has been removed.
            - The argument of 'relation.RelationType.is_compatible()' is positional only now.
            - In 'entity_filter.EntityFilterCondition' :
                - The constructor expects the new argument "model" to be given if you don't pass the argument "filter".
                - The nested class 'ValueError' has been removed.
                - These attributes have been removed :
                    - EFC_SUBFILTER, EFC_FIELD & other type IDs (see new module 'creme_core.core.entity_filter.condition_handler').
                    - EQUALS, IEQUALS & other operator IDs (see new module 'creme_core.core.entity_filter.operators').
                    - _subfilter_cache
                    - _GET_Q_FUNCS, _GET_DISTINCT_FUNCS
                    - _OPERATOR_MAP, _FIELDTYPES_ALL, _FIELDTYPES_ORDERABLE, _FIELDTYPES_RELATED, _FIELDTYPES_NULLABLE.
                - These methods have been removed :
                    - build_4_customfield() (use 'creme_core.core.entity_filter.condition_handler.CustomFieldConditionHandler.build_condition()' instead).
                    - build_4_datecustomfield() (use 'creme_core.core.entity_filter.condition_handler.DateCustomFieldConditionHandler.build_condition()' instead).
                    - build_4_field() (use 'creme_core.core.entity_filter.condition_handler.RegularFieldConditionHandler.build_condition()' instead).
                    - build_4_date() (use 'creme_core.core.entity_filter.condition_handler.DateRegularFieldConditionHandler.build_condition()' instead).
                    - build_4_property() (use 'creme_core.core.entity_filter.condition_handler.PropertyConditionHandler.build_condition()' instead).
                    - build_4_relation() (use 'creme_core.core.entity_filter.condition_handler.RelationConditionHandler.build_condition()' instead).
                    - build_4_relation_subfilter() (use 'creme_core.core.entity_filter.condition_handler.RelationSubFilterConditionHandler.build_condition()' instead).
                    - build_4_subfilter() (use 'creme_core.core.entity_filter.condition_handler.SubFilterConditionHandler.build_condition()' instead).
                    - _get_q_*(), _load_daterange(), _build_daterange_dict().
            - In 'entity_filter.EntityFilter', these methods have been removed : 'resolve_variable()' & 'get_variable()'.
            - In 'entity_filter', these classes have been removed :
                - EntityFilterVariable & _CurrentUserVariable (see new module 'creme_core.core.entity_filter.operands').
                - _ConditionOperator, _IsEmptyOperator, _RangeOperator (see new module 'creme_core.core.entity_filter.operators').
        # In 'creme_core.core' :
            - The class 'entity_cell.EntityCell' has been reworked (some parts are now useless) :
                - These attributes of have been removed : 'editable', 'filter_string', 'has_a_filter', 'sortable'.
                - The class attribute 'EntityCellCustomField._CF_PATTERNS' has been removed.
            - In 'function_field.FunctionField' :
                - The method 'populate_entities()' is now a regular method (it was a 'classmethod').
                - The class attributes "has_filter" & "choices" have been removed.
                - The class method "filter_in_result()" has been removed ; use the new class attribute "search_field_class" instead.
        # In 'creme_core.views' :
            - In 'generic.listview' :
                - The constants 'MODE_SINGLE_SELECTION' & 'MODE_MULTIPLE_SELECTION' has been removed (see the enum 'SelectionMode').
                - The function-views 'list_view()' has been replaced by the class 'EntitiesList'.
                - The function-views 'list_view_popup()' has been replaced by the class 'BaseEntitiesListPopup'.
                - These functions have been removed : 'list_view_content()', '_build_entities_page()', '_build_entity_queryset()', '_build_extrafilter()', '_select_entityfilter()', '_build_rowscount()'.
                - The GET/POST argument "sort_field" has been renamed "sort_key".
                - The GET/POST argument "sort_order" value should be "ASC"/"DESC" (instead of ""/"-") ("" -- for ASC -- still works by the way).
                - The GET/POST argument "o2m" has been renamed "mode" & accept only "single", "multiple" & "none" values.
            - These views of 'entity' are now class-based :
                - 'clone()' has been replaced by the class 'Clone'.
                - 'delete_related_to_entity()' has been replaced by the class 'RelatedToEntityDeletion'.
                - 'list_view_popup()' has been replaced by the class 'EntitiesListPopup'.
                - 'search_and_view()' has been replaced by the class 'SearchAndView'.
                - 'select_entity_for_merge()' has been replaced by the class 'EntitiesToMergeSelection'.
                - 'merge()' has been replaced by the class 'Merge'.
            - These views of 'creme_property' are now class-based :
                - 'delete_from_type()' has been replaced by the class 'PropertyFromFieldsDeletion'.
                - 'delete_type()' has been replaced by the class 'PropertyTypeDeletion'.
            - The function-view 'bricks.set_state()' has been replaced by the class 'BrickStateSetting'.
            - These views of 'entity_filter' are now class-based :
                - 'delete()' has been replaced by the class 'EntityFilterDeletion'.
                - 'get_for_ctype()' has been replaced by the class 'EntityFilterChoices'.
            - These views of 'header_filter' are now class-based :
                - 'delete()' has been replaced by the class 'HeaderFilterDeletion'.
                - 'get_for_ctype()' has been replaced by the class 'HeaderFilterChoices'.
            - The function-view 'job.delete()' has been replaced by the class 'JobDeletion'.
            - These views of 'relation' are now class-based :
                - 'select_relations_objects()' has been replaced by the class 'RelationsObjectsSelectionPopup'.
                - 'delete()' has been replaced by the class 'RelationDeletion'.
                - 'delete_similar()' has been replaced by the class 'RelationFromFieldsDeletion'.
            - The function-view 'search.light_search()' has been replaced by the class 'LightSearch'.
            - In 'enumerable' :
                - The function-view 'json_list_enumerable_custom()' has been replaced by the class 'CustomFieldEnumsView'.
                - The function-view 'json_list_userfilter()' has been replaced by the class 'creme_core.views.entity_filter.UserChoicesView'.
                - The method 'ChoicesView.get_model()' has been removed.
                - The URL named "creme_core__efilter_user_choices" has changed (no change if you used 'reverse()' of course).
            - The view which exports the data from list-views as CSV/XLS has changed :
                - The function-view 'list_view_export.dl_listview()' has been replaced by the class-based view 'mass_export.MassExport'.
                - The URL "creme_core/list_view/download" (named "creme_core__dl_listview") has been replaced by the URL "creme_core/mass_export" (named "creme_core__mass_export").
                  Only GET arguments are used for filter, search ...etc (ie: stored state is not used any more) ; the GET argument "list_url" is not used anymore.
        # In 'creme_core.gui' :
            - The function 'field_printers.print_integer()' returns always a string now (it could return an integer).
            - The method 'gui.bricks._BrickRegistry.register_4_model()' does not accept brick class with <id_ != constants.MODELBRICK_ID> (tips: inherit the class 'EntityBrick').
            - In the class 'listview.ListViewState' :
                - The attribute "sort_field" has been renamed "sort_cell_key".
                - These methods have been removed: 'set_sort()', '_get_default_sort()', '_get_sortfield()', '_get_regular_sortfield()'.
                - The internal class '_OrderedField' has been removed.
        # In 'creme_core.forms' :
            - The class 'base.CremeEntityForm' injected the "help_text" in widgets ; it's an old un-documented behaviour which has been removed (because it seems useless now).
            - In 'entity_filter', the forms now use a registry to know available handlers & operators.
                - The fields '*_conditions' have been removed & replaced by fields added in the constructor (with new names).
                - The constructor has a new mandatory argument: "efilter_registry".
                - The fields & widgets have now an attribute "efilter_registry" which should be filled to get a satisfactory behaviour (eg: classical operators are proposed).
            - In 'header_filter' :
                - The class 'FieldConditionWidget' has been renamed 'FieldConditionSelector'.
                - The class 'CustomFieldConditionWidget' has been renamed 'CustomFieldsConditionsWidget'.
        # In 'creme_core.utils.date_period.SimpleValueDatePeriod' (& child classes), the method '_ungettext()' has benn renamed '_ngettext()'.
        # In 'creme_core.templatetags' :
            - The template-filter "|isiterable" (from "creme_core_tags") has been renamed "|is_iterable".
            - In the library "creme_listview" :
                - The tag "{% get_listview_entity_filters %}" has been replaced by "{% listview_entity_filters %}" (the related template file has changed too).
                - The tag "{% get_listview_headerfilters %}" has been replaced by "{% listview_header_filters %}" (the related template file has changed too).
                - The tag "{% get_listview_columns_header %}" has been removed (and the related template file too).
            - These template-tags take only keyword-arguments now :
                - From the lib "creme_history" : "{% history_summary %}".
                - From the lib "creme_listview" :
                    - {% listview_entity_actions %}
                    - {% listview_header_actions %}
                    - {% listview_header_colspan %}
                    - {% listview_td_action_for_cell %}
                From the lib "creme_query" : "{% query_entities_count %}".
                From the lib "creme_search" : "{% search_form %}".
        # In 'creme_core.templates' :
            - These template files have been removed :
                - creme_core/generics/list_entities.html
                - creme_core/frags/list_view.html
                - creme_core/frags/list_view_content.html (see "creme_core/listview/content.html")
                - "creme_core/forms/widgets/efilter-cfield-conditions.html" has been replaced by "creme_core/forms/widgets/efilter-conditions-list.html".
            - In the template "creme_core/generics/blockform/base.html", the "persist" inputs have been removed.
            - The structure of several pages has changed :
                - In "creme_core/base.html", the node '<div id="sub_content">' has been removed.
                - In "creme_core/detailview.html", the node '<div class="detailview">' has been removed.
                - In "creme_core/my_page.html", the node '<div class="my_page">' has been removed.
                - In "creme_config/portal.html", the node '<div class="portal ...">' has been removed.
        # In JavaScript :
            - The signature of 'creme.utils.goTo()' has changed ; the argument are now (url, data, target) instead of (url, target).
            - The class 'creme.ajax.Query' now sends an "error" event instead of a "cancel" one when an empty URL is given.
            - The actions of 'creme.widget.ActionList' have been renamed :
                - 'creme.widget.ActionButton' became 'creme.widget.SelectorAction'.
                - 'creme.widget.ResetActionButton' became 'creme.widget.ResetSelectorAction'.
                - 'creme.widget.CreateActionButton' became 'creme.widget.CreateSelectorAction'.
            - The constructor of 'creme.search.SearchBox' has been completely reworked ;
              'creme.search.SearchBox(<element query string>, <search url>, <advanced search url>)' is replaced by 'creme.search.SearchBox({searchUrl: <search url>, advancedSearchUrl: <advanced search url>).bind(<element>)'
            - The main menu controller has been reworked ; theses functions has been removed 'creme.menu.bindEvents', 'creme.menu.openQuickForm' & 'creme.menu.openCreateAnyDialog'.
            - There are several changes in 'creme.component.Action' :
                - In the method 'Action.after()', the arguments "done" of an action are given to the following one only if the option "passArgs" is <true>.
                - The "source" action is no longer given as first 'Action.start()' argument to the following action.
            - 'creme.entity_cell.EntityCellsWidget(<element_id>, <samples JSON>)' is replaced by 'creme.entity_cell.EntityCellsWidget({samples: <samples dict>}).bind(<element>)'
            - In 'creme.jobs', the functions 'decorateJobStatus()' & 'checkJobManager()' have been removed ; use components '*JobsMonitor' instead.
            - In 'list_view.core' :
                - "list_view('options', <...>)" no longer exists and is replaced by "list_view('prop', <...>)".
                - These methods have been removed :
                    - The method 'countEntities()' (renamed to 'selectedRowsCount()').
                    - 'getSelectedEntities()' & 'getSelectedEntitiesAsArray()' (use 'selectedRows()' instead).
                    - 'getKdSubmit()' & 'setKdSubmit()'
                    - 'setSubmit' & 'getSubmit' (see new method 'submitState()').
                    - 'serializeMe()' (renamed to 'state()').
                    - 'setReloadUrl()' & 'getReloadUrl()' (use "list_view('prop', 'reloadUrl', [<url>])" ).
                    - 'isLoading()' (use "list_view('prop', 'isLoading')" ).
                    - 'getActionBuilders()' (use "list_view('prop', 'actionBuilders', [<builders>])" ).
                - These options have been removed :
                    - "o2m" (renamed to "multiple").
                    - "reload_url" (renamed to "reloadUrl").
                    - "selected_rows", "selectable_class", "selected_class", "checkbox_selector", "all_boxes_selector" & "entity_separator".
                    - "kd_submitHandler".
                    - "beforeSubmit", "afterSubmit" & "submitHandler".
                    - "user_page" & "id_container".
            - In 'creme.lv_widget' :
                - 'creme.lv_widget.initialize()' has moved to 'creme.lv_widget.ListViewLauncher._initController'.
                - 'creme.lv_widget.listViewAction' has been replaced by 'creme.lv_widget.ListViewDialogAction'.
                - Theses function have been removed : 'deleteFilter()', 'findList()' & 'handleSort()'.
            - In 'creme.utils', these old inner-popup functions have been removed :
                - innerPopupUUID()
                - showInnerPopup()
                - reloadDialog()
                - innerPopupFormAction()
                - closeDialog()
                - handleDialogSubmit()
        # The class 'creme_core.tests.views.base.CSVImportBaseTestCaseMixin' has been renamed 'MassImportBaseTestCaseMixin'.
        # Apps :
            * Creme_config :
                - in 'urls' :
                    - The URL "creme_config__edit_home_bricks" takes now an argument.
                    - The URL "creme_config__delete_home_brick" has a different behaviour ; the argument "id" has been replaced by the argument "role".
                    - The URL "creme_config__delete_instance" has changed ; it takes an argument "object_id", & returns a form.
                - In 'creme_config.views' :
                    - Almost all function-views have been replaced by class-based views.
                    - All the wizard-views now inherit 'creme_core.views.generic.wizard.CremeWizardView' ;
                      so the attribute "wizard_title" became "title", & "permission" became "permissions".
                    - The nested class 'views.bricks.RelationCTypeBrickWizard._FieldsStep' has been removed.
                    - The nested class 'views.fields_config.FieldsConfigWizard._ConfigStep' has been removed.
                    - In 'views.user_role' :
                        - The class 'CredentialsAdding' has been replaced by 'CredentialsAddingWizard'.
                        - The class 'CredentialsEdition' has been replaced by 'CredentialsEditionWizard'.
                        - The nested classes 'RoleCreationWizard._CredentialsStep' & 'RoleEditionWizard._ExportableCTypesStep' have been removed.
                - In 'forms.user_role' :
                    - The function 'forms.user_role.EmptyMultipleChoiceField()' has been removed.
                    - Theses classes have been removed : 'CredentialsGeneralStep', 'UserRoleCredentialsStep' & 'AddCredentialsForm'.
                    - The method '_UserRoleWizardFormStep.partial_save()' has been removed.
                - The class 'forms.bricks.BrickHomeLocationsForm' has been removed.
                - In 'bricks' :
                    - Many changes in the class 'BrickHomeLocationsBrick' & its template.
                    - In 'GenericModelBrick', the variable "model_name" is not injected in the context anymore.
                - The template-filter "|is_custom" has been renamed "|config_is_custom".
            * Persons :
                - The method 'AbstractContact.get_employers()' now returns Organisations managed by the Contact too, and excludes deleted Organisations.
                - The templatetag "{% persons_contact_first_employer %}" now excludes deleted Organisations.
                - In the form 'forms.contact.RelatedContactForm', the fields "orga_overview" & "relation" have been removed.
            * Documents :
                - The template "documents/frags/previous.html" has been replaced by "documents/lv-button-previous.html".
            * Activities :
                - The function-view 'views.activity.get_types()' has been replaced by the class 'TypesChoices'.
                - The function-view 'views.calendar.delete_user_calendar()' has been replaced by the class 'CalendarDeletion'.
                - These function-views in 'views.calendar' have been removed :
                    - update_activity_date() (use the class 'ActivityDatesSetting' instead).
                    - user_calendar() (use the class 'CalendarView' instead -- beware, the template context has changed).
                    - get_users_activities() (use the class 'ActivitiesData' instead -- beware, it's now a GET view & the JSON has slightly changed).
                - 'constants.MAX_ELEMENT_SEARCH' has been removed ; use these attributes of 'CalendarView' instead : 'calendars_search_threshold' & 'floating_activities_search_threshold'.
            * Products :
                - The function-view 'views.product.remove_image()' has been replaced by the class 'ImageRemoving'.
            * Billing :
                - In the class 'function_fields._BaseTotalFunctionField' (& child classes), the class-attribute "cache_attr" has been removed.
                - The view named "billing__delete_related_cnote" now accepts only POST requests.
                - The function-view 'views.convert.convert()' has been removed ; use the class 'Conversion' instead.
                - The function-view 'views.credit_note.delete_related_credit_note()' has been replaced by the class 'CreditNoteRemoving'.
                - The function-view 'views.payment_information.set_default()' has been replaced by the class 'PaymentInformationAsDefault'.
                - The conversion matrix has changed. These cases have been removed (they were not used in the UI):
                    - CreditNote => Invoice
                    - Invoice => SalesOrder
            * Opportunities :
                - The function-view 'views.billing.current_quote()' has been replaced by the class 'CurrentQuoteSetting'.
                - The function-view 'views.billing.generate_new_doc()' has been replaced by the class 'BillingDocGeneration'.
                - The dict 'views.billing._GEN_BEHAVIOURS' has been removed.
            * Commercial :
                - The function-view 'views.strategy.delete_evalorga()' has been replaced by the class 'OrganisationRemoving'.
            * Reports :
                - The registrations are made in "apps.py" now & the method 'FieldAggregationRegistry.register()' has only one argument now.
                - The function-view 'views.graph.fetch_graph()' has been replaced by the class 'GraphFetching'. Beware this new view does not return the "graph_id" any more (because it was useless).
                - The function-view 'views.graph.fetch_graph_from_instancebrick()' has been replaced by the class 'GraphFetchingForInstance'.
                - The class 'ReportGraphForm' does not inherit 'CremeEntityForm' any more ('CremeModelForm' instead).
            * Assistants :
                - The function-view 'views.user_message.delete()' has been replaced by the class 'UserMessageDeletion'.
            * Emails :
                - The function-view 'views.campaign.delete_ml()' has been replaced by the class 'MailingListRemoving'.
                - In 'views.mail':
                    - The class 'EntityEmailWizard' now inherits 'AbstractWizardView' (so "permission" became "permissions" etc...).
                    - The nested class 'EntityEmailWizard._EmailCreationFormStep' has been removed.
                - In 'views.mailing_list':
                    - The function '_delete_aux()' has been removed.
                    - These function-views has been removed :
                        - delete_contact() (replaced by the class 'ContactRemoving').
                        - delete_organisation() (replaced by the class 'OrganisationRemoving').
                        - delete_child() (replaced by the class 'ChildRemoving').
                - The function-view 'views.signature.delete()' has been replaced by the class 'SignatureDeletion'.
                - The function-view 'views.template.delete_attachment()' has been replaced by the class 'AttachmentRemoving'.
                - The form class 'forms.mail.EntityEmailForm' inherits 'CremeModelForm' and not 'CremeEntityForm' anymore.
                - In 'bricks.EmailRecipientsBrick' & 'bricks.SendingsBrick', "ct_id" is not injected in the context anymore.
                - In 'buttons.EntityEmailLinkButton', "entity_email_ct_id" is not injected in the context anymore.
            * Events :
                - The constants 'INV_STATUS_MAP' & 'PRES_STATUS_MAP' have moved from 'views.event' to 'constants'.
            * Graphs :
                - The function-view 'views.graph.delete_relation_type()' has been replaced by the class 'RelationTypeRemoving'.
                - The function-view 'views.root_node.delete()' has been replaced by the class 'RootNodeDeletion'.
            * Polls :
                - The function-view 'views.poll_form.get_choices()' has been replaced by the class 'LineChoices'.
                - In 'forms.poll_reply.PollRepliesCreateForm' :
                    - The attribute "instance" has been removed.
                    - The special behaviour (removing related field & keeping the value fixed) of initial data for "pform", "campaign" & "persons" has been removed.
            * Projects :
                - The function-view 'views.resource.delete()' has been replaced by the class 'ResourceDeletion'.
                - The function-view 'views.task.delete_parent()' has been replaced by the class 'ParentRemoving'.
                - The function-view 'views.task.delete_activity()' has been replaced by the class 'ActivityDeletion'.
                - The class 'forms.resource.ResourceCreateForm' does not inherit 'CremeEntityForm' any more.
            * SMS :
                - The function-view 'views.campaign.delete_messaging_list()' has been replaced by the class 'MessagingListRemoving'.
                - The function-views 'views.messaging_list._delete_aux()/delete_contact()' have been replaced by the class 'ContactRemoving'.
                - The templatetags "phonenumber" & "formatphone" have been renamed "sms_phonenumber" & "sms_formatphone".

    Internal breaking changes :
    ---------------------------
    (they should not cause problem if you have not deeply modified the source code of Creme)

        # 'creme.urls.handler403' is now a function (it was a string).
        # In 'creme_core.models' :
            - The method 'auth.SetCredentials.set_value()' uses now keyword-arguments only.
            - In 'entity_filter' :
                - There were some changes in the JSON of 'EntityFilterCondition' for 'CustomFields':
                    - The key "value" became "values".
                    - The values are now always a list (old data generated by an old form which are not using list have been migrated).
                - These functions have been removed : '_delete_relationtype_efc()' & '_delete_customfield_efc()'.
        # The return value of 'creme_core.forms.fields.MultiRelationEntityField._build_rtype_cache()' has changed : the IDs of CremePropertyTypes are now stored in a list.
        # In 'creme_core.views.entity_filter' these mixins have been removed : 'FilterCreationMixin' & 'FilterEditionMixin'.
        # About the module 'creme_core.gui.listview' :
            - It has been split in several .py files.
            - These methods of 'ListViewState' have been removed: 'clear_research()', 'handle_research()', 'get_q_with_research()', '_build_condition()', '_build_date_range_dict()', '_date_or_None()'.
            - The function 'simple_value()' has been removed.
        # The list-views no longer support "whoami" in both POST & GET requests.
        # In the templatetag library "creme_listview", these functions have benn removed: '_build_bool_search_widget()', '_build_date_search_widget()' & '_build_select_search_widget()'.
        # In JavaScrip, the class 'creme.action.ActionBuilderRegistry' has been renamed/moved as 'creme.component.FactoryRegistry'.
        # Apps :
            * Creme_config :
                - There are many changes in 'registry'.
                - These functions of 'views.user_settings' have been removed : '_set_usersetting()', 'set_theme()' & 'set_timezone()'.
            * Activities :
                - These method of 'models.AbstractActivity' are deprecated : '_get_linked_aux()' & '_get_linked_for_orga()'.
                - These functions of 'views.calendar' have been removed : '_activity_2_dict()', '_filter_authorized_calendars()', '_get_datetime()' & '_get_one_activity_per_calendar()'.
                - There are some changes in the template "activities/templates/activities/calendar.html" (see the new 'CalendarView' context).
                - In JavaScript :
                    - Some changes which follow the changes of "calendar.html".
                    - There are some changes to use the view 'ActivitiesData': GET instead of POST, "color" key instead of "calendar_color".
                    - The function 'creme.activities.calendar.loadCalendarEventListeners()' takes an additional argument ("select_calendars_url").
            * Mobile :
                - The instances of 'MobileFavorite' are now unique for the couple ('entity', 'user').
            * Crudity :
                - In JavaScript, the class 'creme.crudity.CrudityHatController' replaces the function 'refreshWaitingActions()'.


== Version 2.0 ==

  UPGRADE NOTE :
    - You should create a all new virtual environment based on Python 3.5+
      (eg: "mkvirtualenv -p /usr/bin/python3XX" if you use 'mkvirtualenv')
      and populate it with "pip install -r creme/requirements.txt" of course.
    - Execute the well known commands "migrate", "generatemedia" & "creme_populate".

  Users side :
  ------------
    # A list-view action has been added : "clone" (for entities which support cloning of course).
    # The style of the popup-dialogs has been improved (title & icon always in the header).
    # The image viewer has been improved.
    # Apps:
        * Persons :
            * A statistic has been added : count of prospects & suspects.
        * Activities :
            - A statistic has been added : average number of meetings/phone calls per month (since one year).
            - The list-view button "Download as iCalendar" has been converted to a bulk action.
        * Reports :
            - You can now see the instances bricks related to a graph directly from the "Graphs" brick.
            - A list-view action for Reports has been added : "export".
            - The quick-search (in list-view) on the field <Report.filter> groups the filters by apps.
        * Emails :
            - Sendings have now a true detail-view :
                - The template used for a sending can now be viewed.
                - A link to the entity related to a mail has been added in the e-mails's brick.
            - A list-view action & a bulk-action have been added for Emails : "resend".
        * Tickets :
            - A statistic has been added : count of not closed tickets.
        * Opportunities :
            - The statistics of 'opportunities' have been improved.
        * Documents :
            - A list-view action has been added for Documents: "download".
        * Billing :
            - A list-view action has been added for Invoice & Quote : "download".
        * Events :
            - The view to link contact has been improved.
              The user is redirected to the event's contacts list-view (& not the event detail-view any more) ; there are better title, submission label & icon too.
        * Assistants :
            - The Alerts/ToDos/... which are related to a deleted entity are not displayed on their home bricks any more.

  Developers side :
  -----------------
      In this version, there are 2 main changes for developers :
        - We now use <Python 3.5> instead of <Python 2.7>.
          You can find the complete release notes of Python versions here :
             https://docs.python.org/3/whatsnew/3.0.html
             https://docs.python.org/3/whatsnew/3.1.html
             https://docs.python.org/3/whatsnew/3.2.html
             https://docs.python.org/3/whatsnew/3.3.html
             https://docs.python.org/3/whatsnew/3.4.html
             https://docs.python.org/3/whatsnew/3.5.html
          The code has not been fixed to "just work" ; lots of changes have been done to be more consistent.
            eg: several methods called 'itervalues()' have been deprecated because their name was referencing the old dictionary API.
          Lots of <%s-format> string have been converted to <{}-format">.
        - Views are going to class :
            - Almost all generic views of 'creme_core' are now class-based (but not list-views yet) ; the generic function-views are now deprecated.
              All apps have been updated to use these new classes ; the function-views using old generic views have been deprecated (or sometimes removed).
            - Lots of function-based views have been converted.
           NB: removed functions are indicated in this changelog ; for the deprecated ones there are warnings.

      Other important changes:
        - The list-view action (for single & bulk actions) system has been totally reworked (Python & JavaScript sides).
          Actions are now classes inheriting 'creme_core.gui.actions.UIAction', & are registered with 'CremeAppConfig.register_actions()' in your 'apps.py'.
          So it's easier to add/override/remove them from another app.
        - The registration of FunctionFields has been reworked. It's now external to the models (done in files 'apps.py' with 'CremeAppConfig.register_function_fields()') ;
          so it's easier to add/override/remove them from another app.
        - A new module, 'creme_core.core.enumerable', allows to retrieve & customise the choices related to a model-field.
          It's used by list-views, filter form or ReportGraph.
        - The old popup system is almost ready to be removed ; it's now only used by list-views & deprecated generic views ;
          beware to use the new templates for popup when you use the new generic class-based views for popup
          (if you don't set the attribute "template_name", the default value will be OK).
        - The "qfilter" argument for list-view uses a new format, more powerful than the old one.
          It's a true serialization of Q objects ; so 'OR' combinations can be used for example (only 'AND' were possible with the old format).

    Non breaking changes :
    ----------------------
        # Deprecations :
            - In 'creme_core.models' :
                - The method 'entity.CremeEntity.allowed_unicode()' is deprecated ; use 'allowed_str()' instead.
                - The class 'entity.EntityAction' is deprecated ; use 'creme_core.gui.actions.UIAction' and its registration mechanism instead.
                - The function 'lock.mutex_autolock()' is deprecated ; use 'MutexAutoLock' as decorator instead.
            - In 'creme_core.views' :
                - The function-view 'generic.detailview.view_entity()' is deprecated ; use the class-based view 'EntityDetail' instead.
                - In 'generic.add' :
                    - The function-view 'add_entity()' is deprecated ; use the class-based views 'CremeModelCreation' & 'EntityCreation' instead.
                    - The function view 'add_to_entity()' is deprecated ; use the class-based view 'AddingToEntity' instead.
                    - The function view 'add_model_with_popup()' is deprecated ; 'use the class-based view 'CremeModelCreationPopup' instead.
                - In 'generic.edit' :
                    - The function-view 'edit_entity()' is deprecated ; use the class-based views 'CremeModelEdition' & 'EntityEdition' instead.
                    - The function-view 'edit_related_to_entity()' is deprecated ; use the class-based view 'RelatedToEntityEdition' instead.
                    - The function-view 'edit.edit_model_with_popup()' is deprecated ; use the class-based views 'CremeModelEditionPopup' & 'EntityEditionPopup' instead.
                - In 'generic.listview' :
                    - In 'list_view()' & 'list_view_popup()', the format for the argument "qfilter" corresponding to 'get_q_from_dict()' is deprecated ;
                      use the new format which uses 'creme_core.utils.queries.Qserializer.dumps()' instead.
                    - The function '_clean_value()' is deprecated.
                - The function-view 'generic.popup.inner_popup()' is deprecated ; use a class-based view instead.
                - The function-view 'generic.portal.app_portal()' is deprecated.
                - The function-view 'enumerable.json_list_enumerable()' is deprecated ; use the class-based view 'ChoicesView' instead.
                - The function-view 'quick_forms.add()' is deprecated.
            - The method 'creme_core.forms.creme_property._AddPropertiesForm._create_properties()' is deprecated.
            - In the templatetag library "creme_core_tags" :
                - {% get_field_verbose_name %} is deprecated ; use {% cell_4_regularfield %} from the lib "creme_cells" instead.
                - {% get_viewable_fields %} is deprecated.
                - The filter "|get_tag" is deprecated.
                - The filter "|allowed_unicode" is deprecated ; use "|allowed_str" instead.
                - The filter "|xrange" is deprecated ; use "|range" instead.
            - The method 'creme_core.gui.menu.CreationFormsItem.verbose_unicode()' is deprecated ; use 'verbose_str()' instead.
            - In 'creme_core.utils' :
                - The function 'db.reorder_instances()' is deprecated ; use the class based-view 'creme_core.views.generic.order.ReorderInstances' instead.
                - In 'queries.get_q_from_dict()', the "~" feature is deprecated ; use a 'django.db.models.query.Q' instead.
                - The function 'chunktools.iter_splitlinechunks()' is deprecated (& broken if you pass bytes instead of str) ;
                  you can use the method 'django.core.files.base.File.__iter__()' instead for example.
            - In 'creme_core.core' :
                - The method 'reminders.ReminderRegistry.itervalues()' is deprecated ; use '__iter__()' instead.
                - The class 'function_fields.FunctionFieldsManager' is deprecated ; use the new method 'CremeAppConfig.register_function_fields()' instead.
            - 'creme_core.constants.MODELBLOCK_ID' is deprecated ; use 'MODELBRICK_ID' instead.
            - The signal 'creme_core.signals.form_post_save' is deprecated.
            - In 'creme_core.backends' :
                - The method '_BackendRegistry.iterkeys()' is deprecated ; use the property '_BackendRegistry.extensions' instead.
                - The method '_BackendRegistry.iterbackends()' is deprecated ; use the property '_BackendRegistry.backends' instead.
            - These template files are deprecated :
                - creme_core/generics/blockform/add_popup.html
                - creme_core/generics/blockform/edit_popup.html
                - creme_core/generics/blockform/link_popup.html
                - creme_core/generics/blockformset/add_popup.html
                - creme_core/generics/blockformset/base.html
                - creme_core/generics/form/add_innerpopup.html
                - creme_core/generics/form/edit_innerpopup.html
                - creme_core/generics/inner_popup.html
                - creme_core/generics/portal.html
            - JavaScript:
                - The function 'creme.utils.handleDialogSubmit()' is deprecated.
                - The function 'creme.relations.addRelationTo' is now deprecated ; use 'creme.relations.AddRelationToAction' instead.
            - Apps :
                * Activities :
                    - These methods of 'models.AbstractActivity' are deprecated :
                        - display_review() (use <SettingValue.objects.get_4_key(setting_keys.review_key).value> instead)
                        - _get_linked_for_ctypes_aux()
                        - get_future_linked_for_ctypes()
                        - get_past_linked_for_ctypes()
                    - 'constants.DISPLAY_REVIEW_ACTIVITIES_BLOCKS' is deprecated ; use 'SETTING_DISPLAY_REVIEW' instead.
                    - The JavaScript function 'creme.activities.exportAsICal()' is deprecated ; use 'ExportAsICalAction' instead.
                    - These template files are deprecated :
                        - activities/view_activity_popup.html (use "activity-popup.html" instead).
                        - activities/add_popup_activity_form.html (use "forms/add-activity-popup.html" instead).
                        - activities/frags/ical_list_view_button.html
                * Persons :
                    - In 'forms.contact.RelatedContactForm' :
                        - The use of initial values to fill "linked_orga" & "rtype" is deprecated ; use constructor argument instead.
                        - Leaving "linked_orga" argument empty is deprecated.
                * Billing :
                    - 'constants.CURRENCY' is deprecated.
                    - The property 'models.AbstractTemplateBase.verbose_status' is deprecated.
                    - The method 'models.AbstractTemplateBase.get_verbose_status()' is deprecated ; use 'function_fields.TemplateBaseVerboseStatusField' instead.
                    - The method 'registry.AlgoRegistry.itervalues()' is deprecated ; use 'AlgoRegistry.algorithms' instead.
                    - The JavaScript function 'creme.billing.exportAs()' is deprecated ; use the action 'ExportDocumentAction' instead.
                * Emails :
                    - The function 'views.sending.reload_mails_brick()' is deprecated ; use 'reload_sending_bricks()' instead.
                    - In 'forms.mail', the classes 'TemplateSelectionForm' & 'EntityEmailFromTemplateForm' are deprecated.
                    - These template files are deprecated :
                        - emails/popup_sending.html
                        - emails/view_email.html
                        - emails/view_entity_mail_popup.html
                * Assistants :
                    - In the model 'Action' : the methods 'get_actions*()' are deprecated.
                    - In the model 'Alert' : the methods 'get_alerts*()' are deprecated.
                    - In the model 'Memo' : the methods 'get_memos*()' are deprecated.
                    - In the model 'ToDo' : the methods 'get_todos*()' are deprecated.
                    - In the model 'UserMessage' : the methods 'get_messages*()' are deprecated.
                * Opportunities :
                    - The method 'models.AbstractOpportunity.get_weighted_sales()' is deprecated ; use 'function_fields.TurnoverField' instead.
                    - In 'forms.opportunity' :
                        - The class 'OpportunityCreateForm' is deprecated ; use 'OpportunityCreationForm' instead.
                        - The class 'OpportunityEditForm' is deprecated ; use 'OpportunityEditionForm' instead.
                * Reports :
                    - The method 'report_aggregation_registry.FieldAggregationRegistry.itervalues()' is deprecated ; use the property 'FieldAggregationRegistry.aggregations' instead.
                    - The template file "reports/frags/report_export_filter.html" is deprecated ; use "forms/report-export-filter.html" instead.
                * Commercial :
                    - The method 'models.CommercialApproach.get_approaches_for_ctypes()' is deprecated.
                    - The class 'forms.salesman.SalesManCreateForm' is deprecated.
                * Geolocation :
                    - The function 'utils.get_setting()' is deprecated ; use 'SettingValue.objects.get_4_key()' instead.
                * Tickets :
                    - The method 'models.AbstractTicket.get_resolving_duration()' is deprecated ; use 'function_fields.ResolvingDurationField' instead.
                * SMS :
                    -  The template file "sms/popup_sending.html" is deprecated.
        # A new hint, indicating when a swapped URL has never been defined, has been added (see 'creme.creme_core.conf.urls.Swappable') ;
          it could "break" an existing application (because the code stops on a fatal error at starting), but it would indicate an existing bug.
        # The model 'creme_core.models.Relation' now explicitly avoids duplicates.
          A new manager has been added, with 3 methods to handle this smoothly: safe_create(), safe_get_or_create() & safe_multi_save()
        # A new models field has been created : EntityCTypeForeignKey.
          It looks like a GenericForeignKey, but it references only CremeEntities ; it uses a true ForeignKey for the entities, so it's possible to use classical filtering on FKs.
        # A specific manager has ben added to 'creme_core.models.SettingValue', with a method which keeps retrieved instances in a (per-request) cache.
        # A generic view to help the disabling of an URL has been added : the class-based view 'creme_core.views.generic.placeholder.ErrorView'.
        # A new collection has been added : 'creme_core.utils.collections.InheritedDataChain'.
          It facilitates the writing of registries by models when data from parent classes are used too.
        # Two templatetags to store safely JSON data have been added : {% jsondata %} & {% blockjsondata %}.
        # A simple HTTP server has been added in unit tests to serve static files.
        # The command "i18n_empty" has been improved :
            - The context is now used. eg: an empty entry with a context is not ignored because an entry with he same 'msgid' (but without context) is filled.
            - The line numbers in the PO files are now displayed.

    Breaking changes :
    ------------------
        # Deprecated stuffs which have been removed :
            - The app 'activesync' is not available any more (its code is still in the repository but has not been ported to Python 3).
            - In all apps :
                - The configurable portal views (ie: not 'mobile', not 'creme_config') & their templates have been removed.
                - The methods 'portal_display()' of Bricks have been removed.
            - The method 'register_setting_key()' of classes inheriting 'CremeAppConfig' is not called automatically anymore.
            - The middleware class 'creme_core.middleware.exceptions.Beautiful403Middleware' has been removed.
            - In 'creme_core.models.bricks' :
                - In 'BlockDetailviewLocation', the methods 'create()'/'create_empty_config()' & the attribute 'ZONES' have been removed.
                - In 'BlockPortalLocation', the method 'create()' & 'create_empty_config()' have been removed.
                - The method 'BlockMypageLocation.create()' has been removed.
            - In 'creme_core.views' :
                - The functions 'bricks.reload_portal()' & 'bricks.render_portal_brick()' have been removed.
                - The function 'exceptions.server_error()' has been removed.
                - The function 'file_handling.fetch_resources()' has been removed.
            - In 'creme_core.forms.widgets' :
                - These functions have been removed : widget_render_input(), widget_render_hidden_input(), widget_render_context().
                - The method 'EnhancedSelectOptions.render_label()' has been removed.
            - In 'creme_core.gui' :
                - The old API (activated by 'settings.OLD_MENU == True') in 'menu' has been removed.
                - In 'bricks' :
                    - In 'BricksManager', the methods 'get_dependencies_map()' & '_get_dependencies_ids()' have been removed.
                    - The method '_BrickRegistry.get_compatible_portal_blocks()' has been removed.
                    - The attribute 'Brick.target_apps' has been removed.
                - In 'buttons.ButtonsRegistry.register()', registering 'Button' instances is no more possible.
                  In all apps the global buttons instances have been removed.
            - In 'creme_core.utils.dates', these deprecated functions have been removed :
                - get_dt_to_iso8601_str()
                - get_dt_from_iso8601_str()
                - get_dt_from_json_str()
                - dt_to_json_str()
                - get_dt_from_str()
                - get_date_from_str()
            - These constants of 'creme_core.constants' have been removed :
                - SETTING_BLOCK_DEFAULT_STATE_IS_OPEN
                - SETTING_BLOCK_DEFAULT_STATE_SHOW_EMPTY_FIELDS
            - In 'creme_core.core.reminders.ReminderRegistry.register()', registering an instance is not possible anymore.
            - In 'creme_core.registry' :
                - The exception class 'NotRegistered' has been removed.
                - In 'CremeRegistry', the methods 'register()' & 'get()' have been removed.
            - In 'bricks.HistoryBrick', the method '_populate_users()' has been removed.
            - In 'creme_core.templatetags' :
                - These templatetags have been removed : {% timedelta_pprint %}, {% ctype_is_registered_for_import %}, {% get_button_menu %}.
                - In 'creme_bricks', about the tag {% brick_display %}, the option "render='portal'" has been removed.
                - The templatetag 'creme_listview.get_listview_columns_header' does not inject the variable "can_merge_entities" in the context any more.
                - In 'creme_menu' :
                    - The old menu API has been removed.
                    - The tags {% get_prefered_menu %} & {% get_last_items_menu %} have been removed with their templates.
                - In 'creme_search', the tag  {% get_search_panel %} has been removed.
                - The templatetags library "creme_quickforms" has been removed (its only templatetag was deprecated).
            - In JavaScript :
                - In 'creme.utils', the functions 'openQuickForms()' & 'confirmBeforeGo()' have been removed.
                - In 'creme.menu' :
                    - The global variable 'actions' has been removed.
                    - The functions 'NavIt()' & 'HNavIt()' have been removed ; the lib "jquery.navIt.0.0.6.js" has been removed too.
                    - The function 'creme.menu.sideMenu()' has been removed ; the related lib "fg.menu" has been removed too.
            - Apps :
                * Creme_config :
                    -  In 'views.bricks' :
                        - The class 'PortalBricksWizard' has been removed.
                        - The function 'edit_portal()' & 'delete_portal()' have been removed.
                    - In 'forms.bricks' :
                        - The method '_BrickLocationsForm._build_portal_locations_field()' has been removed.
                        - These classes have been removed: _BlockPortalLocationsForm, BlockPortalLocationsAddForm & BlockPortalLocationsEditForm.
                    - The function 'utils.generate_portal_url()' has been removed.
                * Documents :
                    - In 'views.ajax', the functions 'get_child_documents()' & 'get_child_documents()' have been removed.
                * Activities :
                    - In the view 'calendar.get_users_activities()', the URL argument "calendar_ids" has been removed.
                    - In 'bricks', the methods 'FutureActivitiesBrick._get_queryset_for_ctypes()' & 'PastActivitiesBrick._get_queryset_for_ctypes()' have been removed.
                * Assistants :
                    - The method 'bricks._AssistantsBrick._get_contenttype_id()' has been removed.
                    - All the methods '_get_queryset_for_portal()' of the Bricks have been removed.
                    - The global variables 'reminders.reminder_alert' & 'reminders.reminder_todo' have been removed.
                * Emails :
                    - The class 'bricks.SignaturesBrick' has been removed.
        # The settings "OLD_MENU" & "LOGO_URL" have been removed.
        # In the credentials system, the hack with the fake app "my_page" (access was always allowed) has been removed.
        # In 'creme_core.models' :
            - The classes 'entity.CremeEntity' & 'relation.Relation' now inherit 'base.CremeModel'.
                - The class 'base.CremeAbstractEntity' has been removed.
                - The global constant 'base._SEARCH_FIELD_MAX_LENGTH' has been moved to 'entity'.
                - In the model 'Relation' :
                    - These fields have been removed : entity_type, header_filter_search_field, is_deleted, modified.
                    - These attributes have been removed : _real_entity, function_fields.
                    - These methods have been removed : _get_real_entity(), get_real_entity(), populate_real_entities().
            - The method 'CremeEntity.get_actions()' has been removed ; use the new action system ('creme_core.gui.actions') instead.
            - The attribute 'CremeEntity.function_fields' has been removed ; use 'creme_core.core.function_fields.function_field_registry' instead.
            - The class 'entity._PrettyPropertiesField' has moved to 'creme_core.function_fields.PropertiesField'.
            - The model 'relation.Relation' has now a UNIQUE constraint on ('type', 'subject_entity', 'object_entity') ;
              a data migration removes duplicated relations, so beware to custom code which (accidentally) relies on duplicated Relation (eg: with internal RelationType).
            - The field 'creme_property.CremePropertyType.is_custom' is <editable=False> now.
            - These models of 'bricks' have been renamed :
                - BlockDetailviewLocation => BrickDetailviewLocation
                - BlockPortalLocation     => BrickPortalLocation
                - BrickMypageLocation     => BrickMypageLocation
                - RelationBlockItem       => RelationBrickItem
                - InstanceBlockConfigItem => InstanceBrickConfigItem
                - CustomBlockConfigItem   => CustomBrickConfigItem
                - BlockState              => BrickState
            - The field 'bricks.BrickPortalLocation.app_name' has been removed.
            - The method 'bricks.BrickPortalLocation.create_or_update()' has been removed.
            - The model 'PreferedMenuItem' has been removed.
        # In 'creme_core.views' :
            - These function-views have been replaced by class-based views :
                - creme_property : type_detailview(), add_to_entity(), add_properties_bulk(), add_type(), edit_type()
                - entity : inner_edit_field(), bulk_update_field(), trash()
                - entity_filter : add(), edit()
                - header_filter : add(), edit()
                - index : home(), my_page()
                - job : detailview(), edit(), list_all(), list_mine()
                - quick_forms.add_from_widget()
                - relation : add_relations(), add_relations_bulk()
                - search.search()
        # In 'creme_core.forms' :
            - The class 'header_filter.HeaderFilterForm' has been removed ; use the 'HeaderFilterCreationForm' & 'HeaderFilterEditForm' instead.
            - In 'entity_filter' :
                - The constructor of 'EntityFilterCreateForm' takes a additional mandatory argument "ctype" (& it does not use the initial data to get the content type).
                - The constructors of 'FieldConditionWidget' & 'RegularFieldsConditionsWidget' take now an additional first argument "model" (default: CremeEntity).
            - The method 'fields.CreatorEntityField._check_qfilter()' has been removed.
        # In 'creme_core.gui' :
            - With the method 'quick_forms.QuickFormsRegistry.register()' : if a form is already registered for the given model, an exception is raised (there was just a log).
            - The method 'button_menu.ButtonsRegistry.get_buttons()' is now a generator.
        # In 'creme_core.utils' :
            - The decorator '@jsonify' has moved to the module 'creme_core.views.decorators'.
            - A new default JSON encoder has been added : 'creme.creme_core.utils.serializers.json_encode()'.
              The output of "@jsonify", "{% ...|jsonify %}" & "{% brick_action %}" has slightly changed for date/datetime/time formatting.
            - The function 'safe_unicode_error()' has been removed.
            - In 'collections.ClassKeyedMap', the methods 'items()', 'keys()' & 'values()' now return 'views' like regular Python3 dictionaries.
            - The method 'date_range.DateRangeRegistry.register()' now raises an Exception for duplicates (previously it was just a log message).
            - In 'date_period' :
                - The method 'DatePeriodRegistry.register()' now raises an Exception for duplicates (previously it was just a log message).
                - The method 'SimpleValueDatePeriod._ungettext()' must now return a '{number}' format string (it was a '%s' format).
            - The function 'secure_filename.secure_filename()' uses only 'str' (not 'bytes').
            - The module 'unicode_csv' has been removed ; use the standard module 'csv' instead.
        # About context processors :
            - The function 'creme_core.context_processors.get_old_menu()' & 'creme_core.context_processors.get_logo_url()' have been removed.
            - The variable 'DEFAULT_THEME' is not injected in the templates context anymore (see processor 'get_css_theme()').
        # In 'creme_core.core' :
            - The constructor of 'entity_cell.EntityCellActions' takes an additional argument : "actions_registry".
            - In the class 'reminders.ReminderRegistry' :
                - The method 'register()' now raises a 'ReminderRegistry.RegistrationError' when an ID is duplicated (it was just a log message).
                - The method 'unregister()' now raises a 'ReminderRegistry.RegistrationError' when an ID des not exist (it was just a log message).
                - The method '__iter__()' now returns instances of Reminders (it was tuples (ID, instance_of_reminder)) like 'itervalues()'.
            - The method 'setting_key._SettingKeyRegistry.unregister()' now raises an exception in an ID is not registered (it was a simple log message).
        # The templatetag {% get_entity_actions %} (from "creme_widgets") has been removed ;
          use {% listview_entity_actions %} & {% listview_header_actions %} (from "creme_listview") instead.
        # In the template 'creme_core/view_property_type.html', the variable for bricks is now "bricks" (it was still "blocks").
        # JavaScript :
            - The function 'creme.dialogs.image()' now returns a 'creme.dialog.ImagePopover' instance.
            - Use the event "brick-setup-actions" for custom brick action registration instead of "brick-before-bind".
            - The method 'creme.widget.EntitySelector.multiple()' has been removed ; used 'isMultiple()' instead.
            - The jQuery extension 'imageMagnifier' is not used any more and has been removed from the default configuration.
        # Apps :
            * Creme_config :
                - Some URLs have changed (no problem if named URLs are used):
                    - "creme_config/blocks/relation_block/*" => "creme_config/bricks/rtype/*"
                    - "creme_config/blocks/instance_block/*" => "creme_config/bricks/instance/*".
                    - "creme_config/blocks/*"                => "creme_config/bricks/*".
                - In 'views':
                    - Many function-views have been replaced by Class-Based Views.
                    - The class 'user_role.UserRoleCreationWizard' has been renamed 'RoleCreationWizard'.
                    - The class 'user_role.UserRoleEditionWizard' has been renamed 'RoleEditionWizard'.
                    - The function 'bricks._edit_mypage()' has been removed.
                - In 'forms' :
                    - The constructor of 'custom_fiels.CustomFieldsAddForm' takes an additional mandatory argument "ctype".
                    - The constructor of 'search.SearchAddForm' takes an additional mandatory argument "ctype".
                    - The method 'user.UserAssignationForm.save()' does not lock any more (this is done by the view 'UserDeletion', with another lock name).
                    - In 'bricks' :
                        - The forms do not use "self.initial" to initialize their attributes ("content_type", "role" & "superuser").
                        - In the class 'BrickMypageLocationsForm', the field "blocks" has been renamed "bricks".
                    - In 'user_role' :
                        - The constructor of 'AddCredentialsForm': the argument "role" has been replaced by an argument "instance".
                        - About 'UserRoleDeleteForm' :
                            - The constructor takes an additional argument "instance", & does not use the initial value "role_to_delete" any more.
                            - The method 'save()' does not use a lock (this is done by the view 'RoleDeletion', with another lock name).
                - All views/forms/bricks/templates about 'PreferedMenuItem' have been removed.
                - The class 'brick.BlockPortalLocationsBrick' has been removed with its related template.
                - In 'templates'
                    - The template file "creme_config/portal.html" has changed (eg: suppression of {% block before_statistics %}).
                    - The template "creme_config/generics/app_portal.html" has been replaced by "app-portal.html" to make some changes (eg: use the variable "bricks" instead of "app_config_bricks").
                    - The template "creme_config/generics/model_portal.html" has been replaced by "model-portal.html" to make some changes (eg: use the variable "bricks" instead of "model_brick").
                - In 'bricks', these classes have been renamed :
                    - BlockDetailviewLocationsBrick    => BrickDetailviewLocationsBrick
                    - BlockHomeLocationsBrick          => BrickHomeLocationsBrick
                    - BlockDefaultMypageLocationsBrick => BrickDefaultMypageLocationsBrick
                    - BlockMypageLocationsBrick        => BrickMypageLocationsBrick
                    - RelationBlocksConfigBrick        => RelationBricksConfigBrick
                    - InstanceBlocksConfigBrick        => InstanceBricksConfigBrick
                    - CustomBlocksConfigBrick          => CustomBricksConfigBrick
            * Persons :
                - In the models 'Address' :
                    - The field "object_id" (PositiveIntegerField) have been replaced by the field "object" (EntityCTypeForeignKey).
                    - The field "owner" is not a 'GenericForeignKey' anymore ; it's a 'RealEntityForeignKey'.
                    - The related name for the field "content_type" has been removed.
                - The URL "persons/contact/add_with_relation/" has been replaced by "persons/contact/add_related/" (but the name did not change) ;
                  the argument "callback_url" is not used any more.
                - The function 'views.organisation.set_managed()' has been removed ; use the class-based view 'ManagedOrganisationsAdding' instead.
            * Documents :
                - In 'views' :
                    - The function-views 'document.abstract_add_related_document()' & 'add_related()' has been removed ; use the class-based view 'RelatedDocumentCreation' instead.
                    - The function-views 'folder.abstract_add_child_folder()' & 'add_child()' has been removed ; use the class-based view 'ChildFolderCreation' instead.
                - In 'forms' :
                    - The class 'document.RelatedDocumentCreateForm' constructor takes an additional argument "entity" (& does not use the initial value with key="entity" any more).
                    - The class 'folder.ChildFolderForm' constructor takes an additional argument "entity" (& does not use the initial value with key="parent" any more).
                    - In the class 'fields.(Multi)ImageEntityField', the property "q_filter" is now a Q() instance (even if you set a dictionary).
            * Activities :
                - These function-views have been removed & replaced by class-based views :
                    - bricks.add_participant()
                    - bricks.add_subject()
                    - calendar.add_user_calendar()
                    - edit_user_calendar()
                    - link_user_calendar()
                - The method 'forms.mass_import.RelatedExtractor._searched_contact()' returns now a Contact instance, & not a tuple anymore.
            * Assistants :
                - In 'models' Action/Alert/Memo/ToDo/UserMessage :
                    - The PositiveIntegerFields "entity_id" have been replaced by EntityCTypeForeignKeys "entity".
                    - The fields 'creme_entity' are not 'GenericForeignKeys' anymore ; they are 'RealEntityForeignKeys' now.
                    - The related names for the fields 'entity_content_type' have been removed.
                - The class 'models.alert._GetAlerts' has moved to 'function_fields.AlertsField'.
                - The class 'models.memo._GetMemos' has moved to 'function_fields.GetMemosField'.
                - The class 'models.todo._GetTodos' has moved to 'function_fields.GetTodosField'.
                - All views using 'creme_core.views.generic.add_to_entity()' has been removed & replaced by Class-Based Views.
                  The function-view 'user_message.add()' has been replaced too.
            * Products :
                - The function 'views.product.add_images()' has been removed ; use the class-based view 'ImagesAdding' instead.
                - The function 'views.service.add_images()' has been removed ; use the class-based view 'ImagesAdding' instead.
            * Billing :
                - The URL for the list-view of CreditNotes has change (but its name did not change, so no breaking with 'reverse()').
                - The class 'models.templatebase._VerboseStatusField' has moved to 'function_fields.TemplateBaseVerboseStatusField'.
                - The function 'views.payment_information.add()' has been removed ; use the class-based view 'PaymentInformationCreation' instead.
                - The function 'views.line.add_to_catalog()' has been removed ; use the class-based view 'AddingToCatalog' instead.
                - The function 'views.payment_information.edit()' has been removed ; use the class-based view 'PaymentInformationEdition' instead.
                - The method 'registry.AlgoRegistry.register()' now raises an Exception on duplicated IDs (it was a simple log message).
                - The templates "billing/frags/button_convert2invoice.html" & "billing/frags/button_convert2order.html" do not use the variable "has_perm" any more.
            * Opportunities :
                - The class 'models._TurnoverField' has moved to 'function_fields.TurnoverField'.
                - The JavaScript function 'creme.opportunities.setCurrentQuote()' has been removed.
            * Emails :
                - The URL for the views "emails__view_sending" has changed (the prefix "campaign/" has been removed) ; there is no breaking if you use 'reverse()'.
                - The field 'models.LightWeightEmail.body' contains now JSON data instead of pickled data.
                - These function views have been replaced by class-based views :
                    - campaign.add_ml()
                    - crudity.synchronisation()
                    - mail.view_lightweight_mail()
                    - mailing_list : add_contacts(), add_contacts_from_filter(), add_children(), add_organisations(), add_organisations_from_filter()
                    - recipient : add(), add_from_csv()
                    - sending : add(), detailview()
                    - signature : add(), edit()
                    - template.add_attachment()
            * Commercial :
                - The URL named "commercial__edit_segment_desc" has changed & takes only one argument now.
                - In the model 'CommercialApproach' :
                    - The field 'ok_or_in_futur' has been removed.
                    - The PositiveIntegerField 'entity_id' has been replaced by the EntityCTypeForeignKey 'entity'.
                    - The field 'creme_entity' is not a 'GenericForeignKey' anymore ; it's a 'RealEntityForeignKey'.
                    - The related name for the field 'entity_content_type' has been removed.
                    - The static method 'get_approaches()' does not return instances related to deleted (ie: in the trash) entities when not entity PK is given.
                - In views, these function-views have been removed & replaced by class-based views :
                    - act : add_pattern_component(), add_objective(), add_objectives_from_pattern(), _add_objective(), edit_objective()
                            add_child_pattern_component(), add_parent_pattern_component(), create_objective_entity().
                    - strategy : add_segment(), edit_segment(), link_segment(), add_asset(), edit_asset(), add_charm(), edit_charm(), add_evalorga(), orga_evaluation(), orga_synthesis()
                    - market_segment : add(), edit(), delete(), listview()
                - The function 'views.strategy._orga_view()' has been removed.
                - The function 'views.act._add_subpattern_component()' has been removed.
                - The constructor of 'forms.market_segment.SegmentReplacementForm' takes an additional argument "instance".
            * Reports :
                - In 'views' :
                    - In 'report.set_selected()', a new POST argument is mandatory: "report_id".
                      So the JavaScript function 'creme.reports.expandSubReport()' takes an additional argument "report_id".
                    - The function-view 'report.edit_fields' has been removed ; use the class-based view 'FieldsEdition' instead.
                    - The function-view 'report.reorder_field()' has been removed ; use the class-based view 'MoveField' instead.
                      The related URL has changed (the name remains the same, but the report's ID must be added in arguments).
                    - The function-view 'export.preview()' has been removed ; use the class-based-view 'Preview' instead.
                - In the constructor of 'forms.report.ReportFieldsForm', the argument "entity" has been renamed "instance".
                - The attribute 'report_aggregation_registry.FieldAggregation.pattern' must now be a {}-format string.
                - In the class 'core.graph.ReportGraphHand' (& so child classes), the methods 'fetch()' & '_fetch()' take a mandatory argument "user".
                - In JavaScript:
                    - These functions have been removed : creme.reports.load(), creme.reports.loadHeaderFilters() & creme.reports.loadEntityFilters().
                    - The signature of 'creme.reports.exportReport(filterform_url, preview_url, export_url)' has changed to 'creme.reports.exportReport(filterform_url)'.
                    - The signature of 'creme.reports.PreviewController(preview_url, export_url)' has changed to 'creme.reports.PreviewController({previewUrl: ..., exportUrl: ...})'.
            * Geolocation :
                - In 'bricks.GoogleDetailMapBrick', the context variable "geoaddresses" is not JSON-ified any more.
            * Tickets :
                - The class 'models._ResolvingDurationField' has moved to 'function_fields.ResolvingDurationField'.
                - The button 'buttons.Linked2TicketButton' does not inject the variable "ticket_ct" any more.
            * Crudity :
                - In the class 'models.WaitingAction', the methods 'get_data()' & 'set_data()' have been removed ; use the property 'WaitingAction.data' instead.
                - The function-view 'views.actions.portal()' has been removed ; use the class-based view 'Portal' instead.
                - The function-view 'views.history.history()' has been removed ; use the class-based view 'History' instead.
                - The function 'utils.strip_html_()' has been removed ; use 'strip_html()' instead.
                - The unused function 'utils.unescape()' has been removed.
            * Graphs :
                - The function 'views.graph.add_relation_types()' has been removed ; use the class-based view 'RelationTypesAdding' instead.
                - The function 'views.root_nodes.add()' has been removed ; use the class-based view 'RootNodesAdding' instead.
                - The function 'views.root_node.edit()' has been removed ; use the class-based view 'RootNodeEdition' instead.
            * Projects :
                - These function-views have been replaced by class-based views :
                    - resource : add(), edit()
                    - task : abstract_add_activity(), add_activity(), task.add_parent()
                - In 'forms.task.RelatedActivityCreateForm', the constructor takes an argument "entity" now.
            * Polls :
                - These function views have been replaced by class-based views :
                    - poll_form : add_line(), add_section(), add_line_to_section(), add_section_child(),
                                  edit_line_conditions(), edit_line(), edit_section(), stats()
                    - poll_preply : link_to_person(), edit_line()
                - In 'forms.poll_form':
                    - The method 'PollFormSectionCreateForm.save()' does not use <self.initial['parent']> any more ; use the constructor argument "line" instead.
                    - The constructor of 'PollFormLineCreateForm' takes now an optional argument "section" & does not use <self.initial['line']> any more.
                    - The constructor of 'poll_form.PollFormLineEditForm' does not raise a 404 error when the related line is disabled any more.
                    - The constructor of 'PollFormLineConditionsForm' takes an additional argument "line" & does not use <self.initial['line']> any more.
                - In the class 'core.EnumPollLineType', the attributes '_description' & '_description_del' use now '{foo}' format.
            * Events :
                - The constructor of 'forms.event.RelatedOpportunityCreateForm' takes 2 additional arguments "event" & "contact" ; the initial values with keys "event" & "contact" are not used any more.
            * Vcfs :
                - In 'forms.vcf', 'VcfImportForm.HOME_ADDR_PREFIX' & 'VcfImportForm.WORK_ADDR_PREFIX' moved at the root of the module.
            * CTI :
                - The function-view 'views.respond_to_a_call()' has been removed ; use the class-based view 'AnswerToACall' instead.
                - In 'views._build_related_phonecall()', the title format in now a '{entity}' format string.
            * SMS :
                - The function-view 'views.sending.detailview()' has been removed ; use the class-based view 'Messages' instead.

    Internal breaking changes :
    ---------------------------
    (they should not cause problem if you have not deeply modified the source code of Creme)

        # In 'creme_core.models' :
            - In 'history', the attributes '_HLTPropertyCreation._fmt' & '_HLTRelation._fmt' use now {}-format strings.
            - In 'entity_filter._ConditionOperator', "key_pattern" (argument and property) is now a {}-format string.
        # In 'creme_core.views' :
            - The functions 'entity_filter._set_current_efilter()' & 'header_filter._set_current_hf()' have been removed.
            - The function 'index._render_home()' has been removed.
        # In 'creme_core.forms': 'base._CUSTOM_NAME' & 'bulk._CUSTOMFIELD_FORMAT' are now {}-format strings.
        # In the attribute 'creme_core.core.entity_cell.EntityCellCustomField._CF_PATTERNS', values are now {}-format strings.
        # The class 'creme_core.backends.csv_import.CSVImportBackend' does not inherit 'UnicodeReader' any more.
        # In the constructor of 'creme_core.gui.bricks.SpecificRelationsBrick', the argument "relationblock_item" has been renamed "relationblock_item".
        # In 'creme_core.templatetags' :
         - The return of 'creme_bricks.brick_action()' has slightly changed ("data" key is now a dict/None, not a string any more).
         - In the function 'creme_listview._build_select_search_widget()' : the argument "choices" uses the new dictionary format
           for choices (see 'creme_core.core.enumerable.Enumerator') & the "values" of the widget context uses a new format adapted for grouped choices ;
           the template 'creme_core/templatetags/listview_columns_header.html' has changed to use this new format.
        # The functions 'python_subprocess()' in 'creme_core.utils.system.nt' & 'creme_core.utils.system.posix' have been removed (replaced by the one in 'creme_core.utils.system').
        # The signal with uid "creme_core-blockmypagelocation._copy_default_config" is now  "creme_core-brickmypagelocation._copy_default_config".
        # Some patterns in 'creme_core.utils.url.TemplateURLBuilder' have changed to be {}-format strings.
        # In JavaScript, all "_action_*" methods in 'ListViewActionBuilders' have been renamed to "_build_*" (see 'ActionBuilderRegistry' API).
        # Apps :
            * Creme_config :
                - The function 'views.bricks._get_configurable_ctype()' has been removed.
                - The function 'views.generics_views._popup_title()' has been removed.
                - In the constructor of 'registry._ConfigRegistry', the argument "block_registry" has been renamed "brick_registry".
            * Persons :
                - The method 'forms.merge._PersonMergeForm._save_address()' has been replaced by '_handle_addresses()'.
            * Billing :
                - The function 'function_fields.hook_organisation()' has been removed.
            * Emails :
                - The function 'views.sending._get_sending()' is deprecated.
                - The template "emails/bricks/html-body.html" needs a context variable "body_url" now.
            * Crudity :
                - The field 'models.WaitingAction.raw_data' is now a BinaryField.
                - The global variable 'builders.infopath.XSL_VIEW_FIELDS_TEMPLATES_PATH' is now a {}-format string.
                - The method 'builders.infopath.InfopathFormBuilder._render()' is not a generator anymore & takes a mandatory argument "file_name".
                - In JavaScript, the brick-actions no longer use the argument "__selector".
            * Assistants :
                - In 'signals' : 'MODELS', 'dispose_instances()' & 'handle_merge()' have been removed.
            * Commercial :
                - In 'signals', the function 'dispose_comapps()' & 'handle_merge()' have been removed.
            * Geolocation :
                - The method 'management.commands.geolocation.CSVPopulator._open()' has been removed.


== Version 1.8 ==

  UPGRADE NOTE :
    - You should create a all new virtual environment (and populate it with "pip install -r creme/requirements.txt" of course).
    - If you have the list of installed apps in your file local_settings.py/project_settings.py, remove "creme.media_managers".
      If you defined your own 'MIDDLEWARE_CLASSES', 'LOGIN_REDIRECT_URL', 'LOGIN_URL', 'INSTALLED_DJANGO_APPS', see the "Breaking changes" section.
    - Execute the well known commands "migrate", "generatemedia" & "creme_populate".

  Users side :
  ------------
    # The version of Django has been upgraded to 1.11.
    # Some features about data confidentiality have added :
        - An history of consultation for Contacts's detail-view (other types can be in the history by adding some simple code).
        - A sandbox feature has been added to the credentials system. It is currently used with a new button which reserves given entities to superusers.
        - An history line is created when data from list-views are exported ; stored information are :
             - Number of exported entities.
             - HeaderFilter used.
             - EntityFilter used.
    # The app 'media_managers' has been removed.
    # A new model, FileRef, can keep a reference temporary files (like files created for XLS export).
      A new file cleaner job use them to remove the temporary files, and files related to removed Documents.
    # The passwords are now validated (thanks to the new Django 1.9's password validation system -- see settings.AUTH_PASSWORD_VALIDATORS).
        - They have to be sufficiently different from the user's information.
        - They must be at least 8 characters long.
        - They cannot belong to a a black-list of common passwords.
        - They cannot be entirely alphanumeric.
    # We use our own fork of 'django-generator', because the vanilla one does not support Django 1.9+.
        - Some useless (in our workflow) features have been removed, in order to get less code to support.
        - The annoying error messages about "URL not found" have been removed.
    # The old menu ("settings.OLD_MENU = True") is now deprecated.

  Developers side :
  -----------------
      You should probably read the following releases notes for Django versions :
        https://docs.djangoproject.com/en/1.11/releases/1.9/
        https://docs.djangoproject.com/en/1.11/releases/1.10/
        https://docs.djangoproject.com/en/1.11/releases/1.11/

    Non breaking changes :
    ----------------------
        # Deprecations :
            - From Django 1.10 :
                - The module 'django.core.urlresolvers' is deprecated (use 'django.urls' instead).
                - In 'creme_core.models.CremeUser', 'is_authenticated()' & 'is_anonymous()' as method are deprecated (use them as property).
                - The direct assignment to the forward side of a many-to-many set is deprecated (use the method 'set()' instead).
            - From Django 1.11 :
                - The view 'django.contrib.auth.views.login()' is now deprecated ; so we use the class-based view 'LoginView'.
            - The middleware class 'creme_core.middleware.exceptions.Beautiful403Middleware' is deprecated.
            - In 'creme_core.views' :
                - The function 'exceptions.server_error()' is deprecated (use 'django.views.defaults.server_error()' instead).
                - The function 'file_handling.fetch_resources()' is deprecated (it was not used for a long time).
                - The functions 'bricks.reload_portal()' & 'bricks.render_portal_brick()' are deprecated.
            - In 'creme_core.models' :
                - In 'bricks.BlockDetailviewLocation' :
                    - The methods 'create_empty_config()' & the attribute 'ZONES' are deprecated.
                    - The method 'create()' is deprecated (use create_if_needed() instead).
                - In 'bricks.BlockPortalLocation' :
                    - The method 'create()' is deprecated (use create_or_update() instead).
                    - The method 'create_empty_config()' is deprecated.
                - The method 'bricks.BlockMypageLocation.create()' is deprecated (use 'bricks.BlockMypageLocation.objects.create()' instead).
            - In 'creme_core.forms.widgets' :
                - These functions are now deprecated : widget_render_input(), widget_render_hidden_input(), widget_render_context().
                - The method 'EnhancedSelectOptions.render_label()' is deprecated.
            - In 'creme_core.gui' :
                - The old menu API is deprecated.
                - In 'bricks' :
                    - In 'BricksManager', the methods 'get_dependencies_map()' & '_get_dependencies_ids()' are now deprecated.
                    - The attribute 'Brick.target_apps' is deprecated.
                    - The method '_BrickRegistry.get_compatible_portal_blocks()' is deprecated.
                - In 'buttons.ButtonsRegistry.register()', registering 'Button' instances is deprecated (register classes instead).
                  In all apps with global buttons instances, these ones are deprecated.
            - The method 'HistoryBrick._populate_users()' is deprecated (use 'HistoryLine.populate_users()' instead).
            - In 'creme_core.core.reminders.ReminderRegistry.register()', registering an instance is deprecated; register a class instead.
            - In 'creme_core.registry' :
                - The exception class 'NotRegistered' is now deprecated.
                - The methods 'register()' & 'get()' of 'CremeRegistry' are now deprecated.
            - In 'creme_core.templatetags' :
                - {% timedelta_pprint %} is deprecated (use {% date_timedelta_pprint %} instead).
                - In the library 'creme_bricks', in {% brick_display %}, the option "render='portal'" is deprecated.
                - In the library 'creme_menu' :
                    - The tags activated by <settings.OLD_MENU = True> are deprecated.
                    - {% get_last_items_menu %} & {% get_prefered_menu %} are deprecated (their template too).
                    - {% get_button_menu %} is deprecated (use {% menu_buttons_display %} instead).
                - {% ctype_is_registered_for_import %} (use the filter "ctype_can_be_mass_imported" (from the library 'creme_ctype') instead).
                - In the library 'creme_search', the tag {% get_search_panel %} (& is template) is deprecated.
                - The templatetags library "creme_quickforms" is deprecated.
            - In JavaScript :
               - The function 'creme.utils.confirmBeforeGo()' is deprecated.
               - In 'creme.menu' :
                 - The variable 'actions' is deprecated.
                 - The functions 'sideMenu()', 'NavIt()' & 'HNavIt()' are deprecated.
            - In all apps, the methods 'portal_display()' of Bricks are deprecated.
            - Apps :
                * Creme_config :
                    - The function 'utils.generate_portal_url()' is deprecated.
                    - In 'views.bricks' :
                        - The class-view 'PortalBricksWizard' is deprecated.
                        - The function-views 'delete_portal()' & 'edit_portal()' are deprecated.
                    - In 'forms.bricks' :
                        - The classes '_BlockPortalLocationsForm', 'BlockPortalLocationsAddForm' & 'BlockPortalLocationsEditForm' are deprecated.
                        - The method '_BrickLocationsForm._build_portal_locations_field()' is deprecated.
                * Documents :
                    - In 'views.ajax', the function 'get_child_documents()' & 'get_child_documents()' are deprecated.
                * Activities :
                    - In the view 'calendar.get_users_activities()', the URL argument "calendar_ids" is deprecated (use the GET parameter "calendar_id" instead).
                    - In 'bricks', the methods 'FutureActivitiesBrick._get_queryset_for_ctypes()' & 'PastActivitiesBrick._get_queryset_for_ctypes()' are deprecated.
                * Assistants :
                    - The method 'bricks._AssistantsBrick._get_contenttype_id()' is deprecated.
                    - All the methods '_get_queryset_for_portal()' of the Bricks are deprecated.
                    - The global variables 'reminders.reminder_alert' & 'reminders.reminder_todo' are deprecated.
                * Emails :
                    - 'bricks.SignaturesBrick' is deprecated.
        # Django 1.11 raises UnorderedObjectListWarning warnings when the pagination is made on a unordered queryset ; some models were missing a Meta.ordering.
        # A model FileRef has been added ; it provides a way to remove an old bug with deletion of model referencing files.
          The related files were automatically delete when instances were deleted, so it caused problems when the DB deletion was rollbacked.
          Now a FileRef, which references the file, is created at deletion (so it's creation is cancelled on a rollback) and the new file cleaner Job will delete these FileRef instance (& the related file).
          FileRef will be useful in the future for files created dynamically (like in export views).
        # Some template filters have been added in 'creme_core_tags' : lt, lte, gt, gte, eq.
        # The test runner now creates a mock/temporary 'settings.MEDIA_ROOT' directory. So the files created in unit tests (eg: uploaded files) are not spoiling the real 'upload/' directory.
          This temporary directory is removed at the end of tests ; there is no need to take care about deleting only the tests files any more.
        # In JavaScript :
            - The option "validator" in 'creme.dialog.FormDialog' now accepts the value "innerpopup" to continue to handle old-styled-popup HTML (<div class="in-popup" ...>)

    Breaking changes :
    ------------------
        # Deprecated stuffs which have been removed :
            - In all apps, the modules 'blocks' have been removed, & the related template files too.
            - The setting 'DEFAULT_THEME' has been removed.
            - 'creme_core.constants.PROP_IS_MANAGED_BY_CREME' & 'creme_core.constants.ICON_SIZE_MAP' have been removed.
            - The method 'CremeAppConfig.register_blocks()' is no called automatically anymore.
            - These modules have been removed: gui.block, gui.icon_registry, models.block & views.blocks.
            - The variable 'creme_core.urls.blocks_patterns' has been removed
            - In 'creme_core.models' :
                - The field 'SettingValue.user' has been removed.
                - These methods have been removed : CremeEntity.populate_fk_fields(), BlockDetailviewLocation.create_4_model_block(),
                  CustomBlockConfigItem.id_from_block_id(), BlockState.get_for_block_id(), BlockState.get_for_block_ids() & SettingValue.create_if_needed().
                - These properties have been removed : BlockMypageLocation.block_verbose_name, InstanceBlockConfigItem.block & BlockState.classes.
            - In 'creme_core.views' :
                - These functions have been removed :
                    - generic.listview.list_view_popup_from_widget().
                    - creme_property.reload_block().
                    - entity.bulk_edit_field() (use 'bulk_update_field()' instead).
                    - list_view_export.dl_listview_header().
                    - quick_forms.json_quickform_response().
                    - relation.objects_to_link_selection().
                    - search.reload_block().
                - These arguments have been removed :
                    - "entity1_id" in 'entity.select_entity_for_merge()'.
                    - "entity1_id" & "entity2_id" in 'entity.merge()'.
                    - "ct_id" & "include_all" in 'entity_filter.get_for_ctype()'.
                    - "ct_id" in 'header_filter.get_for_ctype()'.
                    - "ct_id" & "doc_type" in 'list_view_export.dl_listview()'.
                    - "count" in 'quick_forms.add_from_widget()'.
                    - "relations_types" in 'relation.add_relations_bulk()'.
                - In 'creme_core.forms' :
                    - The fields 'CremeDateField', 'CremeTimeField' & 'CremeDateTimeField' have been removed.
                    - The support for non-iterable values as "allowed_models" argument for the property '[Multi]GenericEntityField.allowed_models' has been removed.
                    - The argument "choices" of 'fields.DatePeriodField.__init__()' has been removed.
                    - The method 'merge.MergeField.set_merge_initial()' has been removed.
                - In 'creme_core.gui' :
                    - In 'bricks':
                        - The method 'get_block_template_context()' of 'Brick/PaginatedBrick/QuerysetBrick' has been removed.
                        - The method 'BricksManager.block_is_registered()' has been removed.
                        - In _BrickRegistry :
                            - These methods have been removed : get_blocks(), get_block_4_instance(), get_block_4_object(), get_compatible_blocks().
                            - The possibility to register instances with 'register()' & register_4_model()' has been removed.
                            - The possibility to register a brick class which has an ID with 'register_4_model()' has been removed.
                    - In 'fields_config.FieldsConfigRegistry', the  method 'is_model_valid()' & the property 'ctypes' have been removed.
                    - In 'field_printers' these methods have been removed: simple_print(), print_image(), print_boolean(), print_urlfield(), print_foreignkey(), print_many2many().
                    - The method 'icons.IconRegistry.get()' has been removed.
                - In 'creme_core.templatetags' :
                    - The libraries 'creme_block' & 'creme_queryset' have been removed.
                    - In the library 'creme_widgets' :
                        These tags have been removed : {% get_image_for_ctype ... %}, {% get_image_path_for_ctype ... %} & {% get_image_for_object ... %}.
                        These tags (& their related template file) have been removed :
                            {% get_add_button %}, {% get_edit_button %}, {% get_delete_button %}, {% get_restore_button %}, {% get_clone_button %}.
                        - The functions '_get_image_path_for_model()' & '_get_image_for_model()' have been removed.
                    - In the library 'creme_listview', the tag {% get_listview_cell %} have been removed.
                - In bricks.PropertiesBrick, the variable "ct_id" is not injected anymore in the template context.
                - These template files of 'creme_core' have been removed :
                    templatetags/blocks_dependencies.html, generics/blockform/add_popup2.html, batch_process_report.html, importing_report.html .
                - The context processor 'creme.creme_core.context_processor.get_blocks_manager' has been removed.
                - These functions of 'creme_core.utils' have been removed:
                    is_testenvironment(), imports.find_n_import(), media.get_current_theme_vb(), meta.get_instance_field_info().
                - The button 'creme_core.buttons.MergeEntitiesButton' (& the related template too) have been removed.
                - In JavaScript :
                    - These functions have been removed : creme.component.is(), creme.object.isempty(), creme.object.isnone().
                    - In 'creme.utils', these functions have been removed :
                        innerPopupNReload(), toggleCheckallState(), autoCheckallState(), decorateSearchResult(), getBlocksDeps().
                    - The module 'creme.blocks' has been removed.
                    - In 'creme.exports.exportAs()' the URL cannot be a format string anymore.
                    - In 'creme.lv_widget', these functions have been removed : deleteEntityFilter(), deleteHeaderFilter().
                    - The function 'creme.merge.selectOtherEntityNRedirect()' has been removed.
                    - In 'creme.relations.addRelationTo()', the option "blockReloadUrl" & the hard-coded URLs support have been removed.
                - In 'creme_core.tests.base._CremeTestCase', the methods 'populate()' & 'build_bulkedit_url()' have been removed.
            - Apps :
                * Creme_config :
                    - In registry.AppConfigRegistry, the method 'register_block()' & the property 'blocks' have been removed.
                    - In registry._ConfigRegistry :
                        - The methods 'register_blocks()' & 'register_userblocks()' & property 'userblocks' have been removed.
                        - In the methods 'register_bricks()' & 'register_user_bricks()', the support of registering instances (instead of classes) has been removed.
                    - The modules 'views.blocks' & 'forms.blocks' have been removed.
                    - These views has been removed :
                        - bricks.add_portal(), bricks.add_custom_block() & bricks.add_ctypes_2_relation_block().
                        - button_menu.add().
                        - fields_config.add().
                        - generics_views.reload_block() & generics_views.swap_order().
                        - user_role.add() & user_role.edit().
                        - setting.reload_block().
                    - The form classes 'user_role.UserRoleCreateForm' & 'user_role.UserRoleEditForm' have been removed.
                    - The function 'forms.fields_config._get_fields_enum()' has been removed.
                    - The templatetags {% import_usersettings_blocks %} & {% do_usersettings_blocks_displayer %} have been removed.
                    - These template files have been removed : creme_config/custom_fields/*.html & creme_config/blocks_portal.html.
                    - The variable 'urls.blocks_patterns' has been removed.
                * Documents :
                    - The argument 'count' has been removed in these views of 'quick_forms' : 'abstract_add_doc_from_widget()', 'add_csv_from_widget()'.
                    - In Bricks, these variable are not injected anymore : FolderDocsBrick (variable "ct_id"), LinkedDocsBrick (variable "ct_doc").
                * Persons :
                    - The function 'models.contact._create_linked_contact()' has been removed.
                    - In ManagersBrick, the variable "ct" is not injected anymore.
                * Activities :
                    - These modules have been removed : 'views.blocks' & 'forms.blocks'.
                    - These template files have been removed : 'templatetags/activity_date.html' & 'templatetags/activity_relations_field.html'.
                    - The method 'AbstractActivity.count_lines_display_block()' has been removed.
                    - The templatetag library 'activities_tag' has been removed.
                    - In the view function of views.activity.download_ical(), the argument "ids" has been removed.
                    - In JavaScript :
                        - The function 'creme.activities.calendar.filterEvents()' has been removed.
                        - In 'creme.activities.exportAsICal()' & 'fullCalendar()', the support of implicit "url" has been removed.
                * Assistants :
                    - The JavaScript function 'creme.assistants.validateEntity()' has been removed.
                    - In all Bricks, the variable "ct_id" is not injected anymore.
                * Products :
                    - The class 'forms.fields.CategorySelector' has been removed.
                * Billing :
                    - These methods of 'models.Base' have been removed : product_lines(), service_lines(), _build_lines(), get_*_lines_total_price_*_of_tax().
                    - The method 'models.TemplateBase.build()' has been removed.
                    - The template file 'frags/generic_billing_line_frag.html' has been removed.
                    - The templatetag library 'latex' has been removed.
                    - In these Bricks, some variable are not injected anymore : CreditNotesBrick (variable "ct"), PaymentInformationBrick (variable "ct_id"), BillingPaymentInformationBrick (variable "ct_id").
                    - The 'billing_register' feature has been removed.
                    - These JavaScript functions have been removed : multiSaveLines(), selectDefaultPayment(), convertAs(), redirect(), reload().
                * Commercial :
                    - These functions in 'views.strategy' have been removed : _reload_matrix(), reload_assets_matrix(), reload_charms_matrix(), reload_assets_charms_matrix().
                    - These templatetags have been removed :
                        - {% get_segments_for_category %}, {% widget_segment_category %}, {% widget_asset_score %} & {% widget_charm_score %}.
                        - In these bricks, the variable "ct_id" is not injected anymore : AssetsBrick, CharmsBrick & ActObjectivesBrick.
                        - These templates files have been removed : 'templatetags/widget_score.html', 'templatetags/widget_category.html'.
                        - These JavaScript functions have been removed : postCategory(), increaseObjectiveCounter() & postScore().
                * Opportunities :
                    - In these Bricks, the variable "ct" is not injected anymore : _LinkedStuffBrick (& child classes), TargettingOpportunitiesBrick.
                    - In _LinkedStuffBrick (& child classes), the class attribute "_model" has been removed.
                * Reports :
                    - The modules have been removed: 'views.blocks' & 'forms.blocks'.
                    - These functions have been removed : views.report.change_field_order() & views.graph._check_order().
                    - The "order" parameter has been removed in these views: graph.fetch_graph() & graph.fetch_graph_from_instanceblock().
                    - These JavaScript functions have been removed : changeOrder(), unlink_report(), setSelected(), doAjaxAction() & openGraphEdition()
                * Emails :
                    - In views:
                        - The functions 'crudity.reload_sync_blocks()' & 'sending.reload_block_mails()' have been removed.
                        - In 'crudity.synchronisation()' the template variable "entityemail_ct_id" is not injected anymore.
                    - These template files have been removed :  'templatetags/_block_synchronization.html' &  'frags/ajax/synchronize.html'.
                    - In these Bricks, the variable "ct_id" is not injected anymore : EmailRecipientsBrick & MailsBrick.
                    - These JavaScript functions have been removed: allowExternalImages(), confirmResend() & resend().
                * Geolocation :
                    - These arguments of views have been removed :
                        - set_address_info() (the argument "address_id").
                        - get_addresses_from_filter() (the argument "filter_id").
                        - get_neighbours() (the arguments "address_id" & "filter_id").
                    - In JavaScript, the fallback to hard-coded URLs have been removed in : AddressesBlock, PersonsNeighborhoodBlock & GoogleMapController.
                * Crudity :
                    - The setting CREME_GET_EMAIL_JOB_USER_ID has been removed.
                    - These functions in 'views' have been removed: actions.fetch(), actions._fetch(), actions.reload_block(), history.reload().
                    - In views.history.history(), the context variable "blocks" is not injected anymore.
                    - The method registry.FetcherInterface.add_fetcher() has been removed.
                    - These global variables have been removed :
                        - In 'buttons' : infopath_create_form_button & email_template_create_button.
                        - In 'fetchers.pop' : pop_fetcher.
                        - in 'inputs.email' : create_email_input & create_infopath_input.
                    - These template files has been removed : 'frags/ajax/waiting_actions.html' & 'waiting_actions.html'.
                * Polls :
                    - The templatetag {% print_node_chart %} has been removed.
                    - In these Bricks, some variables are not injected anymore :
                        - PollFormLinesBrick ("line_ct_id" & "section_ct_id").
                        - PollRepliesBrick ("ct_reply").
                        - _RelatedRepliesBrick & its child classes ("ct_reply").
                    - The template file 'polls/templatetags/stats_pollreply_chart.html' has been removed.
                * Projects :
                    - The module 'views.utils' has been removed.
                    - The template files 'projects/frag_task_delay_td.html' has been removed.
                * Sms :
                    - The function 'views.sending.reload_block_messages()' has been removed.
                    - In RecipientsBrick, the variable "ct_id" is not injected anymore.
        # Changes caused by Django 1.9 :
            - If a 'simple_tag' returns HTML, the result will be escaped if it is not mark_safe()'ed. The best way is to use 'format_html()' & 'format_html_join()' (the result is escaped, so marked as safe).
            - In templates, using _() on a classical-format string (with "%s") does not work like before, & should be avoided (because it returns a string with "%%s").
              The new way is to use {% trans %}/{% blocktrans %}, & regenerate the related PO files
              (notice that in the .po file, 'msgid/msgstr' will use "%%s", but the string returned by 'gettext()' will contain a simple "%s").
            - CharFields in forms strip their content by default.
            - The import of some models is done later (ie import in function code, not module root).
            - If you create your own model field inheriting ForeignKey/OneToOneField, you cannot set a model during migration for 'to' attribute.
            - If you import the module 'creme_config.registry', the import should be done after all the app configs are ready (eg: importing within a view function) in order to avoid errors.
            - Django 1.9 does not like '/' at the beginning of URL regex (it says it's useless, but it can be useful in some rare cases).
            - The MIMEtype of e-mail attachments is now set.
        # Changes caused by Django 1.10 :
            - The method 'Command.execute()' will crash if all arguments do not receive a value (use 'django.core.management.call_command()' instead).
            - The variable 'django.utils.http.PROTOCOL_TO_PORT' has been removed (seems not documented).
        # Changes caused by Django 1.11 :
            - The rendering of form-widgets has changed ; the compatibility with existing 'render()' methods does not always work.
              So you should use the new template-based system instead (it's what have been done in Creme -- see below).
            - The method 'Widget.format_output()' has been removed (a custom widget template should be used instead).
            - The arguments of 'creme_core.forms.bulk.BulkFieldSelectWidget.build_attrs()' have changed to follow the Django 1.11 signature.
            - In unit tests, (fake) e-mails are not sent when the recipient is empty anymore.
        # Most of libraries have been upgraded :
            - 'bleach' 1.4.X => 2.1.X.
            - 'xlrd' : 0.9.X => 1.1.X
            - 'xlwt' 1.0.X => 1.3.X.
            - 'Pillow' : 3.4.X => 5.X.
            - 'pygraphviz' : 1.1.X => 1.3.X.
        # In settings :
            - 'MIDDLEWARE_CLASSES' has been removed & replaced by 'MIDDLEWARE'.
            - The default settings 'LOGIN_REDIRECT_URL' & 'LOGIN_URL' use now named URLs.
            - The setting 'LOGOUT_URL' has been removed, because Django (1.10) removed it too (it was unused anyway).
            - The settings which were tuples are now lists (like in Django 1.9 global_settings), excepted 'COPY_MEDIA_FILETYPES' which is now a 'set'.
            - The middleware "django.middleware.security.SecurityMiddleware" has been added in the default configuration ; it probably won't be a problem excepted on very specific install.
            - Beware 'formtools' has been added in 'INSTALLED_DJANGO_APPS'.
            - The logging configuration have slightly changed (formats of messages are different).
        # Using a method 'register_setting_key()' in a class inheriting CremeAppConfig is deprecated ; rename it 'register_setting_keys()'.
        # In views of all apps, the content-type of the response have been cleaned ; it probably does not break anything (or only unit tests).
            - In views which return JSON data with "text/javascript" as content_type, the content_type is now "application/json" (many of these views use creme_core.utils.jsonify()).
            - Lots of responses, with "text/javascript" as content_type, & which return a empty/string/HTML-fragment content,  have now  "text/html' as content_type.
              It probably only break unit tests.
        # In 'creme_core.models' :
            - The class attribute 'CremeModel._delete_files' has been removed ; override the methods _delete_stored_file()/_delete_stored_files() to customise the behaviour.
            - The field 'CremeAbstractEntity.is_actived' has been removed (so it's removed from 'CremeEntity' & 'Relation').
            - The fields "block_id" of the following models (in 'bricks') have been renamed to "brick_id" :
                BlockDetailviewLocation, BlockPortalLocation, BlockMypageLocation, RelationBlockItem, InstanceBlockConfigItem, BlockState.
            - In the method 'BlockDetailviewLocation.id_is_4_model()', the argument "block_id" is renamed "brick_id".
        # In 'creme_core.views' :
            - The view 'search.search()' injects now a variable "bricks" instead of "blocks" ;
              the related template 'creme_core/search_results.html' has changed to use "bricks".
            - In 'list_view_export.dl_listview()' (backported to 1.7.3) :
                - The GET argument "hfilter" is now mandatory (last list-view state is no longer used as fallback).
                - The attribute "extra_q" of the list-view state is not read any more ; the GET argument "extra_q" is used instead.
            - The view 'batch_process.batch_process()' does not use the GET argument "list_url" anymore ; it uses the GET argument "efilter" instead.
        # In 'creme_core.forms' :
            - The method 'mass_import.ImportForm.append_error()' only takes the argument "err_msg" now (there were 3 arguments).
            - The behaviour of the merge form with ManyToManyFields has been fixed ; the many to many data are changed during the save(), & not during the clean() anymore.
            - The behaviour of the bulk/inner edition with ManyToManyFields has been fixed ; the many to many data are changed during the save(), & not during the clean() anymore.
            - The rendering of widgets have been heavily reworked to use templates :
                - The methods 'format_output()' have been removed in the following class of 'widgets' : DatePeriodWidget, DurationWidget, OptionalWidget, DateRangeWidget.
                - In 'widgets.DateRangeWidget.render()', passing an attributes "render_as" not in {'table', 'ul'} will raise an exception ("template not found"). You can define your own type of render by creating a template file.
                - These methods of 'widgets.UnorderedMultipleChoiceWidget' have been removed: _render_header_filter(), _render_header(), _render_body(), _render_counter(), _render_viewless(), _render_footer().
                - If you inherit 'widgets.EnhancedSelectOptions' :
                    - It should be before the parent Widget class in the parents list.
                    - These methods have been removed : render_enchanced_option(), is_choice_selected(), render_enhanced_choice().
                - The method 'header_filter.EntityCellsWidget._build_render_context()' has been removed.
                - In 'mass_import.ExtractorWidget' :
                    - The base class changed from 'SelectMultiple' to the new class 'BaseExtractorWidget' (which inherits directly Widget).
                    - The method '_render_select()' has been removed.
                - In 'mass_import.EntityExtractorWidget', the methods '_render_line()' & '_render_column_select()' have been removed.
            - The attribute 'filtertype' of 'widgets.UnorderedMultipleChoiceWidget' now raises a ValueError if the given value was invalid (so a breaking indicates an existing bug).
        # The constructors of the following classes take an additional argument "model" : EntityCellActions, EntityCellFunctionField, EntityCellRelation, EntityCellVolatile.
        # The arguments of 'creme_core.utils.html.filter_img_src()' have change (to follow the API changes in 'bleach').
        # In 'creme_core.gui' :
            - The different registries from sub-modules are not imported in the package anymore.
            - In the method 'buttons.ButtonsRegistry.register()', when an ID is duplicated, an exception is raised now (there was only a log message).
            - In 'bricks' :
                - The method 'Brick.get_template_context()' does not inject "base_url" in the context anymore.
                - About the method 'Brick._build_template_context()' :
                    - It does not inject "block_name" in the context anymore (use "brick_id" instead).
                    - These arguments have been renamed :
                        - 'block_name'    became 'brick_id'.
                        - 'block_context' became 'brick_context'.
                - In 'SpecificRelationsBrick', the context variable "colspan" is not injected anymore.
                - About the class 'InstanceBlockConfigItem' :
                    - In the method 'generate_id()', the argument "block_class" is renamed "brick_class".
                    - In the methods 'id_is_specific()' & 'get_base_id()', the (only) argument has been renamed 'brick_id'.
        # The templatetag {% verbose_modifications %} (from 'creme_core_tags') has been renamed/moved as {% history_modifications %} (in 'creme_history').
        # In the templates of 'creme_core' :
            - In the template file 'detailview.html' (& so in 'generics/view_entity.html'):
                - The {% block %} "button_tab" & "extra_menu_buttons" have been removed (use {% block instance_buttons %} instead).
                - The CSS class "is_deleted" is not set anymore (it's done in 'generics/view_entity.html').
            - Some template files have been renamed :
                - 'batch_process.html'      has moved to 'forms/batch-process.html'.
                - 'entity_filter_form.html' has moved to 'forms/entity-filter.html'.
                - 'header_filter_form.html' has moved to 'forms/header-filter.html'.
                - 'merge.html'              has moved to 'forms/merge.html'.
            - The template 'creme_core/entity_cells_widget.html' has been removed (replaced by 'creme_core/forms/widgets/entity-cells.html').
        # In the following apps, the buttons template files have been moved (from 'templatetags/' to 'buttons/') & renamed :
            activities, billing, commercial, emails, opportunities, persons, tickets, vcfs.
        # Some unused images have been removed.
        # Lots of useless CSS rules have been removed.
        # In JavaScript :
            - The functions 'creme.utils.blocks_deps()' & 'creme.blocks.bindEvents()' have been removed.
            - The function 'creme.forms.toImportField()' takes now a second argument (the query to get the element to hide).
            - The option "compatible" of 'creme.dialog.Dialog' has been removed.
        # In 'creme_core.tests' :
            - The class attribute '_CremeTestCase.clean_files_in_teardown' has been removed ; you should remove it from your own TestCase classes because it is not used anymore.
            - These fields of test models have been renamed :
                - 'FakeDocument.folder' is now "linked_folder".
                - 'FakeInvoiceLine.invoice' is now "linked_invoice".
        # Apps :
            * Creme_config :
                - The validation of Users passwords is now stronger by default in the forms ; it could break some unit tests, or external programs which create users.
                - The URL '/creme_config/my_settings' has changed to '/creme_config/my_settings/portal'(internally you should use its name "creme_config__user_settings" anyway).
            * Documents :
                - The field 'models.AbstractDocument.folder' has been renamed "linked_folder".
                - The related name of 'AbstractFolder.parent_folder' has been changed from "parent_folder_set" to "children".
            * Activities :
                - In 'forms.mass_import' :
                    - The classes 'ParticipantsExtractorWidget' & 'SubjectsExtractorWidget' inherit now the new class 'BaseExtractorWidget'.
                    - In the method 'SubjectsExtractorWidget.value_from_datadict()', the key "column_index" has been replaced by "selected_column".
                    - In 'ParticipantsExtractorWidget' :
                        - In the POSTed values '{name}_colselect' became '{name}_pattern_colselect'.
                        - In the return value of the method 'value_from_datadict()' "column_index" became "pattern_column_index".
                - The JavaScript function 'creme.activities.calendar.fullCalendar()' has been modified to pass calendar IDs as GET arguments.
            * Assistants :
                - The argument "user" of 'bricks._AssistantsBrick._populate_related_real_entities()' has been removed.
            * Products:
                - The class 'forms.base._BaseCreateForm' has been removed ; the classes 'forms.product.ProductCreateForm' & 'forms.service.ServiceCreateForm' have been adapted.
                - The class 'forms.mass_importCategoriesExtractorWidget' now inherits 'BaseExtractorWidget'.
            * Billing :
                - In JavaScript :
                    - The function 'creme.billing.updateBlockTotals()' has been renamed "updateBrickTotals()".
                    - In tne function 'creme.billing.markDelete()' :
                        - The second (on 3) argument "ct_id" has been removed.
                        - The CSS class "block_header_line_dark" is not set anymore.
            * Reports :
                - The field 'models.AbstractReportGraph.report' has been renamed "linked_report".
                - The field 'models.FakeReportsDocument.folder' has been renamed "linked_folder".
                - The method 'forms.report.ReportHandsWidget._build_render_context()' has been removed.
                - The template 'reports_hands_widget.html' has been removed (replaced by 'forms/widgets/report-hands.html').
            * Geolocation :
                - The templatetag library 'geolocation' has been renamed 'geolocation_tags'.
                - The templatetag 'format_distance' has been renamed 'geolocation_distance'.
                - The CSS rules "block-geoaddress-*" have been renamed "brick-geoaddress-*" in HTML/CSS/JavaScript.
                - The following JavaScript classes have been renamed :
                    - 'creme.geolocation.PersonsBlock'             became 'creme.geolocation.PersonsBrick'.
                    - 'creme.geolocation.AddressesBlock'           became 'creme.geolocation.AddressesBrick'.
                    - 'creme.geolocation.PersonsNeighborhoodBlock' became 'creme.geolocation.PersonsNeighborhoodBrick'.
            * Emails :
                - The following models fields are now 'blank=False' (blank was useless because these fields are not editable):
                  _Email.reads, _Email.sending_date, _Email.reception_date, AbstractEntityEmail.identifier, EmailSending.signature.
            * Crudity :
                - The field 'models.WaitingAction.data' has been renamed "raw_data".
                - The method 'models.WaitingAction.set_data()' now assigns the data & returns nothing.
                - The method 'registry.CRUDityRegistry.get_backend()' raises now 'CRUDityRegistry.RegistrationError' exceptions (it raised 'creme_core.registry.NotRegistered').
                - In 'backends.models.CrudityBackend' :
                    - The methods 'get_rendered_buttons()' & 'add_buttons()' have been removed.
                    - The attribute 'buttons' has been removed.
                    - The class attribute 'blocks' has been replaced by 'brick_classes' (which has a different default value).
                - In 'inputs.base.CrudityInput' :
                    - The method 'register_buttons()' has been removed.
                    - The attribute '_buttons' has been removed.
                    - The attribute 'backends' has been renamed '_backends'.
                - In 'bricks.WaitingActionsBrick' & 'bricks.CrudityHistoryBrick', the variable "title" is not injected in the context anymore.
                - The classes in 'buttons' have been removed (InfopathCreateFormButton, EmailTemplateCreateButton).
            * Events :
                - In the dictionary returned by 'AbstractEvent.get_stats()', the id "invations_count" has been renamed "invitations_count".
            * Polls :
                - These templatetags have been renamed :
                    - print_line_condition -> poll_line_condition
                    - print_node_number -> poll_node_number
                    - print_node_css -> poll_node_css
            * Projects :
                - The field 'models.AbstractProjectTask.project' has been renamed "linked_project".

    Internal breaking changes :
    ---------------------------
    (they should not cause problem if you have not deeply modified the source code of Creme)

        # The method 'CremeCoreConfig.hook_widget_render()' has been removed.
        # In 'creme_core.constants' SETTING_BLOCK_DEFAULT_STATE_IS_OPEN & SETTING_BLOCK_DEFAULT_STATE_SHOW_EMPTY_FIELDS are now deprecated
          (use SETTING_BRICK_DEFAULT_STATE_IS_OPEN & SETTING_BRICK_DEFAULT_STATE_SHOW_EMPTY_FIELDS instead).
        # The middleware classes (in 'creme_core.middleware' & 'mediagenerator.middleware') now inherit 'django.utils.deprecation.MiddlewareMixin'.
        # In 'creme_core.models' :
            - The fields 'bricks.RelationBlockItem.json_cells_map' & 'CustomBlockConfigItem.json_cells' cannot be 'null' anymore (a default value has been added).
            - The attribute 'bricks.InstanceBlockConfigItem._block' has been renamed to "_brick".
        # In 'creme_core.views' :
            - The method 'search.FoundEntitiesBrick.parse_block_id()' is replaced by 'parse_brick_id()'.
            - The method 'creme_property.TaggedEntitiesBrick.parse_block_id()' is replaced by 'parse_brick_id()'.
        # In 'creme_core.forms.widgets' :
            - These methods of 'SelectorList' have been removed: _render_action(), _render_actions().
            - The method '_render_inputs()' of 'ChainedInput' & 'PolymorphicInput' have been removed.
            - The class 'CremeRadioFieldRenderer' has been removed (because 'django.forms.widgets.RadioFieldRenderer' has been removed).
        # The attribute 'creme_core.buttons.ButtonsRegistry._buttons' has been renamed to "_button_classes".
        # The JavaScript widget 'creme.widget.DateRange' has been entirely reworked.
        # Apps :
            * Creme_config :
                - The variable 'templatetags.creme_config_tags._USER_SETTINGS_BLOCK' has been removed.
            * Activities :
                - The function 'views.calendar._get_one_activity_per_calendar()' is now a generator.
            * Reports :
                - The global variable 'views.report._order_direction' has been removed.
                - The tag 'templatetags.reports_tags.report_chart_json()' does not take the context any more.
                - In 'forms.report', the constructors of the following classes take an additional argument "model" :
                    _EntityCellRelated, _EntityCellAggregate, _EntityCellCustomAggregate.


== Version 1.7 ==

  Users side :
  ------------
    # A new page header has been created ; it contains a new main menu which replaces the old main menu on the left side.
        - Menu entries are now grouped by features, and not by app anymore ; the creation entries are grouped together.
        - This new menu manages the user info, the log-out entry, the last viewed items, the trash.
        - The global search is now integrated to this header, and propose quick results (but the complete results are proposed too).
        - The old menu is still available (by configuration), but it will probably be removed in Creme 1.8.
    # A Job (ie: background process) system has been added.
        - A Job can be spawned by users (JobType.NOT_PERIODIC) in order to safely manage a long server work
          (no web-server timeout, resume on failure, true results page when the task is finished, process limitation...).
        - The system Jobs are run periodically (JobType.PERIODIC), and can be woke up by user events (JobType.PSEUDO_PERIODIC).
          It avoids to have to setup a cron task (or worse under Windows systems...) which runs django commands ;
          & we get a GUI to enable/disable the job, and configure its periodicity. The possibility to refresh the wake up date
          allows very accurate execution (with a cron based execution the precision depends on the task periodicity).
          The results page is also better than server logs.
      Mass import (ie; CSV/XLS import) & batch process use now jobs.
      The command 'reminder' has been replaced by a Job too (see "Apps" section for apps commands changes).
    # The list-views have been improved :
        - The header scrolls in order to always be visible.
        - The UI for actions has been improved.
        - The ordering management has been improved :
            - The ordering is built by using the DB-indexes of the model in order to be as efficient as possible.
            - When a model use several fields for its default ordering (eg: Contact uses last_name+first_name),
              all related direction (ASC/DESC) are inverted together (it's more logic & queries are faster).
            - ManyToManyFields columns are not sortable anymore ; it was probably confusing, slow & annoying for some future performance improvements.
        - When there are too many entities in the current list, a fast mode is used (see settings.FAST_QUERY_MODE_THRESHOLD) :
            - A new type of paginator is used. It does not allow to go to random page (only next & previous page are available),
              but it avoids/limits SQL's OFFSET whenever it's possible.
            - If no optimal ordering is found (not related SQL index), simpler ordering is used.
        - In the main SQL queries, the DISTINCT directive has been removed in simple cases to go fast.
        - When there is no filter or search, the COUNT query (to display the total number of entities) is fast because we avoid a JOIN.
        - All the parameters (view, filter, search...) are stored in the URI as argument, which is useful for bookmarking for example.
        - Two settings to customise the page sizes have been added : PAGE_SIZES & DEFAULT_PAGE_SIZE_IDX.
    # The blocks system has been heavily reworked (they are called 'bricks' now in the code, because 'block' was confusing because of templates {% block %}).
      Most of the changes are under the hood (& so concern the developers) ; nevertheless many improvements are still visible to the end-users :
        - The global look & feel is much better ; the layout of many blocks have been reworked.
        - The blocks provide now a menu when you click on their icon ; it's the new way to collapse the blocks
          (instead of clicking of the block's header) & it allows some blocks to be directly configured without using the global blocks configuration.
        - The title bar is now a block. So it can be reloaded if some changes happen, & alternative bricks can be proposed (like the new "Card" blocks).
        - The reloading system is now smarter :
            - The page needs to be entirely reloaded less often.
            - It avoids some old strange (but generally not noticed) behaviours.
    # The UI has been improved :
        - The 2 themes have been heavily reworked.
        - The login page is faster & theme agnostic ; so do the error pages.
        - The page footer is nicer & displays more information.
        - An "About" page has been created.
    # Creme uses now named URLs everywhere in its code ; so it can be deployed in a sub-domain.
    # In the History, DateFields/TimeFields/DateTimeFields/FloatFields are better managed : old & new values are displayed now.
    # In EntityFilters, the ManyToManyFields have now the operator "is empty".
    # The errors of mass import can be downloaded as a file now (thanks to the new job results page) ;
      it contains the lines with erroneous data, and with an additional column with the error messages.
    # A new (home) block "Statistics", which regroups statistics from several apps, has been added.
    # The inner-popup dialogs have been improved :
        - The "escape" key closes the dialog.
        - When a dialog is closed, the page scrolls back to the opening position.
    # In forms, entities can be created in the multi-selection widgets (if a quick-form is available for this kind of entity).
    # The Merge feature has been improved :
        - The entities can now be merged from the list-view.
        - The widgets to select entities have been improved in the merge view (the "disabled" state works, so does the copy feature).
    # On the 'Relationships' block, the button "Delete all relationships" has been removed.
    # The XLS export backend has been improved, to be more robust against concurrent accesses.
    # Apps:
        * Documents :
            - The models Image & Document have been merged ;
              the model Image is removed & the existing instances are transformed into Document instances.
            - The forms of Document have been improved :
                - The file is now written during the 'save' step, not the 'clean' one.
                - The field 'title' is not required in the creation forms any more ; if the user does not fill it, the filename is used.
        * Persons :
            - Contacts & Organisations get a "Card" brick (use in the new install) to replace the classical title bar in their detail-views.
            - A new field has been added to Organisation in order to mark them as managed by Creme (instead of a CremeProperty).
            - An EntityFilter for Contacts has been added : "Me".
            - The model Contact & Organisation have new indexes which correspond to their default list-views,
              in order to improve the performances of the classical use.
        * Creme_config :
            - Several forms are wizards now :
                - It allows smarter creation forms. Eg: no need to edit an empty custom block just after its creation.
                - The UserRole forms is more friendly. Eg: it only proposes apps to administrate among the allowed apps.
            - The ContentTypes are now filtered in the credentials form (only entity types related to allowed apps are proposed) ; the credentials can now be edited.
        * Activities :
            - An EntityFilter for Activities has been added : "In which I participate".
            - In Activity forms :
                - The field "Users to keep informed" can now be removed by configuration (not displayed by default).
                - The fields for your own participation has been improved (now 1 field instead of 2).
                - The fields for Alerts have been improved.
        * Billing :
            - Inline billing-line form has been improved (user & dev sides) ; errors in the form are better managed.
              Eg: the name of the related item is checked (cannot be empty) on new line & the errors are detected as soon as inputs are modified, not leaved.
            - The PDF generation has been improved ; the concurrent creation of temporary file has no more collision.
              The auxiliary files are now deleted when the PDF is OK.
            - Some small information leaking in FunctionFields have been fixed ; you could get the total of Invoices/Quote which you cannot view.
        * Products :
            - Products & Services can no be imported from CSV/XLS files.
            - The possibility to create Category/SubCategory directly in the forms of Product & Service.
        * Opportunities :
            - Opportunities get a "Card" brick (use in the new install) to replace the classical title bar in their detail-views.
        * Assistants :
            - The Reminders for ToDos & Alerts send now their emails to the related users.
            - The command 'usermessages_send' has been replaced by a job.
        * Emails :
            - The commands are now jobs.
            - The HTML body of Emails does not support links to 'Image' entities anymore (use external images instead).
        * Geolocation :
            - The possibility to use your Google API key has been added.
        * Projects :
            - The model Project has now a field 'currency', which is used to display costs.
            - The color of the related TaskStatus is displayed if the 'tasks' block.
            - The color of the related ProjectStatus is displayed in the list-view of Projects.
        * Commercial :
            - The command 'com_approaches_emails_send' has been replaced by a job.
        * Crudity :
            - The command 'crudity_synchronize' has been replaced by a job.
            - Beware: the owner of WaitingAction, History or EntityEmail instances can be different (compared to Creme 1.6)
              when the email sender does not correspond to a User/Contact.
        * Recurrents :
            - The command 'recurrents_gendocs' has been replaced by a job.
        * Events :
            - The form for Event has been improved : 'end' must be after 'start'.
        * Activesync :
            - This app is deprecated ; it is not in the default install any more.
              It will probably be removed in the next release if nobody works on it.
            - A job which does the synchronisation has been added ; the commands are still available, for debugging purpose.

  Developers side :
  -----------------
    Non breaking changes :
    ----------------------
        # Deprecations :
            - The setting DEFAULT_THEME (use THEMES[0](0] instead).
            - creme_core.apps.CremeAppConfig.register_blocks() has been renamed 'register_bricks()' ; if you inherit this class,
              your old method 'register_blocks()' will still be automatically called at started (but it is deprecated, & you should rename it).
            - In all apps :
                - The module '*.blocks' is deprecated (use '*.bricks' instead).
                - The template files '*/templatetags/block_*.html' are now deprecated (new templates are generally in '*/bricks/').
            - These modules :
                - creme_core.gui.block (use 'creme_core.gui.bricks' instead).
                - creme_core.gui.icon_registry (use 'creme_core.gui.icons' instead).
                - creme_core.models.block (use 'creme_core.models.bricks' instead).
                - creme_core.views.blocks (use 'creme_core.views.bricks' instead).
            - In 'creme_core.constants' :
                - PROP_IS_MANAGED_BY_CREME (the related CremePropertyType is not created in new instances, & is deletable in old ones).
                - ICON_SIZE_MAP.
            - In 'creme_core.models' :
                - CremeEntity.populate_fk_fields() (use 'creme_core.utils.db.populate_related()' instead).
                - BlockDetailviewLocation.create_4_model_block() (use 'create_4_model_brick()' instead).
                - BlockPortalLocation.block_verbose_name (use 'brick_verbose_name' instead).
                - BlockMypageLocation.block_verbose_name (use 'brick_verbose_name' instead).
                - InstanceBlockConfigItem.block (use 'brick' instead).
                - CustomBlockConfigItem.id_from_block_id() (use 'id_from_brick_id()' instead).
                - BlockState :
                    - The property 'classes' (use the templatetag 'creme_bricks.brick_state_classes' instead).
                    - get_for_block_id() (use 'get_for_brick_id()' instead).
                    - get_for_block_ids() (use 'get_for_brick_ids()' instead).
                - SettingValue.create_if_needed() (use 'SettingValue.objects.get_or_create()' instead).
                - The field 'SettingValue.user' (use the new 'UserSettingValueManager' system instead -- ie: user.settings).
                  BEWARE: if your UserSettingValue is not hidden, it can be viewed/edited in "My settings".
            - creme_core.urls.blocks_patterns
            - In 'creme_core.views' :
                - generic.listview.list_view_popup_from_widget().
                - creme_property.reload_block() (use 'reload_bricks()' instead).
                - entity.bulk_edit_field() (use 'bulk_update_field()' instead.
                - In 'entity.select_entity_for_merge()' the argument 'entity1_id' (use the GET parameter 'id1' instead).
                - In 'entity.merge()', the arguments 'entity1_id' & 'entity2_id' (use the GET parameters 'id1' & 'id2' instead).
                - In 'entity_filter.get_for_ctype()', the arguments 'ct_id' & 'include_all' (use the GET parameters 'ct_id/all' instead).
                - In 'header_filter.get_for_ctype()', the argument 'ct_id' (use the GET parameter instead).
                - In 'list_view_export.dl_listview()', the arguments 'ct_id' & 'doc_type' (use the GET parameters 'ct_id/type' instead).
                - list_view_export.dl_listview_header() (use the GET parameter 'header' with 'dl_listview()' instead).
                - In 'quick_forms.add_from_widget()', the arg 'count'.
                - quick_forms.json_quickform_response().
                - In 'relation.add_relations_bulk()', the argument 'relations_types' (use the GET parameter 'rtype' instead).
                - relation.objects_to_link_selection() (use creme_core.views.select_relations_objects() instead).
                - search.reload_block() (use 'reload_brick()' instead).
            - In 'creme_core.forms' :
                - fields.CremeDateField, fields.CremeTimeField, fields.CremeDateTimeField.
                - The support for non-iterable values as 'allowed_models' argument for the property '[Multi]GenericEntityField.allowed_models'.
                - In 'fields.DatePeriodField.init()', the argument 'choices' (use 'period_names' instead).
                - merge.MergeFieldset_merge_initial() (set directly MergeField.initial property instead).
            - In 'creme_core.gui' :
                - In 'block' (which is now an alias to 'bricks' for compatibility) :
                    - In Block/PaginatedBlock/QuerysetBlock (alias for 'bricks.*Brick'), the method 'get_block_template_context()'
                     (use 'get_template_context()' instead ; notice that it has no argument "update_url").
                    - BlocksManager (alias for 'bricks.BricksManager') :
                        - block_is_registered() (use brick_is_registered() instead).
                    - _BlockRegistry (alias for 'bricks._BrickRegistry') :
                        - get_blocks() (use get_bricks() instead).
                        - get_block_4_instance() (use get_brick_4_instance() instead).
                        - get_block_4_object() (use get_brick_4_object() instead).
                        - get_compatible_blocks() (use get_compatible_bricks() instead).
                        - register() & register_4_model(): registering brick instances is deprecated (register brick classes instead).
                        - register_4_model(): registering brick class with an ID.
                        - get_compatible_blocks() (use get_compatible_bricks() instead  -- beware, it returns object-brick too).
                - In 'fields_config.FieldsConfigRegistry' (the valid models are now just models with contain any optional field) :
                    - is_model_valid() (use 'creme_core.models.FieldsConfig.is_model_valid()' instead).
                    - The property 'ctypes'.
                - In 'field_printers' :
                    - simple_print() (use simple_print_html() instead).
                    - print_image() (use print_image_html() instead).
                    - print_boolean() (use print_boolean_html() instead).
                    - print_urlfield() (use print_url_html() instead).
                    - print_foreignkey() (use print_foreignkey_html() instead).
                    - print_many2many() (use print_many2many_html() instead).
                - icons.IconRegistry.get() (use 'IconRegistry.get_4_model()' instead).
            - In 'creme_core.templatetags' :
                - The library 'creme_block' (use 'creme_bricks' instead).
                - In the library 'creme_widgets' :
                    - {% get_image_for_ctype ... %} & {% get_image_path_for_ctype ... %} (use {% widget_icon_for_ctype ... %} instead).
                    - {% get_image_for_object ... %} (use {% widget_icon_for_object ... %} instead).
                    - _get_image_path_for_model() & _get_image_for_model().
                    - {% get_add_button %} & its template.
                    - {% get_edit_button %} & its template.
                    - {% get_delete_button %} & its template.
                    - {% get_restore_button %} & its template.
                    - {% get_clone_button %} & its template.
                - In the library 'creme_listview' : {% get_listview_cell %} (use {% render_cell %} from the lib 'creme_cells' instead).
                - The library 'creme_queryset' (& its only one templatetag 'order_by').
            - These template files :
                - 'creme/creme_core/templates/creme_core/generics/blockform/add_popup2.html' (use 'add_popup2.html' instead).
                - 'creme/creme_core/templates/creme_core/batch_process_report.html'.
                - 'creme/creme_core/templates/creme_core/importing_report.html'.
            - The context processor 'creme.creme_core.context_processor.get_blocks_manager'.
              (use 'creme.creme_core.context_processor.get_bricks_manager' in your settings instead if you override setting.TEMPLATES).
            - In 'creme_core.utils' :
                - is_testenvironment() (use settings.TESTS_ON instead).
                - imports.find_n_import() (use import_apps_sub_modules() instead).
                - meta.get_instance_field_info() (use the new method FieldInfo.value_from() instead).
                - media.get_current_theme_vb().
                - In 'dates' :
                    - get_dt_to_iso8601_str().
                    - get_dt_from_iso8601_str().
                    - get_dt_from_json_str() (use dt_from_ISO8601() instead).
                    - dt_to_json_str() (use dt_to_ISO8601() instead).
                    - get_dt_from_str() (use dt_from_str() instead).
                    - get_date_from_str() (use date_from_str() instead).
            - The button 'creme_core.buttons.MergeEntitiesButton' (& the related template too).
            - JavaScript :
                - creme.component.is() (use Object.isSubClass instead).
                - creme.object.isempty().
                - creme.object.isnone().
                - creme.blocks : this lib is globally deprecated (bindEvents() is not yet deprecated because it is still used for compatibility purpose).
                - In 'creme.exports.exportAs()' URL as format string is deprecated (use the the "argument_name" parameter instead).
                - creme.merge.selectOtherEntityNRedirect().
                - In 'creme.lv_widget' :
                    - deleteEntityFilter() (use creme.lv_widget.deleteFilter() instead).
                    - deleteHeaderFilter() (use creme.lv_widget.deleteFilter() instead).
                - creme.relations.addRelationTo() :
                    - The option "blockReloadUrl" (remove it, so the Bricks will be automatically to reloaded).
                    - The hard-coded URLs are deprecated (the URLs as the <body> attributes "data-save-relations-url"/"data-select-relations-objects-url" -- see base.html).
                - In 'creme.utils' : innerPopupNReload(), toggleCheckallState(), autoCheckallState(), decorateSearchResult(), openQuickForms().
            - creme_core.tests.base._CremeTestCase.populate() (because it's useless if you are not in a CremeTransactionTestCase).
            - Apps :
                * Creme_config :
                    - The following URLs & the related views :
                        - 'creme_config/blocks/custom/add' (use 'creme_config/blocks/custom/wizard' instead).
                        - 'creme_config/blocks/portal/add' (use 'creme_config/blocks/portal/wizard' instead).
                        - 'creme_config/blocks/relation_block/add_ctypes/rbi_id' (use 'creme_config/blocks/relation_block/rbi_id/wizard' instead).
                        - 'creme_config/button_menu/add' (use 'creme_config/button_menu/wizard' instead).
                        - 'creme_config/fields/add/' (use 'creme_config/fields/wizard' instead).
                        - 'creme_config/role/add/' (use 'creme_config/role/wizard' instead).
                        - 'creme_config/role/edit/<role_id> (use 'creme_config/role/wizard/<role_id>' instead).
                    - The views :
                        - generics_views.swap_order() (use reorder() instead).
                        - generics_views.reload_block() (use reload_brick() instead).
                        - setting.reload_block() (use 'generic_views.reload_app_bricks()' instead).
                    - In 'forms.user_role', 'UserRoleCreateForm' & 'UserRoleEditForm' (use the wizard instead).
                    - forms.fields_config._get_fields_enum() (use 'FieldsConfig.field_enumerator()' instead).
                    - These modules :
                        - views.blocks (use 'views.bricks' instead).
                        - forms.blocks (use 'forms.bricks' instead).
                    - The variable 'urls.blocks_patterns' (use 'urls.bricks_patterns' instead).
                    - The template files 'custom_fields/*'.
                    - The template file 'blocks_portal.html' (use 'bricks_portal.html' instead).
                    - The templatetags {% import_usersettings_blocks %} & {% do_usersettings_blocks_displayer %}.
                    - In registry.AppConfigRegistry :
                        - register_block() (use 'register_brick()' instead).
                        - The property 'blocks' (use 'bricks' instead -- beware it returns an iterator).
                    - In registry._ConfigRegistry :
                        - register_blocks() (use 'register_bricks()' instead).
                        - register_userblocks() (use 'register_user_bricks()' instead).
                        - In 'register_bricks()' & 'register_user_bricks()', registering brick instances is deprecated (register brick classes instead).
                        - The property 'userblocks' (use 'user_bricks' instead).
                * Documents :
                    - In 'views.quick_forms.abstract_add_doc_from_widget()', the arg 'count'.
                    - In 'views.quick_forms.add_csv_from_widget()', the arg 'count'.
                * Activities :
                    - models.AbstractActivity.count_lines_display_block().
                    - The module 'views.blocks' (use 'views.bricks' instead).
                    - The module 'forms.blocks' (use 'forms.bricks' instead).
                    - The templates files :
                        - 'templatetags/activity_date.html'.
                        - 'templatetags/activity_relations_field.html'.
                    - The templatetag library 'activities_tag'.
                    - In 'views.activity.download_ical()', the URL argument 'ids' (use the GET parameter "id" instead).
                    - In JavaScript :
                        - In 'exportAsICal()', implicit argument 'url' (give the URL as second argument).
                        - In 'fullCalendar()', implicit argument 'update_url' (give the URL as last argument).
                * Persons :
                    - models.contact._create_linked_contact() (use 'AbstractContact._create_linked_contact()' instead).
                * Products :
                    - forms.fields.CategorySelector (use 'CreatorCategorySelector' instead).
                * Billing :
                    - models.Base.product_lines()/service_lines() (use get_lines() instead).
                    - models.Base._build_lines() (use _post_clone() instead).
                    - models.Base.get_product_lines_total_price_exclusive_of_tax().
                    - models.Base.get_product_lines_total_price_inclusive_of_tax().
                    - models.Base.get_service_lines_total_price_exclusive_of_tax().
                    - models.Base.get_service_lines_total_price_inclusive_of_tax().
                    - models.TemplateBase.build().
                    - The template files :
                        - 'frags/generic_billing_line_frag.html'.
                        - 'templatetags/line.html'.
                    - The templatetag library 'latex' (use 'creme_latex' -- from creme_core -- instead).
                    - The 'billing_register' feature is deprecated ; register your algorithms in your AppConfig instead.
                    - In JavaScript :
                        - multiSaveLines() (use the new brick action "billing-line-saveall" instead).
                        - selectDefaultPayment().
                        - convertAs().
                        - redirect().
                        - reload().
                * Commercial :
                    - In views.strategy : reload_assets_matrix(), reload_charms_matrix(), reload_assets_charms_matrix(), _reload_matrix().
                    - These templatetags :
                        - {% get_segments_for_category %} (use {% commercial_segments_for_category %} instead).
                        - {% widget_segment_category %}.
                        - {% widget_asset_score %} (use {% commercial_widget_asset_score %} instead).
                        - {% widget_charm_score %} (use {% commercial_widget_charm_score %} instead).
                    - The templates files :
                        - 'templatetags/widget_score.html'.
                        - 'templatetags/widget_category.html'.
                    - In JavaScript :
                        - postCategory() (use bricks actions instead).
                        - increaseObjectiveCounter() (idem).
                        - postScore() (use 'setScore()' & bricks actions instead).
                * Reports :
                    - The module 'forms.blocks' (use 'forms.bricks' instead).
                    - The module 'views.blocks' (use 'views.bricks' instead).
                    - In 'views' :
                        - report.change_field_order() (use reorder_field() instead).
                        - graph.fetch_graph(): the URL parameter "order" (use the GET parameter instead).
                        - graph.fetch_graph_from_instanceblock(): the "order" URL parameter (use the GET parameter instead).
                        - graph._check_order().
                    - In JavaScript :
                        - changeOrder() (use the new bricks ordering system instead).
                        - unlink_report() (use the new bricks action system instead).
                        - setSelected().
                        - doAjaxAction() (use bricks & actions instead).
                        - openGraphEdition() (use bricks & actions instead).
                * Geolocation :
                    - In the module 'views' :
                        - set_address_info(): the URL argument "address_id" (use the GET parameter "id" instead).
                        - get_addresses_from_filter(): the URL argument "filter_id" (use the GET parameter "id" instead).
                        - get_neighbours(): the URL arguments "address_id"/"filter_id" are deprecated (use GET parameters instead).
                    - In JavaScript :
                        - AddressesBlock() : hard-coded URL to get addresses.
                        - PersonsNeighborhoodBlock() : hard-coded URL to get neighbours.
                        - GoogleMapController() : hard-coded URL to store information.
                * Assistants :
                    - In JavaScript : creme.assistants.validateEntity() (use the new brick action system instead).
                * Emails :
                    - views.crudity.reload_sync_blocks() (use reload_bricks() instead).
                    - In 'views.crudity.synchronisation()' the template variable "entityemail_ct_id" is deprecated.
                    - views.sending.reload_block_mails() (use reload_mails_brick() instead).
                    - The template file 'creme/emails/templates/emails/frags/ajax/synchronize.html'.
                    - In JavaScript :
                        - allowExternalImages() (use the action "email-toggle-images" instead).
                        - confirmResend() & resend() (use an action with the url "emails__resend_emails" instead).
                * Crudity :
                    - registry.FetcherInterface.add_fetcher() (use 'add_fetchers()' instead).
                    - These functions of 'views.actions' : fetch(), _fetch(), reload_block().
                    - crudity.views.history.reload() (use 'crudity.views.history.reload_bricks()' instead).
                    - These templates files :
                        - 'frags/ajax/waiting_actions.html'.
                        - 'waiting_actions.html'.
                * Polls :
                    - The template file 'templatetags/stats_pollreply_chart.html'.
                    - The templatetag {% print_node_chart %} (use {% poll_stats_chart %} instead).
                * Projects :
                    - The module 'views.utils'.
                    - The template file 'frag_task_delay_td.html'.
                * Sms :
                    - views.sending.reload_block_messages() (use reload_messages_brick() instead).
        # An UUID field has been added to 'models.CremeEntity' ; it can be useful for synchronisation purposes.
        # The management of the URLs has been improved :
            - Reversed URLs are used everywhere ; you should get existing URLs in your code, and name your URLs too.
            - An app can override its URL-root ; it's useful to mask some URLs of another app.
            - An app can have no file 'urls.py'.
        # ForeignKey & ManyToManyField are hooked to automatically use (Multi)CreatorEntityField in related forms when if makes sense
          (ie: they are related to a CremeEntity model).
          The attribute 'limit_choices_to' is managed, but it must be a dict or a callable returning a dict.
        # A (model) ColorField has been added.
        # A new system for icons has been created :
            - It allows to have different sizes for a same icon in different themes.
            - Its possible to have inline SVG for an icon in a given theme.
        # About field printers :
            - The printer for ForeignKeys can now be precisely customised.
            - In _FieldPrintersRegistry.register(), printers can now be registered for the CSV output.
        # These form-fields with retrieve entities have been improved, by checking automatically the permissions :
            - (Multi)GenericEntityField.
            - (Multi)RelationEntityField.
            - (Multi)CreatorEntityField.
        # The SettingKeys can now be 'blank'.
        # The setting values of a user can now be stored in the user model directly.
          The time zone & the theme of the users are now stored directly in the model CremeUser.
        # In JavaScript :
            - An ESLint configuration has been added (needs nodejs).
            - In 'creme.dialog.Dialog':
                - Two options "minWidth" & "minHeight" have been added (they only works when the option "fitFrame" is disabled).
                - The possibility to redirect to an URL (static or in the response) on the form dialog success (options "redirectOnSuccess"/"redirectOnSuccessUrl").
            - In 'creme.widget.ActionButtonList', the update of delegate widget has been added (used for CreationButton).
            - In 'creme.widget.ChainedSelect', the update of subwidgets has been added.
            - A function 'creme.lv_widget.findList()' has been added to replace "$('form[name=list_view_form')" and "$('form:first')".
        # A class which creates files atomically has been added : creme_core.utils.file_handling.FileCreator.
        # Two context managers which help profiling queries have beebn added in 'creme.creme_core.utils.profiling'.
            - 'CaptureQueriesContext' is a helper for the context with the same name in django.
            - 'QueriesPrinter' is context/decorator which prints SQL queries.
        # A new templatetag has been added: 'creme_latex.latex_escape'.
        # About commands :
            - A command which creates a lot of random entities (Contacts & Organisations) has been added (for performance benchmarking): 'entity_factory'.
            - A command which searches not translated messages has been added : 'i18n_empty'.
            - The command 'i18n_overload' has been improved :
                - A new option '--comment_useless', which helps to remove useless messages, has been added.
                - A new option '--js' to inspect & create files djangojs.po has been added.
        # Apps:
            * Emails :
                - The mandatory dependency to 'crudity' has been removed.
            * Billing :
                - It's now easier to add a new child class of Line in custom code (see apps.BillingConfig.register_billing_lines()).
                - The paths of latex-template files can now be more easily overloaded by another app.
            * Commercial :
                - The command 'com_approaches_emails_send' has been removed (new job system).
            * Crudity :
                - The setting CREME_GET_EMAIL_JOB_USER_ID is now only useful during the installation ; it will be removed in the next version.

    Breaking changes :
    ------------------
        # Deprecated stuffs which have been removed :
            - creme_core.autodiscover().
            - In 'creme_core.models' :
                - CremeEntity.get_real_entity_by_id().
                - lock.mutexify().
            - In 'creme_core.utils' :
                - create_or_update().
                - meta.get_date_fields().
                - queries.get_first_or_None().
            - In 'creme_core.views.generic.detailview' :
                - view_real_entity().
                - In 'detailview.view_entity()', the  argument 'path'.
            - In 'creme_core.forms.fields' :
                - JSONField._build_widget().
                - The support of attribute 'user' with value 'None' in the method 'FilteredEntityTypeField.clean()'.
            - creme_core.forms.widgets.AdaptiveWidget.
            - The support of the template variable 'path' in the templatetag 'creme_widgets.get_add_button' (which is deprecated anyway).
            - The following template files :
                - creme/creme_core/templates/creme_core/frags/list_view_popup.html
                - creme/creme_core/templates/creme_core/generics/list_entities_popup.html
            - These methods of 'creme_core.tests.base.CremeTestCase' :
                - assertFormSetError().
                - autodiscover().
                - create_image().
            - Apps :
                * Creme_config :
                    - The argument 'ct_id' of the method registry.AppConfigRegistry.get_model_conf().
                    - The auto-increment feature on model-fields named 'order' (models registered with creme_config_register).
                    - views.custom_fields.view() has been removed.
                    - In 'views.generic_views.portal_app()', the context variable 'app_config_blocks' has been renamed 'app_config_bricks'.
                    - In 'views.generics_views.portal_model()', the context variable 'model_name' has ben removed.
                * Persons :
                    - These blocks: ContactBlock, ContactCoordinatesBlock, OrganisationBlock, OrgaCoordinatesBlock.
                    - These template files from  'persons/templates/persons/templatetags/':
                      block_contact.html, block_contact_coordinates.html, block_organisation.html, block_orga_coordinates.html.
                    - The method models.Address._get_info_fields().
                * Activities :
                    - The model field 'Calendar.color' has now a max_length of 6.
                    - The form field 'Calendar.color' is now required in the Calendar forms.
                    - The files "activities_register.py" are not automatically loaded any more.
                * Billing :
                    - views.workflow._add_with_relations().
                    - models.AbstractTemplateBase.get_generator().
                    - creme.billing.linkToDocument() in billing.js.
                * Emails :
                    - models.mail._Email.get_status_str().
                    - models.mail._Email.get_body().
                    - models.mail.AbstractEntityEmail.get_body().
                    - models.sending.LightWeightEmail.get_body().
                    - models.sending.LightWeightEmail.get_body_html().
                    - models.sending.EmailSending.get_type_str().
                    - models.sending.EmailSending.get_state_str().
                    - views.mail.get_entity_mail_body().
                    - The block EntityEmailBlock and its template 'emails/templatetags/block_mail.html'.
                * Crudity :
                    - The command 'crudity_synchronize' has been removed (the new job system is used instead).
                    - The method CrudityInput.handle() returns a backend instance or None (instead of a boolean).
                      So the handling methods (create() etc...) of child classes must return a backend/None.
                * CTI :
                    - Some breaking changes in the view respond_to_a_call() (a true brick has been created, the context vars have been moved to this brick).
        # In settings.py:
            - USE_STRUCT_MENU has been removed & the old tree menu API has been removed (it was hidden & probably used by no one).
            - The JavaScript bundles has been split into several parts: lib & main.
        # In CremeAppConfig.register_menu(), the argument 'creme_menu' uses the new menu API.
          You can get the old API with 'settings.OLD_MENU = True' ('False' by default).
        # The apps are not registered in 'creme_core.registry.creme_registry' anymore ; only the apps registry of Django is used now.
            - 'creme_core.apps.CremeAppConfig.register_creme_app()' is not called by 'all_apps_ready()' anymore ;
              use the class attributes 'AppConfig.extended_app' & 'AppConfig.credentials' (added by Creme) if in your old code you used specific values for 'register_creme_app()' arguments.
            - These attributes of 'creme_core.registry.CremeRegistry' has been removed :
                register_app(), get_app(), get_extending_apps(), iter_apps() (use 'creme.creme_core.apps.creme_app_configs()' instead) , CRED_NONE, CRED_REGULAR, CRED_ADMIN.
            - The class 'creme_core.registry.CremeApp' has been removed.
        # In all apps :
            - The methods '*Config.register_blocks()' have been renamed 'register_bricks()'.
            - The blocks use some new templates files, which are in '*/bricks/' (instead of '*/templatetags/' generally).
        # The templates loader configuration (settings.TEMPLATES) has changed ; templates from apps directories are now loaded first.
        # A 'ForeignKey' or a 'ManyToManyField' related to a CremeEntity model & with an attribute 'limit_choices_to' which is a Q() (or a callable returning one)
          will cause an error when its form-field is generated (but it indicates a buggy code in your old Creme 1.6 based code).
        # In 'creme_core.models' :
            - If the ordering of a class inheriting CremeEntity is empty or uses the field 'id', it causes an error a starting (before there was just a log message).
            - Instances of 'CremeProperty' are now unique for couple (type, creme_entity).
            - Instances of 'UserRole' is now unique by 'name'.
            - Instances of 'CustomFields' are now unique for couple (content_type, name).
            - The attribute 'entity.EntityAction.icon' must be a new-style icon name (not a old-style icon path).
        # The behaviour of ordering NULL values is now uniform between the different RDBMS : NULL values are now considered as low.
          On PostgreSQL (where we use the SQL instructions NULLS FIRST/LAST), ordering of CremeEntity QuerySets has changed with order_by() on fields with NULL values.
        # In 'creme_core/templates' :
            - The <body> of the pages should now have an attribute 'data-bricks-reload-url' which contains the bricks-reloading URL.
            - In 'base.html', {% block bodyclass %} has been removed ; use {% block body_classes %} instead (beware, you have to remove 'class="').
            - Many changes in 'detailview.html' :
                - The <div> for buttons have changed their CSS class.
                - The class 'zone_spacer_5px' is not used anymore & the related <div> has been removed.
                - Several template {% block %} have been removed:
            - In 'generics/view_entity.html', if you override some {% block %} ('title', 'logo', 'entity_buttons'),
              you have now to use the header brick feature instead (by creating your own or override an existing one).
            - In 'generics/blockform/base.html', 'generics/blockformset/base.html' & 'generics/form/base.html',
              the context variable 'logo' is replaced by 'icon_name' (eg: 'images/add_64.png' => 'add')
            - In form pages, the tags <table class="table_header" ...>  have been replaced by <div> tags.
            - Many changes in the HTML of list-views ; mostly in header & footer.
        # In 'creme_core.gui' :
            - The constructor of 'bricks.Brick' (aliased to 'block.Block' for compatibility) should be called if you write your own 'Brick' class.
            - In 'bricks._BrickRegistry.register_4_model()' the argument 'block' has been renamed 'brick_class'. A registered bricks should have an id_ == None.
            - 'fields_config.FieldsConfigRegistry.register()' has been removed.
            - The module 'list_view_import' has been renamed to 'mass_import'.
            - In the method 'listview.ListViewState.set_sort()', the argument 'field_name' has been renamed 'cell_key'.
        # The URL '/creme_core/list_view/import/..' became '/creme_core/mass_import/...' ; the GET argument 'list_url' is not used anymore.
        # In 'creme_core.views' :
            - In 'generic.listview.list_view()' the parameter '*args' has been removed.
            - In 'creme_property.add_properties_bulk()',: the IDs of entities are not read in GET arguments if not found in POST data anymore.
            - The function 'list_view_export.dl_listview_header()' has been removed.
            - In 'quick_forms.add_from_widget()' there is no "<json>" tag in the response anymore.
            - In 'relation.add_relations_bulk()', the IDs of subject-entities are not read in GET arguments if not found in POST data anymore.
        # The key 'usertheme' has been removed from 'creme_core.global_info'.
        # In 'creme_core.forms' :
            - In 'fields' :
                - The property 'user' is required by the method 'clean()' of: (Multi)GenericEntityField, (Multi)RelationEntityField, (Multi)CreatorEntityField.
                - The method 'GenericEntityField._update_wigets_choices()' has been renamed '_update_widget_choices()'.
                - The method 'CreatorEntityField.create_action_url()' now returns '' if no related quick-form is registered (& no custom URL is provided).
            - In 'bulk' :
                - The 'VIEW' permission is not checked explicitly anymore (so 'LINK' is checked instead by default by the field itself).
                - The classes inheriting 'BulkForm' must set the attributes 'bulk_cleaned_entities' & 'bulk_invalid_entities' or use the method '_bulk_clean()'.
                - The constructor of 'BulkForm' now requires the model as first argument ; don't forget to update registered custom inner/bulk forms.
                - The method 'BulkForm._bulk_related_formfield()' has been removed.
                - The global variable '_BULK_FIELD_WIDGETS' has been removed.
            - In 'widgets' :
                - The class attribute 'RelationSelector._CTYPES_URL_FMT' has been removed.
                - In the constructor of 'RelationSelector' & 'MultiRelationSelector', the default value for 'content_types' is now 'None'.
                - The class 'EnchancedSelectOptions' has been renamed to 'EnhancedSelectOption'.
                - In the class 'DependentSelect' :
                    - The attribute '_source_val' has been removed (& the property 'source_val' & the method _set_source() too).
                    - The attribute '_target_val' has been removed (& the property 'target_val' & the method _set_target() too).
            - The module 'list_view_import' has been renamed to 'mass_import'.
            - The constructor of 'merge.MergeField' takes an additional positional argument : 'user'.
        # In 'creme_core.core' :
            - In 'function_field' :
                - The method 'FunctionField.call()' takes an additional argument : 'user'.
                - The method 'FunctionField.populate_entities()' takes an additional argument : 'user'.
            # In 'reminder' :
                - The methods 'Reminder.execute()' & 'Reminder.send_mails()' take an additional 'job' argument.
                - The method 'Reminder.next_wakeup()' must be implemented by child classes.
        # '_BackendRegistry', 'import_backend_registry' & 'export_backend_registry' have moved from 'creme_core.registry' to 'creme_core.backends'.
        # The function print_hour() has moved from 'creme_core.models.setting_value' to 'creme_core.core.setting_key'.
        # About commands :
            - The command 'reminder' has been removed (the new job system is used).
            - The command 'i18n_doublons' has been renamed to 'i18n_duplicates'.
        # The method 'creme_core.core.entity_cell.EntityCell.populate_entities()' takes an additional argument: 'user'.
        # In 'creme_core.utils' :
            - The signature of 'chunktools.iter_splitchunks()' has changed :
              the arguments (chunks, sep, filter) are now (chunks, sep, parser=None, limit=None). See the docstring for details.
            - 'meta.FieldInfo' : slicing with a step (or a step!=1) raises now a ValueError (because it probably does not mean anything).
        # In JavaScript :
            - The method 'ArrayTools.insertOrReplace()' has been removed.
            - 'creme.component.ActionRegistry' has been removed (it was not used and is now replaced by the builders of ActionLink in bricks code).
            - The method 'creme.dialog.FormDialog.submit()' now expects (options, data, listeners) arguments like 'creme.widgets.Dialog.fetch()'.
            - In 'creme.lv_widget' :
                - 'editSelectedLines()' has been replaced by 'EditSelectedAction()'.
                - 'addToSelectedLines()' has been replaced by 'AddToSelectedAction()'.
                - 'deleteSelectedLines()' has been replaced by 'DeleteSelectedAction()'.
                - 'openFilterSelection()' & 'openFilterView()' have been removed.
            - Values of 'creme.widget.EntitySelectorMode' constants have changed (0/1 became 'multiple'/'single') ; so if you use your own URL you'll have to change it.
        # In 'creme_core.tests' :
            - The ordering of 'FakeInvoice' is now ('name', '-expiration_date').
            - The command 'creme_populate' is now run just once (excepted for TransactionTestCases).
              So running all the tests is much faster, & tests are run with more realistic data (because all other apps are populated too).
        # Apps :
            * Creme_config :
                - The global variables 'constants.USER_THEME_NAME' & 'constants.USER_TIMEZONE' have been removed.
                - The global variables 'settings_key.theme_key' & 'settings_key.timezone_key' have been removed.
                - The functions 'utils.get_user_timezone_config()' & 'utils.get_user_theme()' have been removed.
                - The view 'views.generics_views.add_model_from_widget()' has no "<json>" tag in its response anymore.
            * Documents :
                - The field 'AbstractFolder.description' is not 'null' any more.
                - The field 'AbstractDocument.description' is not 'null' any more.
                - The method 'forms.documents._DocumentBaseForm.clean_filedata()' has been removed.
                - The method 'forms.quick.DocumentQuickForm.clean_filedata()' has been removed.
                - The view 'views.quick_forms.add_csv_from_widget()' has no "<json>" tag in its response anymore.
            * Media_managers :
                - This app has been emptied & will be definitively removed in Creme 1.8.
                  Notice that the form 'ImageQuickForm' has been modified & moved to 'documents.forms.quick'.
            * Persons :
                - In models (AbstractContact/AbstractOrganisation/AbstractAddress), CharFields & TexFields are not nullable anymore.
                - The result of 'Organisation.get_all_managed_by_creme()' is cached (per request).
                - The module 'forms.lv_import' has been renamed to 'forms.mass_import' ;
                  its function 'get_csv_form_builder()' has been renamed 'get_massimport_form_builder()'.
                - In 'buttons.CrmButton', the attribute 'become_url' is replaced by 'url_name' (it's now the name of the wanted URL).
            * Activities :
                - In models :
                    - The field 'Activity.description' & 'Activity.minutes' are not 'null' anymore.
                    - The field 'Activity.place' is not 'null' anymore.
                    - The field 'Calendar.color' is not 'null' & not 'blank' anymore.
                - In forms :
                    - In ActivityCreateForm/ParticipantCreateForm/ActivityMassImportForm:
                        - The field 'my_participation' is now a UserParticipationField.
                        - The field 'my_calendar' has been removed.
                    - In the ActivityCreateForm :
                        - The following fields have been removed : alert_day, alert_start_time, alert_trigger_number, alert_trigger_unit.
                        - The 'error_messages' has no message with key='no_alert_start' anymore.
                    - The constant 'activity.MINUTES' has been removed.
                    - The module 'forms.lv_import' has been renamed to 'forms.mass_import' ;
                      its function 'get_csv_form_builder()' has been renamed to 'get_massimport_form_builder()'.
                - The module 'tests.lv_import' has been renamed to 'tests.mass_import' ;
                  its class 'CSVImportActivityTestCase' has been renamed to 'MassImportActivityTestCase'.
                - In JavaScript :
                    - calendar.loading() behaviour has changed (loading(false) means "not loading" & new 'is-loading' CSS class is used).
                    - In 'calendar.updater()', the URL must be given as first argument.
            * Products :
                - The fields 'models.AbstractProduct.web_site' & 'models.AbstractService.web_site' are not 'null' anymore.
                - The method 'models.Category.get_absolute_url()'' has been removed (but the returned URL did not work, so nobody uses this method).
                - In 'blocks.ImagesBlock' (alias for 'bricks.ImagesBrick'), the variable "object_type" is not injected in the template context anymore.
            * Billing :
                - In models :
                    - The fields 'Base.number' & 'Base.comment' (and so in 'CreditNote/Invoice/Quote/SalesOrder/TemplateBase') are not 'null' anymore.
                    - The fields 'Line.unit' & 'Line.comment' (and so in 'ProductLine/ServiceLine') are not 'null' anymore.
                    - The field 'Line.on_the_fly_item' (and so in 'ProductLine/ServiceLine') is not 'blank' anymore.
                    - The following fields of PaymentInformation are not 'null' any more : bank_code, counter_code, account_number, rib_key, banking_domiciliation, iban, bic.
                    - The field 'AdditionalInformation.description' is not 'null' any more.
                    - The field 'PaymentTerms.description' is not 'null' any more.
                    - The classes inheriting 'Line' must implement the method 'related_item_class()'.
                - The method 'models.Base.get_lines()' uses now a cache ; 'invalidate_cache()' has been updated to work with it.
                - The detail-views do not inject a variable 'can_download' in their template context anymore.
                - In blocks.py :
                    - The Blocks use now templates files in 'billing/bricks/'.
                    - _ReceivedBillingDocumentsBlock & its child classes : _title & _title_plural use now a format with brackets (ie: %s => {count}).
                - In function_fields.py, these functions take an additional 'user' argument :
                    - sum_totals_no_vat().
                    - get_total_pending().
                    - get_total_won_quote_last_year().
                    - get_total_won_quote_this_year().
                - In 'forms.line.ProductLineMultipleAddForm' & 'forms.line.ServiceLineMultipleAddForm', the block IDs "additionnal" become "additional".
                - The module 'tests.lv_import' has been renamed to 'tests.mass_import'.
                - In JavaScript :
                    - The function 'creme.billing.initBlockLines()'' has been replaced by initLinesBrick() (beware, it takes an additional argument 'block').
                    - In 'creme.billing.multiSaveLines()', the argument has changed.
            * Opportunities :
                - These fields of 'AbstractOpportunity' are not 'null' anymore : reference, description.
                - The module 'tests.lv_import' has been renamed to 'tests.mass_import'.
                  its function 'get_csv_form_builder()'' has been renamed to 'get_mass_form_builder()'.
            * Commercial :
                - The field 'AbstractAct.goal' is not 'null' any more.
                - The field 'CommercialApproach.description' is not 'null' any more.
                - These fields of 'MarketSegmentDescription' are not 'null' any more : product, place, price, promotion.
                - In the JavaScript function 'creme.commercial.increaseObjectiveCounter()', the first argument has changed (ID of objective replaced by URL).
            * Emails :
                - In models :
                    - The field 'EmailRecipient.address' is not 'null' any more.
                    - The field '_Email.subject' is not 'null' any more (& so does LightWeightEmail/AbstractEntityEmail/EntityEmail).
                    - The fields 'AbstractEntityEmail.attachments' & 'AbstractEmailCampaign.mailing_lists' are now 'blank' (the related form-fields were not required).
                - The commands 'emails_send' & 'entity_emails_send' have been removed (new job system).
                - The method 'tests.test_sending.SendingsTestCase.repopulate_email()' has been removed.
                - The functions 'forms.utils.validate_images_in_html()' & 'forms.utils.create_image_validation_error()' have been removed.
                - The function 'utils.get_images_from_html()' has been removed.
                - In 'buttons.EntityEmailLinkButton.render()', the template variable 'rtypes' in now a list (it was a string with comma as separator).
                  The template 'emails/templatetags/button_entityemail_link.html' has been adapted.
                - In JavaScript, 'confirmResend()' & 'resend()' take an additional argument 'resend_url'.
            * Assistants :
                - In models, these fields :
                    - The fields 'Action.description' & 'Action.expected_reaction' are not 'null' any more .
                    - The field 'Alert.description' is not 'null' any more .
                    - The field 'ToDo.description' is not 'null' any more.
                    - The field 'Memo.content' is not 'null' and not 'blank' any more.
                - The command 'usermessages_send' has been removed (new job system).
            * Reports :
                - JavaScript :
                    - The function 'creme.reports.load()'' takes 2 additional parameters.
                    - The function 'creme.reports.unlink_report()' takes an additional parameter ('url').
                    - The function 'creme.reports.changeOrder()' takes an additional parameter ('url').
                    - The function 'creme.reports.setSelected()' takes an additional parameter ('url').
                    - The functions 'creme.reports.exportReport()' & 'creme.reports.PreviewController()' completely changed their signatures.
            * Geolocation :
                - The fields 'Town.country' & 'Town.zipcode' are not 'null' any more.
                - In JavaScript :
                    - The parameter 'block' (DOM element) in 'creme.geolocation.*Block' is replaced by 'brick (instance of 'creme.bricks.Brick').
                    - In block/brick controllers, 'this._block' (Jquery element) has bene replaced by 'this._brick' (instance of 'creme.brick.Brick').
                    - The DOM event "block-geoaddress-location" has been replaced by "brick-geoaddress-location".
            * Projects :
                - The new field AbstractProject.currency is required.
                - The field 'AbstractProject.description' is not 'null' any more.
                - The field 'AbstractProjectTask.description' is not 'null' any more.
                - The field 'ProjectStatus.color_code' is not 'null' any more ; its max_length is now 6.
                - The field 'TaskStatus.color_code' is not 'null' any more.
                - the function 'views.resource.add()' now returns a 409 error when the task is not alive (instead of a 200 page with an error message).
                - In the constructor of 'forms.resource.ResourceEditForm', the first argument is now 'entity' (it was 'task').
            * Crudity :
                - In the constructor of 'fetchers.pop.PopEmail', the default subject is now ''.
                - In the class 'fetchers.pop.PopFetcher', the following class attributes have been removed : server, username, password, port, is_ssl, ssl_keyfile, ssl_certfile.
                - In the module 'fetchers.pop', the 'constants' CREME_GET_* have been removed.
            * Polls :
                - The field 'AbstractPollCampaign.goal' is not 'null' any more.
                - The field 'PollFormSection.body' is not 'null' any more.
                - The field 'PollReplySection.body' is not 'null' any more.
            * Recurrents :
                - These fields of 'AbstractRecurrentGenerator' are not 'null' any more : name, description.
                - The command 'recurrents_gendocs' has been removed (new job system).
            * SMS :
                - The fields 'Recipient.phone' & 'Message.status_message' are not 'null' any more.
                - The field 'AbstractSMSCampaign.lists' is now 'blank' (the related form-field was not required).

    Internal breaking changes :
    ---------------------------
    (they should not cause problem if you have not deeply modified the source code of Creme)

        # There are many changes in 'creme_core.forms.list_view_import.ImportForm'.
        # There are many changes in 'creme_core.forms.batch_process.BatchProcessForm' ;
          the constructor of 'BatchOperator' takes an additional argument 'id'.
        # There are many changes in the class 'creme_core.gui.listview.ListViewState'.
        # In 'creme_core.gui.bricks' :
            - These attributes/methods of '_BrickRegistry' have been renamed :
                - '_blocks' became '_brick_classes'.
                - '_object_blocks' became '_object_bricks'.
                - '_instance_block_classes' became '_instance_brick_classes'.
                - '_generate_modelblock_id()' became '_generate_modelblock_id()'.
            - In 'BricksManager' :
                 - get_state(): the argument 'block_id' has been renamed 'brick_id'.
                 - The attributes '_blocks' & '_blocks_groups' have been renamed '_bricks' & '_bricks_groups'.
        # In 'creme_core.views' :
            - The internal class in 'creme_property' have been renamed from '*Block' into '*Brick' ;
              In TaggedEntitiesBrick, the variables 'short_title' & 'title' are not injected in the context anymore.
            - The internal class 'search.FoundEntitiesBlock' has been renamed 'FoundEntitiesBrick' ;
              In FoundEntitiesBrick, the variables 'short_title' & 'title'  are not injected in the context anymore.
            - The module 'list_view_import' has been renamed 'views.mass_import' ;
              its function 'import_listview()' has been renamed 'mass_import()'.
            - In 'testjs.js_testview_or_404()', the argument 'request' has been removed.
            - In 'generic.listview', POST & GET arguments are not used at the same time any more ; only POST requests change the information stored in the session.
                - In '_build_extrafilter()' & '_select_entityfilter()', the parameter 'request' has been replaced by 'arguments'.
                - _build_entity_queryset() :
                    - The parameter 'request' has been replaced by 'user'.
                    - It returns the count too.
                - '_build_entities_page()' takes 2 additional arguments 'count' & 'ordering'.
        # The module 'creme_core.tests.views.test_list_view_import' has been renamed 'creme_core.tests.views.test_mass_import' ;
          its class 'CSVImportViewsTestCase' became 'MassImportViewsTestCase'.
        # The function 'creme_core.checks.check_creme_core_registers()' has been removed.
        # The method 'creme.creme_core.management.commands.creme_populate.BasePopulator._get_populate_module()' has been removed.
        # In JavaScript :
            - In 'creme.dialog.FormDialogAction', the event "done" now returns (data, dataType) instead of (data).
            - The parameter 'url' has been renamed 'lv_state_id' in the following functions :
                - creme_core.views.generic.listview.list_view_content()
                - creme_core.views.generic.listview.list_view_popup()
            - The argument 'is_ajax' of $.fn.list_view.reload() has been removed (it was not used).
        # Apps:
            * Creme_config :
                - In 'registry' :
                    - The method 'ModelConfig._manage_order()' has been removed.
                    - The attribute 'AppConfigRegistry._blocks' hss been renamed '_bricks_classes'.
                    - The method '_ConfigRegistry.get_app()' raises now a 'LookUpError' exception instead of a 'NotRegistered' one.
                    - The attribute '_ConfigRegistry._block_registry' has been renamed '_brick_registry'.
                    - The attribute '_ConfigRegistry._userblocks' has been renamed '_user_brick_classes'.
                - In the function 'views.user_settings._set_usersetting()', the argument 'session_key' has been removed.
                - In forms :
                    - In 'user_settings', the base class of 'UserThemeForm' & 'UserTimeZoneForm' is now 'CremeModelForm' (it was CremeForm).
                    - In 'blocks._BlockLocationsForm._save_locations()', the argument 'blocks_partitions' has been renamed 'bricks_partitions'.
            * Persons :
                - The class '_PersonCSVImportForm' has been renamed '_PersonMassImportForm'.
                - The function 'tests.test_bricks.find_node_by_attr()' has been removed.
            * Activities :
                - The class 'forms.lv_import.SplittedColumnParticipantsExtractor' has been renamed to 'SplitColumnParticipantsExtractor'.
            * Billing :
                - The file billing/billing_register.py has been removed.
                - The attributes models.Base._productlines_cache/_productlines_cache have been removed (use 'lines_cache' instead).
                - In function_fields '_get_quote_fieldsconfig()' & '_BaseTotalWonQuote' have been removed.
                - In JavaScript :
                    - New CSS classes are used instead of "td_error" : "bline-deletion-mark" & "bline-input-error".
                    - The class "item_modified" is replaced by "bline-input-modified".
            * Opportunities :
                - The method 'models.AbstractOpportunity.__get_fieldsconfig()' & the attribute 'models.AbstractOpportunity._fconfig_cache' have been removed.
            * Commercial :
                - The constant IS_COMMERCIAL_APPROACH_EMAIL_NOTIFICATION_ENABLED has been removed.
                - The SettingKey 'notification_key' has been removed ; the related SettingValue has been removed from the DB.
                -  The template 'commercial/templatetags/widget_score.html' needs a variable "view_name" to work correctly.
            * Assistants :
                - The method 'UserMessage.send_mails()'' takes now an additional argument 'job'.
                  It catches the exceptions when e-mails are sent, & do not send again the same e-mails.
            * Reports :
                - JavaScript:
                    - The function 'creme.reports.loadHeaderFilters()' takes an additional parameter ('url').
                    - The function 'creme.reports.loadFilters()' has been renamed 'loadEntityFilters' & takes an additional parameter ('url').
            * Activesync :
                - utils._is_user_sync() has been removed.


== Version 1.6 ==

  Users side :
  ------------
    # The version of Django has been upgraded to 1.8.
        - There is now an integrated migration system, which is better than South. Only the command 'migrate' is needed & 'syncdb' is useless.
        - The new hint system performs some useful checking, like the apps dependencies.
    # A new feature has been added: FieldsConfig.
      It allows the users to hide fields everywhere in Creme (forms, blocks, listview...), directly in the "General configuration".
    # The blocks configurations can now be set by role.
    # Global search:
        - The search configuration can now be specific to a role ; configuration per user has been removed.
        - The configuration UI of search has been improved.
    # GenericEntityField and MultipleGenericEntityField can now create entities on-the-fly.
    # The quick search (search with listview columns headers) is now available for ManyToManyFields.
    # The emptying of the trash works now better with trashed entities linked between them.
      We try to delete the remaining entities (which could not be deleted because of relationships) when there are errors,
      while the previous iteration managed to remove some entities. It will not work with cyclic references (but it is certainly very unusual).
    # Model-fields as choices are now alphabetically ordered in forms (eg: search configuration, report-graphs forms...).
    # Lots of labels in inner popups buttons have been improved. eg: 'Save' -> 'Save the alert'.
    # The display of History block has been improved (FK to CremeEntity, fields with choices).
    # DecimalFields are now displayed with a localised format.
    # The command 'creme_uninstall' has been heavily improved (more robust, clean more models, better display...).
    # Apps:
        * Projects :
            - The design of the tasks of project has been reworked.
              The ProjectTasks are not Activities anymore ; but instead they are linked to Activities which replace the Workingperiods ;
              the ProjectTasks still have the following fields: start, end, duration, description.
              The Contact linked to a Resource can now be changed ; but a Resource cannot be deleted if it is related to an Activity
              (before, the related WorkingPeriods were deleted too).
            - A Contact can now be created directly in the Resource form.
        * Tickets :
            - Tickets which are open since more than 7 days are displayed in red in the listview.
            - When a ticket is cloned, the status of the new ticket is 'Open', and its 'closing_date' is not copied.
            - The titles are not unique anymore.
            - Tickets have now a unique number.
        * Documents :
            - Two Folders can now be merged.
            - A new block is available for the Folders: "Child folders".
            - The Folders are now unique by ('title', 'parent_folder', 'category').
            - The model FolderCategory has a 'is_custom' field.
              Populated categories which are required for related documents and crudity attachments, are not custom (ie: not deletable) anymore.
        * Persons :
            - Contact has a new field: full_position ('Detailed position').
            - The Contact/Organisation blocks for information & details are now built with the CustomBlock feature.
            - The name of the billing & shipping addresses is not asked anymore. They are automatically named.
        * Commercial :
            - A Market Segment can now be deleted (by replacing them by another one). The related property type is also replaced.
            - A Market Segment "All the organisations" has been added, with no related PropertyType.
        * Billing :
            - Invoice's total can now be negative.
            - The blocks for entity information are now built with the CustomBlock feature.
            - The model TemplateBase has now a 'Status' FunctionField.
            - When a related billing document is created, the source Organisation in not chosen in a separated innerpopup window anymore.
        * Activities :
            - The participants can now be created directly in the forms.
            - The max length of the field Activity.place is now 500 (it was 100).
        * Mobile :
            - The call minutes can be added from the call form.
    # Upgrade notes:
        - If you changed the setting INSTALLED_APPS (or INSTALLED_DJANGO_APPS), "mediagenerator" must be replaced by "creme.creme_core.apps.MediaGeneratorConfig",
          as in the vanilla creme.settings.py file.

  Developers side :
  -----------------
    You should probably read the following releases notes for Django versions:
        https://docs.djangoproject.com/en/1.8/releases/1.5/
        https://docs.djangoproject.com/en/1.8/releases/1.6/
        https://docs.djangoproject.com/en/1.8/releases/1.7/
        https://docs.djangoproject.com/en/1.8/releases/1.8/

    Non breaking changes :
    ----------------------
        # Deprecations :
            - From Django 1.5 :
                - In Response* objects, using 'mimetype' keyword argument is now deprecated ; use 'content_type' instead.
            - From Django 1.6 :
                - transaction.commit_on_success() (use atomic() instead).
                - transaction.commit_manually() (use atomic() instead ; set_autocommit() is an option too, but we avoid it when we can).
                - transaction.savepoint*() (use atomic() instead).
            - From Django 1.7 :
                - django.contrib.contenttypes.generic (use "from django.contrib.contenttypes.fields import GenericForeignKey").
                - request.REQUEST (use GET & POST instead).
                - The methods south_field_triple() are now useless (the South library is not used anymore).
                - django.utils.importlib (use the standard importlib instead).
                - django.utils.unittest (use the standard module 'unittest').
            - From Django 1.8 :
                - Django 1.8 comes with a new Meta API. Several Meta methods are deprecated (get_field_by_name, get_all_field_names, get_all_related_many_to_many_objects).
                - The function django.conf.urls.patterns() is deprecated.
                - Views as strings in the files urls.py are deprecated ; use real function objects.
                - The templates instances returned by the function get_template() are backend-based, and take a dictionary as context (giving a Context instance is deprecated).
                - SubfieldBase.
            - creme_core.autodiscover() (useless now).
            - creme_core.utils.queries.get_first_or_None() (use the method QuerySet.first() instead).
            - creme_core.utils.create_or_update() (use QuerySet.update_or_create() instead).
            - creme_core.views.generic.detailview.view_real_entity() (use view_entity() instead).
            - In creme_core.views.generic.detailview.view_entity(): the 'path' argument is deprecated.
            - In the templatetag creme_widgets.get_add_button: the template variable 'path' is deprecated.
            - (Multi)GenericEntityField.allowed_models property : the argument 'allowed models' should be an iterable (giving a not-iterable value is deprecated).
            - JSONField._build_widget() (set a class attribute 'widget' in your field instead).
            - AdaptiveWidget.
            - In _CremeTestCase :
                - assertFormSetError() (use assertFormsetError() instead).
                - autodiscover() (useless now).
                - create_image() (use creme.media_managers.tests import create_image() instead).
            - Apps :
                * Emails :
                    - _Email.get_status_str() (use get_status_display() instead).
                    - EmailSending.get_type_str() (use get_type_display() instead).
                    - EmailSending.get_state_str() (use get_state_display() instead).
                    - The block EntityEmailBlock and so its template 'emails/templatetags/block_mail.html'. It is now registered or used anymore.
                    - The methods _Email.get_body(), AbstractEntityEmail.get_body() & LightWeightEmail.get_body().
					- LightWeightEmail.get_body_html().
                    - The view mail.get_entity_mail_body() (use the core view get_sanitized_html instead).
                * Billing :
                    - views.workflow._add_with_relations() (use workflow.generic_add_related() instead).
                    - creme.billing.linkToDocument() (JavaScript).
                    - Templatebase.get_generator().
                * Creme_config :
                    - AppConfigRegistry.get_model_conf(): 'ct_id' argument is deprecated ; use the 'model' argument instead.
        # The entity models are now swappable (excepted media_managers.Image).
        # It's now possible to totally disable the History in the code (ie: no new HistoryLine is created).
        # You can now clearly forbid a CremeEntity model to be cloned, with the new static method get_clone_absolute_url().
        # The view decorator creme_core.auth.decorators.permission_required() can take a list of permissions.
        # A new method CremeEntity.get_html_attrs() has been added : you can customise the display of lines in listview.
        # The support of custom labels for default dialog buttons has been added.
        # A file "project_settings.py" has been added ; it should contain the setting shared by all your team (eg: INSTALLED_APPS).
          The settings has been improved in order to add other JS/CSS bundles ; see CREME_OPT_MEDIA_BUNDLES.
        # Several blocks templatetags can now take an URL (in order to give them reversed URLs) :
            - get_line_adder
            - get_line_linker
            - get_line_viewer
            - get_line_deletor
            - get_line_unlinker
        # 2 signals have been added ; they provide a way to customize the uninstall.
        # Test models (ie: models which only exist when tests are run) are used when it is possible (creme_core, reports).
        # Several ForeignKey fields are now OneToOneFields (RelationBlockItem.relation_type, HistoryConfigItem.relation_type) ;
          a new model field has been added: CTypeOneToOneField.
        # Apps :
            * Creme_config :
                - Models can now be unregistered from the registry.
            * Activesync :
                - CremeClient.user is now a OneToOneField.

    Breaking changes :
    ------------------
        # Changes caused by Django 1.5 :
            - Accessing reverse one-to-one relations fetched via select_related() now raises DoesNotExist instead of returning None.
            - In URLField, the argument 'verify_exists' has been deleted.
            - The commands should use self.stdout.write() & self.stderr.write() instead of 'print'.
            - django.utils.simplejson has been replaced by 'json'.
            - The methods Paginator.next_page_number() & Paginator.previous_page_number() raise InvalidPage exception, instead of returning '0'.
              So the footer of the listview (template) has been fixed.
            - The function django.utils.timezone.localtime() crashes if its arg is None.
            - The django validation message "Enter a valid e-mail address." has changed (now it's "Enter a valid email address.") ; some unit tests could fail.
            - _CremeTestCase.assertXMLEqual() has been renamed assertXMLEqualv2() to avoid the shadowing of the Django's method.
        # Changes caused by Django 1.6 :
            - The forms' Meta should have a 'fields' attribute (or an 'exclude' one).
            - The session is now serialized as JSON, so stored objects must be serializable.
            - The test runner & the test files layout have changed.
              Eg: the old command "python manage test persons" has become "python manage test creme.persons.tests".
                - The python files 'foo.py' must be renamed 'test_foo.py'.
                - CSVImportBaseTestCaseMixin has moved to 'creme.creme_core.tests.views.base'.
                - The command 'test_creme' has been removed ('test creme' is OK).
            - BooleanField default is now 'None' (so 'False' should be set explicitly).
            - The entry Field.default_error_messages['invalid'] has been removed.
            - The CONTENT_TYPE key in test response is not available anymore (-> QUERY_STRING can be used instead with different value).
            - XViewMiddleware has been removed from settings.py.
            - There was a low level change in the SQLite backend + date format of dates as group key.
            - The error messages should use mapping keys instead of positional formatting. Some django error messages has changed, so some tests could fail.
        # Changes caused by Django 1.7 :
            - With the new AppConfig system, the files "creme_core_register.py" are not loaded anymore
                at startup & should not be used anymore; use CremeAppConfig instead.
            - Some imports have to be done lazily in order to avoid AppRegistryNotReady exceptions at startup.
            - The loading of models has changed, and errors caused by loop imports could happen.
            - django.forms.util has been renamed django.forms.utils.
            - The new migrations system caused many changes :
                - The model auth.User is not used anymore ; Creme has its own CremeUser model
                  Use the function get_user_model() or settings.AUTH_USER_MODEL to get it.
                - The old South migrations do not work anymore ; generate new migration files with the new command 'makemigrations'.
                  BEWARE : if you use ForeignKeys/ManyToManyFields/... to the old 'User' model, you'll have to rework the generated migrations (see vanilla apps)
                - You have to add a deconstruct() method to your custom model fields.
            - Do not use settings.INSTALLED_APPS in your code ; use django.apps.apps instead.
                Do not use settings.INSTALLED_CREME_APPS ; use django.apps.apps or creme_registry instead.
            - The commands which inherit AppCommand should implements handle_app_config() instead of handle_app().
            - The middleware configuration has been improved :
                - django.contrib.auth.middleware.SessionAuthenticationMiddleware has been added.
                - django.middleware.clickjacking.XFrameOptionsMiddleware has been added.
                - The order is the same than in the Django 1.7 settings template.
        # Changes caused by Django 1.8 :
            - The method QuerySet.select_related() now validates that the given fields actually exist.
              Previously, non-existent fields were silently ignored. Now, an error is raised.
            - The result of the method Meta.get_all_related_objects() has changed ; it's deprecated too.
            - ContentType.name is not a real field anymore ; you cannot perform query on it.
            - The module django.contrib.formtools has been removed ; it's a third party app now.
            - The module django.core.context_processors has moved to 'django.template.context_processors'.
            - Some private classes move from django.template to django.template.base, like VariableNode.
            - The method URLField.to_python() no longer adds a trailing slash to pathless URLs (it made some unit tests fail in 'vcfs').
            - The super methods setUpClass()/tearDownClass)()  must be called in test cases.
            - The instances of RequestContext are not filled by the context processors when they are built anymore, but only before the template rendering.
              So you'll probably need the new creme.creme_core.views.blocks.build_context() function for your own block reloading views.
            - The length of EmailFields is now 254 by default. CremeUser/Contact/Organisation have been migrated.
            - The commands should now use the method add_arguments(), based on 'argparse' (not 'optparse' anymore).
            - Some changes in the session implementation can make some low level tests fail.
            - Some changes in the DB management in unit tests can make some tests fail.
            - The settings for the templates configuration have changed.
              The setting TEMPLATES replace the settings TEMPLATE_* (eg: TEMPLATE_LOADERS...) which are now deprecated.
        # Upgrade of several JavaScript libraries :
            - "Jquery" (1.11.2).
                - For 'checked' property use the prop() method instead of attr() (see jquery doc).
                - Tip: add the plugin jquery-migrate (1.2.1) whichs prevents compatibilities issues with previous jquery releases
                       and show deprecation warnings (see https://github.com/jquery/jquery-migrate/blob/master/warnings.md).
            - "Jquery-ui" (1.11.4).
            - "Form" (3.51) (the changes written for 2.94 have been ported too).
            - "Chosen" (0.9.15) (the changes written for 0.9.8 have been ported too).
            - "Fullcalendar" (1.6.7).
            - "Qunit" (1.18).
        # The CremeEntity sub-classes should now have a method get_create_absolute_url() (excepted auxiliary ones).
        # The module 'creme_core.utils.contribute_to_model' has been removed (use model swapping instead).
        # In creme_core.utils.meta :
            - The function get_related_field() has been removed (its behaviour was very different with the underlying Django fields changes).
            - The function get_model_field_info() has been removed (it was deprecated).
            - The function get_verbose_field_name() has been removed (it was deprecated).
        # The template "creme_core/generics/blockform/add_popup.html" has been removed.
        # The tag 'enumerable' tag is now True by default in ManyToManyFields.
        # The constructor BasePopulator.init() takes 2 additional arguments ('stdout' & 'style').
        # The 'extra_q' argument of generic.listview.list_view_content (and so list_view() & list_view_popup_from_widget() which use it)
          can not contains a sub-queryset condition anymore (you'll get SerializationError) ; convert them into list.
        # GenericEntityField & MultipleGenericEntityField need the "user" attribute (for creation permissions).
        # In (Multi)CreatorEntityField, the hack which consisted to write "myfield.create_action_url = myfield.create_action_url" in order
          to activate the creation button on fields with q_filter does not work anymore. Use "myfield.force_creation = True" instead.
        # About RelationEntityField.allowed_rtypes (ie the setter & the constructor's attribute) : if an object evaluated to False was passed,
          all RelationTypes were allowed. This behaviour has been removed ; use RelationType.objects.all() instead.
        # In FilteredEntityTypeField, 'None' is not a valid parameter anymore for the constructor (but the default behavior did not change).
        # The widget Label displays its 'empty_label' if its value is evaluated to False (before: only if it was 'None').
        # When a Q() is used as 'limit_choices_to' attribute of a RelatedField in a CremeEntity, hide the field or set a custom form for inner-edition
          or it will cause a ValueError exception. The other cases are handled.
        # SearchConfigItem :
            - create_if_needed(): the argument 'user' has been replaced by the argument 'role'.
            - get_4_model() has been removed (it was deprecated).
        # The following JavaScript functions have been removed (they were deprecated).
            - creme.utils.bindShowHideTbody().
            - creme.utils.handleResearch().
            - creme.lv_widget.handleSelection().
            - creme.lv_widget.delete_a_value().
        # The view "/creme_core/enumerable/<content_type>/json" now returns a list of dicts instead of a list of tuples.
        # The middleware LogImportedModulesMiddleware has been removed.
        # Apps :
            * Billing :
                - The classes Base (parent of Invoice, Quote...) and Line (parent of ProductLine & ServiceLine) are now abstract classes.
                - The listview for Lines ('/billing/lines') has been removed.
                - The related names for FK in Base ('*_address', 'currency', 'additional_info', 'payment_terms', 'payment_info') have been removed.
                - The block ReceivedBillingDocumentBlock has been removed (replaced by ReceivedQuotesBlock/ReceivedSalesOrdersBlock/ReceivedCreditNotesBlock).
                - The field Line.type has been removed and also the related stuff :
                    - The method Line.get_verbose_type().
                    - The constants PRODUCT_LINE_TYPE, SERVICE_LINE_TYPE & LINE_TYPES.
                    - The FunctionField '_LineTypeField'.
                - The views invoice.add_from_detailview() & invoice.add_with_relations() have been removed & replaced by invoice.add_related().
                - The view quote.add_with_relations() has been removed & replaced by quote.add_related().
                - The view sales_order.add_with_relations() has been removed & replaced by sales_order.add_related().
                - The method Base.get_lines() cannot be called with Line parameter anymore (use ProductLine or ServiceLine).
            * Projects :
                - The model ProjectTask does not inherit from Activity anymore (it inherits CremeEntity directly).
                  The fields 'title', 'start', 'end' & 'duration' have been copied from the Activity part.
                - The block TaskWorkingPeriodsBlock has been replaced by TaskActivitiesBlock.
                  The template file 'block_working_periods.html' has been renamed to 'block_activities.html'.
                - The model WorkingPeriod, the form WorkingPeriodForm & the views form views/workingperiod.py have been removed.
                  The method ProjectTask.get_working_periods() has been removed too ; use the property 'related_activities' instead.
                - In the Resource model:
                    - The field 'hourly_cost' is not nullable anymore, with 0 as default.
                    - The fields 'task' & 'linked_contact' are not editable anymore.
                - About ProjectTask views :
                    - The detailview()'s argument 'object_id' has been renamed to 'task_id'.
                    - The function delete() has been removed (the generic view is used).
            * Persons:
                - The ContactForm block ID 'coordinates' became 'details'.
                - The method Contact.get_user_contact_or_mock() has ben removed (it was deprecated).
                - In the view contact.add_with_relation(), the argument 'predicate_id' has been renamed 'rtype_id'.
                - Address._INFO_FIELD_NAMES has been removed.
                - The following 'persons' blocks are deprecated: ContactBlock, ContactCoordinatesBlock, OrganisationBlock, OrgaCoordinatesBlock.
                  They are no more used or registered.
                - The field 'name' is excluded in BillingAddressForm/ShippingAddressForm.
                - The related names for billing & shipping addresses have been removed ('billing_address_orga_set', ...).
                - The view contact.add_with_relation() has been renamed to add_related_contact().
                - _PersonCSVImportForm._save_address() & _PersonMergeForm._save_address() take an additional argument 'name'.
            * Creme_config :
                - In forms.field.CreatorModelChoiceField: the methods _build_create_action_url() & _build_widget() have been removed.
                  The property 'create_action_url' now returns the real used URL (ie: even it has not been set manually); the empty value is now '' (not <None> anymore).
            * Documents :
                - Folders are not unique by 'title' anymore ; the constraint is now: unique_together = ('title', 'parent_folder', 'category').
            * Geolocation :
                - The IDs of the blocks have been fixed.
            * Emails :
                - The view mail.get_lightweight_mail_body() returns now sanitized HTML.
            * Mobile:
                - The widget forms.EmailInput has been removed.
            * Activesync :
                - In the command 'activesync_options', the '-v' option is now like the other command ones :
                  it's an integer, & the long name is now '--verbosity'.

    Internal breaking changes :
    ---------------------------
    (they should not cause problem if you have not deeply modified the source code of Creme)
        # Caused by Django 1.6 :
            - Last viewed items are now stored as a list of dicts.
            - The method Block.__get_context() has been removed.
            - The method _BlockContext.update() does not take 'modified' argument anymore.
            - The _BlockContext child classes should implement the method as_dict().
        # Caused by Django 1.7 :
            - BasePopulator.dependencies now remains like ['creme_core', 'persons'] (there were dynamically transformed to ['creme.creme_core', 'creme.persons'])
            - The keys of _BlockRegistry._object_blocks are classes, not ContentType IDs anymore ;
              the method _generate_modelblock_id() takes now a class.
        # Lots of form fields have been reworked in order to be more Django compliant (principally the fields inheriting JSONField).
            - The method BatchActionsField._create_widget() has been removed.
            - The attribute BatchActionsWidget.fields is now a classical iterable of tuples (ie not a dict-like anymore).
            - The following (Multi)CreatorEntityField methods have been removed: _create_widget, get_ctype, _update_actions, _clear_actions, _add_action, _add_create_action.
            - The attribute MultiCreatorEntityField._widget_item removed.
            - The method FilteredEntityTypeField._create_widget() has been removed.
            - The methods RelationEntityField._create_widget() & MultiRelationEntityField._create_widget() have been removed.
            - The methods GenericEntityField._create_widget() & MultiGenericEntityField._create_widget() have been removed.
            - The method GenericEntityField._get_ctypes_options() has no 'ctypes' argument anymore.
            - There was many changes in EntityFilter form fields & widgets.
            - The method RelationExtractorField._create_widget() has been removed.
        # History:
            - HistoryLine.verbose_modifications property has been removed (replaced by get_verbose_modifications()).
            - _HistoryLineType.verbose_modifications() & _HistoryLineType._verbose_modifications_4_fields() take an additional 'user' argument.
        # forms.entity_filter.{RegularFieldsConditionsField|DateFieldsConditionsField}._build_related_fields(): there is an additional argument 'fconfigs'.
        # Now "/creme_core/entity/delete/multi" returns a list of errors (rendered in popup) instead of a simple string.
        # The template parameter 'hide_submit' has been removed and a 'is_inner_popup' (more useful) is added.
        # The forms & views which create/edit the detailviews blocks configuration have changed a lot.
        # core.search.Searcher.search() can now return 'None' (it means that all fields are hidden).
        # DateRangeWidget's choices are now empty by default (they are set by DateRangeField).
        # The function creme_core.views.generic.listview.list_view_content() does not set the key 'list_view_template' in the context anymore.
        # Templatetag creme_core.templatetags.creme_blocks.LineCreatorNode/LineSuppressorNode: the 'url' argument (a string) has been replaced by 'url_var' (a evaluable node).
        # Apps :
            * Persons:
                - persons.forms.merge.get_merge_form_builder() takes now a 'model' argument.
                - persons.forms.lv_import.get_csv_form_builder() takes now a 'model' argument.
                - persons.forms.base._BasePersonForm._init_address_fields takes now a 'fconfig' argument.
                - persons.forms.{merge|lv_import}._FIELD_NAMES & persons.blocks._ADDRESS_FIELD_NAMES have been removed.
            * Activities :
                - The view activity.add_fixedtype has been removed.
                - The method ActivityTypeField._create_widget() has been removed.
                - The JS function calendar.fullCalendar() takes one additional argument.
                - The JS function calendar.positionNavigationWidget() has been removed. The header positionning is now done in CSS.
            * Billing :
                - The JavaScript function creme.billing.generateInvoiceNumber() takes now an URL (not an ID anymore).
                - The block billing.blocks.BillingBlock is deprecated ; it is no more used or registered.
                - The view credit_note.add_related_credit_note() has been renamed link_to_credit_notes().
                - The JavaScript function creme.billing.multi_save_lines() has been renamed to multiSaveLines().
            * Creme_config :
                - _ConfigRegistry.get_app() :
                     - The argument's name is now "app_label".
                     - It raises a creme.creme_core.registry.NotRegistered exception instead of KeyError with unknown apps.
            * Vcfs:
                - VcfGenerator._INFO_FIELD_NAMES has been removed.
                - VcfGenerator.address_equality() is not a static method anymore.
                - VcfGenerator.generate_address() is not a static method anymore.
                - VcfGenerator.generate_name() has been removed.
                - There are a lot of changes in VcfImportForm.
            * Products :
                - In CategoryField, the following methods have been removed: _get_categories_options, _get_categories_objects, _create_widget.
            * Reports:
                - The JavaScript function creme.reports.openGraphEdition() takes an additional argument (URL).
            * Tickets :
                - AbstractTicket has been renamed TicketMixin (& there's a new AbstractTicket class).
            * Commercial :
                - The form strategy._AuxForm has no attribute '_strategy' anymore.
            * Documents :
                - _DocumentsTestCase._create_doc() returns the created Document (& not the response anymore).
            * Media_managers :
                -  The template 'media_managers/view_image_popup.html' has been removed ; it was not used anymore.
            * Emails :
                - The method _SynchronizationMailsBlock.detailview_ajax()' has been removed.
            * Polls :
                - The method PollFormLineConditionsField._create_widget() has been removed.
            * Activesync:
                - The function activesync.etutils.get_ns() has been removed (seems useless).
            * CTI :
                - The JS function creme.cti.phoneCall() takes one additional argument.


== Version 1.5 ==

  Users side :
  ------------
    # Mobile, a new app. It provides 3 views which are specifically adapted to the cellphones.
        - The 'Home' page displays the Activities in progress and the Activities of the days.
        - The 'Directory' page displays the favorite Contacts and Organisations (and their employees).
        - The 'Activities' page displays the delayed phone calls, the activities without date and the activities planned the next day.
        - You can search Contacts & Organisations, and create them.
        - When you click on a phone number, and come back to the browser at the end of the call, a workflow panel allows you to
          create a phonecall Activity (if it did not exist) and set its status.
        - The (alternative) login view is on the URL '/mobile/login/'.
    # Geolocation, a new app. It adds some geolocation features for the Contact and Organisation addresses.
      For the time being, it uses only GoogleMaps service. 3 new blocks are available :
        - "Maps" shows the location(s) of a Contact/Organisation in a map by using their addresses ; the latitude and the longitude can be manually dragged on the map.
        - "Maps By Filter" shows the locations of all Contacts or Organisations for a given filter.
        - "Around this address" shows all the neighbours of a selected address ; the neighbours can be filtered.
    # A detail view for the PropertyTypes, which shows the tagged entities, has been added.
    # The inner/bulk edition has been improved :
        - The widgets are the same the full form ones, and so :
            - The creator widgets are now used with configurable models (eg: Invoice.status).
            - The ForeignKeys to CremeEntities are now well managed (eg: Contact.image).
            - The ManyToManyFields are now supported (eg: Image.categories).
        - The form of a specific field can be customized in order to manage correctly its business logic (see 'Apps' section).
        - The support of related sub-fields (eg: Contact.billing_address__city) has been added.
    # List view :
        - The quick search on properties is now possible.
        - The natural ordering of the models is now applied as default for listview (eg: Organisation are ordered by their name).
          When a column is selected for ordering, both column order and default order are applied.
    # EntityFilters :
        - They can now be private ; it means that they can only be used by their owner.
        - The conditions on FK fields (eg: Invoice.status) can now use a multi-selection.
        - The Empty/NotEmpty operators are enabled only when a field can be null.
        - The Date fields (regular & custom ones) now supports the Empty/NotEmpty operators.
        - The EntityFilters created by the 'populate' scripts (ie: not custom) are now editable (but not deletable, and their name is not editable); their are versioned too.
          Their owner is now the first super-user (in order not all users can edit them).
          The versionning means that when a populate script is run again, if the script tries to create a filter which already exists (ie: its PK exists) :
            - if the new version would have the same conditions, the name of the existing filter is updated (in order to fix a potential typo).
            - if the conditions are different, a new filter with the old one PK as base for its own PK (plus a version mark) is created ; the name is versioned too.
    # Listviews Views (HeaderFilters) :
        - They can now be private ; it means that they can only be used by their owner.
        - The Views created by the 'populate' scripts (ie: not custom) are now editable (but not deletable).
          So, when the scripts are run again, the existing Views are not modified anymore (in order to keep the modifications of the users).
    # Global search :
        - The view uses now the GET method, so back button works well now.
        - The results blocks are now paginated.
        - The search on a model can be disabled in creme_config.
    # The CSV import can now set the CustomFields values.
    # You can now create an Entity "on the fly" with the multi-select widget for Entities.
    # A User and its related Contact are now synchronised (ie: first_name, last_name & email remain equal).
    # The autocompletion has been added to several forms, to select a content type or a relationship type.
    # The non mandatory instances are not re-created anymore when the command 'creme_populate' is run.
    # The ordering of models has been improved: lots of models are now ordered by name/title.
    # Apps :
        * Reports :
            - A Report can (again) be created with no column.
            - The download form has been improved.
            - The graphs can save a default chart (bar, pie, tube...) for their next rendering.
            - The number of queries computing the graph data has been reduced.
            - The field Report.filter can now be inner-edited.
            - The "volatile" links have been improved :
                - Their name is always up to date & localized.
                - When a link becomes invalid, the error is displayed in creme_config.
                - They can be any valid/compatible relationship/FK, and not only the ones which correspond to a column of the related Report.
            - The export view now uses GET parameters, so it can be bookmarked for example.
        * Activities :
            - The type of an Activity can now be edited (and not only its sub-type).
            - The Organisations of the participants can be automatically added as subjects (it can be configured and it is enabled by default).
            - The Activities can now be imported (ie: CSV/Excel files).
            - When a team is selected to be a participant, its teammates participate.
        * Persons:
            - You can now merge 2 Contacts if one of them is a user (but not 2).
            - A field 'order' has been added to StaffSize.
            - The field Organisation.siren is not unique anymore.
        * Creme_config :
            - You can not link an existing Contact when you create a User anymore.
            - SettingKey & SettingValue :
                - The values have a prettier display in their block (eg: 'True' is now a localized "Yes").
                - The descriptions are correctly localized.
            - The permissions for the views which configure RelationTypes, PropertyTypes, Blocks... have changed from 'creme_config.can_admin' to 'creme_core.can_admin'.
              The related portals do not need specific permissions anymore.
        * Commercial :
            - Commercial action :
                - A counted entity can be directly created with a quick form, from the objectives block.
                - A linked opportunity can be directly created from the 'Related opportunities' block.
        * Recurrents :
            - The field RecurrentGenerator.periodicity is now a DatePeriodField. It allows more accurate periodicity :
              for example, you can set a real 'monthly' period, which is not equal to 30 days.
            - The wizard form is now closer to other forms.
        * Emails :
            - The available sender address of the EmailCampaigns is now stored in a SettingValue.
        * Billing :
            - CSV import: in update mode, you can choose to update or not the addresses from the target.
        * Products :
            - The fields Product.category & Product.sub_category can now be inner-edited.
            - The summary (used in the Relationships form for example) does not display the images anymore.
        * Assistants :
            - The minimum hour for reminder is now configurable by the users (via a SettingKey/Value).
        * Tickets :
            - A field 'order' has been added to Priority, Criticity & Status.
        * Projects:
            - A field 'order' has been added to ProjectStatus & TaskStatus.
        * Polls :
            - The field PollReply.person can now be inner-edited.

  Developers side :
  -----------------
    Non breaking changes :
    ----------------------
        # Deprecations :
            - creme_core.utils.meta.get_model_field_info() (see FieldInfo)
            - creme_core.utils.meta.get_verbose_field_name() (see FieldInfo)
            - creme_core.utils.meta.get_date_fields()
            - HeaderFilter.can_edit_or_delete() (use can_edit()/can_delete() methods instead)
            - EntityFilter.can_edit_or_delete() (use can_edit()/can_delete() methods instead)
            - CremeEntity.get_real_entity_by_id()
            - creme_core.models.lock.mutexify()
            - Apps :
                * Persons :
                    - Contact.get_user_contact_or_mock().
                    - Address._get_info_fields() (use Address.info_fields instead).
                * Creme_config:
                    - The auto increment of 'order' field in creme_config is deprecated (use a BasicAutoField instead).
        # A new model field has been added: BasicAutoField ; it's a PositiveIntegerField which uses an autoincremented value when no value is given
        # A new class, FieldInfo, has been added in order to replace the function get_model_field_info().
        # 2 new SettingKey types have been added : HOUR, EMAIL.
        # A new DatePeriod system has been added (with a related model & form fields).
        # A new decorator for the view is available : creme.creme_core.auth.decorators.permission_required
          It raises a 403 error (django.contrib.auth.decorators.permission_required redirects to login).
          Notice that login_required is available in creme.creme_core.auth.decorators too.
        # The database mutex tools have been improved :
            - A new decorator has been added : creme.creme_core.models.lock.mutex_autolock.
            - A new Context Manager (for "with" statement) has been added : creme.creme_core.models.lock.MutexAutoLock.
        # The logging configuration has been improved. See LOGGING* properties in settings.py for more information.
        # A new assertion, assertDatetimesAlmostEqual(), is available.
        # The ForeignKeys have 2 new methods : get_null_label() & set_null_label(). The null_label allows a pretty display of null values.
        # A new collection is available: ClassKeyedMap ; it is kind of dictionary where key must be classes and which manages inheritage.
        # The file 'requirements.txt' has been cleaned, and the recommended versions of these packages
          have been upgraded: Pillow, xlrd, south, pycrypto & restkit.
        # Apps :
            * Reports :
                - A registry for types of charts (which allows to add custom ones) has been created.

    Breaking changes :
    ------------------
        # Python 2.7 is now the only supported version.
        # Deprecated stuffs which have been removed :
            - The function creme_core.utils.Q_creme_entity_content_types().
            - Two methods in Opportunity: get_target() & get_source().
            - All the deprecated credentials methods in CremeEntity :.
                - can_change() & can_change_or_die()
                - can_delete() & can_delete_or_die()
                - can_link() & can_link_or_die()
                - can_unlink() & can_unlink_or_die()
                - can_view() & can_view_or_die()
                - populate_credentials()
            - The form fields _EntityField/CremeEntityField/MultiCremeEntityField and the associated widget ListViewWidget.
            - JavaScript:
                - creme.utils.simpleConfirm()
                - creme.utils.postNReload()
        # The 'user' argument was removed from several methods :
            - Relation.populate_real_object_entities()
            - CremeEntity.populate_relations()
            - EntityCell.populate_entities()
            - HeaderFilter.populate_entities()
        # The method CremeEntity.get_edit_absolute_url() now returns '' (and not an invalid URL anymore) which means 'No edition' ;
          the base templates/templatetags use this official behaviour (view_entity.html, {% get_edit_button ... %}).
        # _BulkUpdateRegistry.register() args have changed. It is not anymore a list of tuples (model, list_of_field_names),
          but now it allows to register only a model at once, an optional list of field names, and an optional dict of custom forms.
        # ManyToManyFields are now inner-editable by default ; so you have to manage them with bulk_update_registry.register(MyModel, ...)
          if it causes a business logic problem (by excluding them, or adding a custom form for them).
        # SettingKey & SettingValue :
            - The SettingKey class is not a model anymore ; the SettingKey instances should be created
              in a setting_keys.py file and registered in your creme_core_register.py (see setting_key_registry).
            - The model SettingValue :
                - It has moved to creme_core (creme_core.models.setting_value.py).
                - The field  'key' (ForeignKey) has been replaced by a 'key_id' field (CharField) ;
                  so you could have to change some of your queries (eg: '.filter(key=MY_KEY)' --> '.filter(key_id=MY_KEY)').
        # HeaderFilter.create() :
            - It does not modify an existing HeaderFilter anymore.
            - The owner cannot be a staff user.
        # EntityFilter.create() :
            - If the argument 'is_custom' is False, you have to give the conditions as argument too (this is a new argument) ;
              a new filter is created if the conditions (or the 'use_or' field) are different ; if there are identitical, the name is updated.
            - The owner cannot be a staff user anymore.
            - The characters '[]' are now forbidden in the PK (ValueError).
            - The 'ct' & the 'is_custom' value can not be changed if there is already an existing filter (ValueError).
        # _FieldPrintersRegistry :
            - The functions registered as field printers take now an additional 'field' argument.
            - The attributes css_default_listview & css_default_header_listview have been removed.
            - The method get_listview_css_class_for_field() & get_header_listview_css_class_for_field() can not take 'None' as argument anymore.
        # Templatetags :
            - 'enumerate' has been removed.
            - 'print_boolean' always returns a boolean widget (it does not check if the argument is a boolean anymore).
        # CSV import : ImportForm._post_instance_creation() takes now an additional argument 'updated'.
        # Reminders :
            - The Reminder class has changed :
                - The attribute 'id_' has been renamed 'id'.
                - The attribute 'model_' has been renamed 'model'.
            - The models which can be reminded must have a boolean field called 'reminded' (so assistants.ToDo & assistants.Alert have been updated).
        # The class creme.creme_core.core.entity_cell.EntityCellRegularField has changed : the property 'field_info' returns now a FieldInfo instance.
        # The variable settings.SHOW_HELP has been removed.
        # Apps :
            * Recurrents :
                - The forms given to the registry must take a new 'ct' argument ; the 'initial' argument is not set anymore.

    Internal breaking changes :
    ---------------------------
    (they should not cause problem if you have not deeply modified the source code of Creme)
        # The view creme_core.views.clean.clean() has been removed.
        # The old bulk edition URLs have been removed :
            /creme_core/bulk_update/[...]
            /creme_core/edit/[...]/[...]/field/[...]
          Use now:
            bulk edition : /creme_core/edit/bulk/[...]/[...]/field/[...]
            inner edition : /creme_core/edit/inner/[...]/[...]/field/[...]
        # The old bulk widget URL has been removed : /creme_core/get_widget/[...]
        # The bulk edition forms EntitiesBulkUpdateForm & EntityInnerEditForm have been removed
          and replaced by BulkForm and BulkDefaultEditForm.
        # The useless template file creme_core/templatetags/widgets/block_listview_field_editor.html has been removed.
        # The listview popup URL /creme_core/lv_popup/[...] has been changed to /creme_core/list_view/popup/[...].
        # The model SearchField has been removed, & replaced by the new TextField SearchConfigItem.field_names.
        # The attribute ImportForm4CremeEntity.columns4dynrelations has been removed (there is an ImportForm.choices attribute instead).
        # The HeaderFilterList's constructor takes now a mandatory 'user' argument.
        # The EntityFilterList's constructor takes now a mandatory 'user' argument.
        # Global search :
            - The view ('/creme_core/search') uses now the GET method and returns a complete page.
            - The method SearchConfigItem.get_4_model() is deprecated; use SearchConfigItem.get_4_models() instead.
            - The templatetag {% get_search_panel %} does not take argument anymore.
            - The JavaScript function creme.utils.handleResearch() is deprecated.
        # The view creme_core.views.enumerable.json_list_enumerable() returns now tuples (id, label, group) for EntityFilter (instead of tuples (id, label) ).
        # The inner classes PolymorphicInput.Model & ChainedInput.Model have been removed.
        # The method Relation._collect_sub_objects() has been removed.
        # JavaScript :
            - The function creme.lv_widget.init_widget() has been removed.
            - The methods creme.lv_widget.handleSelection() and creme.lv_widget.delete_a_value() are now deprecated.
            - Move some methods from utils.js to block.js :
                - creme.utils.tableExpandState -> creme.blocks.tableExpandState
                - creme.utils.tableIsCollapsed -> creme.blocks.tableIsCollapsed
                - creme.utils.tableExpand      -> creme.blocks.tableExpand
                - creme.utils.bindTableToggle  -> creme.blocks.bindTableToggle
        # Apps :
            * Reports :
                - The ReportField has change, in order to separate the aggregates on regular fields & custom fields.
                    - RFT_AGGREGATE has been replaced by RFT_AGG_FIELD.
                    - RFT_AGG_CUSTOM has been added.
                - The form report.DateReportFilterForm has been removed.
                - The export URLs have changed :
                    /reports/report/preview/[...] became /reports/export/preview/[...]
                    /reports/report/export/[...]/[...] became /reports/export/filter/[...]
                - The function reports.core.graph.fetch_graph_from_instance_block has been replaced by the static method ReportGraph.get_fetcher_from_instance_block().
                - The templatetags report_[barchart|piechart|tubechart]_json have been replaced by the generic one report_chart_json.
            * Opportunities :
                - In the forms.lv_import module, SalesPhaseExtractor, SalesPhaseExtractorWidget & SalesPhaseExtractorField have been removed.
            * Activities :
                - _ActivityForm.participants is now a set (it was a list).
                - ParticipantCreateForm.participants is now a set too.
            * Assistants :
                - The field ToDo.has_deadline has been removed.
            * Activesync :
                - The function create_or_update_function() has been renamed create_or_update_position().
                - The class wbxml.Accessor has been removed.
            * Recurrents :
                - The field RecurrentGenerator.periodicity is now a DatePeriodField.
                - The fields RecurrentGenerator.ct & RecurrentGenerator.template are not editable anymore.
                - The fields RecurrentGenerator.first_generation & RecurrentGenerator.last_generation are not nullable anymore.
                - The Periodicity model has been removed.
                - The method RecurrentRegistry.get_all_templates() has been replaced by the property RecurrentRegistry.ctypes.
                - The deprecated wizard-view function has been replaced by a class based view.


== Version 1.4 ==

  Users side :
  ------------
    # The HeaderFilter (listviews Views) form has a new UI :
        - You can now choose the order for all columns.
        - The UI is more compact and friendly (filter, search, drag n' drop).
    # Customisable object & relation blocks. You can choose the same fields as in HeaderFilter form (& the UI is very close too).
    # EntityFilter :
        - A new condition is available for ForeignKeys to User : current user.
        - The operators are now filtered according to the selected field's type (regular & custom fields).
        - Enumerable field choices are now displayed in a combobox (instead of a simple text field).
    # CSV import can now update existing entities instead of always creating them ; you can select several fields that act as a key.
    # The 'Ice cream' theme has been improved again : better contrast, separation lines, drop shadows...
    # There are some User management enhancements :
        - The super users can now deactivate common users from creme_config (ie: in a graphical manner).
        - The field User.is_staff is now used by Creme : the staff users are hidden from other users, and they cannot be selected to own entities for example.
          The staff users are used to help the other users, but they should not participate in the business.
          Staff users are created by the django command 'createsuperuser' (but the first super user created after the syncdb command is not a staff user).
    # Minor UI improvements in forms :
        - Labels for submit buttons are now better ; for example 'Save the contact' instead of 'Submit' in the Contact creation form.
        - A 'Cancel' button is available in lots of forms.
        - A new JavaScript widget (CheckListSelect) is now used for multi-selecting without ordering : it uses check boxes and allows filtering/searching.
        - The order of the buttons in popups is now : OK/Cancel.
        - A new field to select several entities MultiCreatorEntityField replaces MultiCremeEntityField (but it does not allow inline creation yet).
    # Improved CSS for list views (fields are aligned differently according to their type).
    # A new pager for blocks has been added ; it manages large numbers of pages better.
    # A new command, called 'creme_uninstall', has been added : it can uninstall a Creme app in the good way.
    # A Unicode Collation Algorithm (derived from pyuca) is used to sort :
        - The apps in the menu, the creme_config portal, the UserRoles configuration.
        - The fields in the HeaderFilter form & in the search configuration.
        - The ContentTypes in <select>.
        - ...
    # JavaScript : some fallbacks for IE8 & 9 have been added. The support of IE 7 has been dropped.
    # The column titles in the list views are always up-to-date (before, they were computed during columns edition).
    # The error handling in inner popups has been improved.
    # A view for 409 errors has been created.
    # Apps :
        * Polls, a new app :
            - You can create a PollForm, which contains questions organised in sections, sub-sections etc...
            - Questions have a type (string, integer, boolean, enumeration...).
            - Questions can have conditions on previous questions : a question is activated only if its conditions are filled.
            - You can create several PollReplies from a PollForm, which snapshot the questions of the form.
            - A PollReply can be filled with a wizard, and answers can be edited later.
            - The PollReplies can be grouped by PollCampaigns.
        * Reports :
            * When you create a new Report, you can only select the columns from an existing HeaderFilter.
            * A new UI for the columns edition has been added, and it uses the work on the new HeaderFilter form.
            * ReportGraphs :
                - The form has been improved. Example : the field 'Is count' is already checked if there is no available aggregable field.
                - Only the ForeignKeys related to enumerable models are available (see the notes on 'enumerable' tag below) for the abscissa.
                - CustomFields are now available for abscissa & ordinate.
                - The graph design has been heavily enhanced. The data is emphasized by a clearer display :
                  many useless/annoying visual elements were removed, legends are better, many glitches were fixed...
            * Several behaviours have been fixed :
                - The column titles are now always up-to-date (before, they were computed during columns edition).
                - The 1st level entities are filtered by credentials ('view' permission).
                - When a FK field is linked to a sub-report, if a related entity does not pass the subfilter, the line is not dropped any more (related values are just empty).
                - The flattened sub-reports (ie not expanded, see 'selected' attribute) in columns associated to ManyToManyField/ForeignKey/related fields are now used.
                - The flattened sub-reports manage now all types of columns.
                - The aggregates are computed in a scope (so result may be different with an aggregate in a sub-report). 
            * Invalid columns are automatically removed (eg: removed CustomField).
        * Activities, the calendar has been heavily improved :
            * The version of fullcalendar.js has been updated from 1.4.5 to 1.4.7.
            * A new menu has been created, with :
                - Floating activities ; they can be drag n' dropped on the calendar, and filtered by their name.
                - All your calendars & the public calendars of all the other users.
                  Several calendars can be shown together (they have different colors) and they can be filtered by their name, or the first name and last name of their owner.
        * Billing :
            - The creation and the edition of billing lines have been redesigned, in order to use more client side computation.
            - A new field 'acceptation_date' (DateField) has been added to the Quote model.
            - A new field 'pending_payment' (BooleanField) has been added to the InvoiceStatus model.
            - 3 function fields are dynamically added by the 'billing' app to the models Organisation and Contact :
                - Total of pending payment.
                - Total number of won quotes this year.
                - Total number of won quotes last year.
        * Opportunities :
            - Opportunity.target field is now editable.
        * Products:
            - 'images' are now displayed in a true block (Products & Services).
        * Projects :
            - The Project.name field is not nullable anymore.

  Developers side :
  -----------------
    Non breaking changes :
    ----------------------
        # A new field tag has been created : 'enumerable'. When a ForeignKey is tagged as enumerable, it means that the related model
          can be enumerated, ie there are a limited number of instances. Eg : persons.models.Position are enumerable, but not persons.models.Address.
        # JavaScript :
            * A basic object derivation support (see creme.component.Component) has been added.
            * A simple event handling tool (creme.component.EventHandler) has been added.
            * The 'disabled' attribute now works with widgets.
            * The following widgets use collection models and new rendering tools :
                - CheckListSelect.
                - PolymorphicSelect.
                - DynamicSelect.
            * The popup system has been refactored :
                - creme.utils.simpleConfirm() is deprecated ; use creme.dialogs.confirm() instead.
                - You should use creme.utils.showInnerPopup() only for compatibility with actual popup templates (see creme_core/templates/creme_core/inner_popup.html)
                - creme.dialog.Dialog is the new base dialog object.
                - creme.dialog.ConfirmDialog shows a message and has OK/Cancel buttons.
                - creme.dialog.FormDialog has Save/Cancel buttons and handles form errors.
                - creme.dialog.SelectDialog has OK/Cancel buttons and an API to return a value when it is closed.
                - Many helper functions were added in creme.dialogs.
            * The AJAX actions have been improved :
                - creme.utils.postNReload() is deprecated ; use creme.blocks.ajaxPOSTQuery() instead.
                - A new API for requests has been added : creme.ajax.Query.
                - Many helper functions were added in creme.utils and creme.blocks for AJAX actions with confirmation, reloading and error dialogs.
        # New form fields were added : MultiCTypeChoiceField & MultiEntityCTypeChoiceField. They use the cache of ContentType.
        # CremeEntityField & MultiCremeEntityField form fields are now deprecated ; ListViewWidget too.
          use CreatorEntityField & MultiCreatorEntityField instead.
        # The function creme_core.utils.Q_creme_entity_content_types() is now deprecated.
        # The old migration scripts have been folded.
        # Apps :
            * Activities :
                - Calendar now has a field 'color'.
            * Billing:
                - The following constants are deprecated : PERCENT_PK, AMOUNT_PK & DISCOUNT_UNIT.
            * Opportunities:
                - The methods Opportunity.get_target() & Opportunity.get_source() are now deprecated.
            * Reports :
                - The code has been heavily refactored, and a lot of work is now done in the new reports.core module.

    Breaking changes :
    ------------------
        # The model HeaderFilterItem has been removed, & HeaderFilter now stores the columns in a new field called 'json_cells'.
          It contains a JSON serialisation of instances of the new class EntityCell (which is used by new configurable blocks too).
          So the HeaderFilter.create() static method has changed : it takes EntityCells instances now.
        # The global_info 'username' (string) has been replaced by 'user' (User instance).
        # The JavaScript function creme.utils.loadBlock() has been removed ; use creme.blocks.reload() instead.
        # 3 useless views in creme_core have been removed :
            - /creme_core/entity/get_fields
            - /creme_core/entity/get_function_fields
            - /creme_core/entity/get_custom_fields
        # The method Relation.update_links() has been removed (it was deprecated).
        # 2 Relation URLs have been modified :
            - /creme_core/relation/entity/.../predicates/json       ==> /creme_core/relation/entity/.../rtypes/json
            - /creme_core/relation/predicate/.../content_types/json ==> /creme_core/relation/type/.../content_types/json
        # The function creme_core.utils.currency_format.currency() can now take a Currency instance instead of a Currency ID ;
          idem with the templatetag 'format_amount'.
          API breaking : 'currency_id' argument changed to 'currency_or_id'. 
        # The unused form field _CommaMultiValueField has been removed.
        # Several elements in creme_core.utils.meta have been deleted :
            * The exception class NotDjangoModel.
            * The functions :
                - get_function_field_verbose_name.
                - get_related_field_verbose_name.
                - filter_entities_on_ct.
                - get_fk_entity.
                - get_m2m_entities.
                - _get_entity_column.
        # In titles of blocks (inside {%get_block_header%}) the "collapser" css class is no longer needed and will cause issues.
        # Apps :
            * Activities :
                - The field ActivityType.color has been removed.
                - The JS function creme.activities.calendar.setReadableColor() has been removed.
            * Media_managers :
                - ImageM2MWidget has been removed.
            * Billing :
                - The Vat model has been moved to creme_core.
            * Reports :
                * About the reports.Field model :
                    - The field 'report' has been renamed to 'sub_report'.
                    - The field 'title' has been removed.
                    - A new ForeignKey field 'report' has been added in order to replace the field Report.columns (ManyToManyField).
                * Several useless templatetags were removed :
                    - get_report_chart.
                    - get_report_chart_selectors.
                    - verbose_abscissa.
                    - verbose_ordinate.
            * Emails :
                * Lots of changes in its JS file :
                    - creme.reload_synchronisation() has moved to creme.ajax.reloadContent().
                    - creme.emails.mass_action() was replaced by creme.blocks.massAction() (arguments are different).
                    - creme.emails.mass_relation() was replaced by creme.blocks.massRelation() (arguments are different).
                    - creme.emails._processDone() has been removed.
                    - creme.emails.resend() & creme.emails.confirmResend() have no 'url' & 'complete_cb' arguments anymore.


== Version 1.3 ==

  Users side :
  ------------
    # Form widgets improvements :
        * New selector widgets, that can also create instances (and automatically
          select the newly created instances).
            - For small models, like persons.Sector or billing.InvoiceStatus (used almost everywhere).
            - For Entities, like the Document chosen in the CSV import (used only in a few places).
        * Auto-completion (thanks to chosen.js) in some widgets (Relationships creators).
        * Cache system used by some widgets (Relationships creators, Entities selectors).
    # New feature : Trash, that contains deleted Entities. These entities are generally not displayed (in list views for example), they have a different detailview, and can be definitively deleted.
    # Credentials improvements:
        * New implementation that is much faster (no more SQL JOIN).
        * The GUI to set the credentials has been improved.
    # History: new events are logged.
        - Relationship deletion.
        - Property deletion.
        - Creation, edition & deletion of auxiliary instances (ToDo, Bill line etc...).
    # The version of Django is now 1.4 :
        - All datetimes use now timezones. Each user can choose its own timezone in its configuration panel.
        - Translations contexts are now possible in the templates, so several labels have been fixed.
    # Entities can now be imported & exported with the XLS format (previously, only CSV format was available) ; thanks to libs 'xlrd' & 'xlwt'.
    # The theme 'Icecream' has been reworked (icons, css).
    # The 403 view has been improved : it is more beautiful, and it now displays
      the problematic dependencies when a deletion fails.
    # Many fallbacks for IE(7,8) were added.
    # Apps :
        * Activities :
            - PhoneCall, Meeting & Tasks models has been removed, their data were moved in the Activity model.
            - Activities can now have a SubType (eg: 'Incoming' for PhoneCalls).
            - You can now omit the start & end dates (then, Activity is floating) or only give the dates but not the hours (floating time).
            - The Relationship "is subject of activity" is now only compatible with the following types :
              Contact, Organisation, Invoice, Quote, SalesOrder, Opportunity, Ticket.
            - There is no more popup to choose the RelationType when you create a related Activity (it is automatically chosen).
        * Reports :
            - You can click on the shapes of a graph to go to the corresponding list view.
            - The graph code uses now the lib 'jqplot'.
            - A new graph type is available : tube.
            - Reports can now be downloaded as XLS files (previously, only CSV format was available).
        * Persons :
            - 'Civility.short_cut' field has been added.
            - You can create billing & shipping addresses directly from their block.
        * Billing:
            - CSV import for Invoice/Quote/SalesOrder is now OK.
            - 'expiration_date' field is no more required in forms.
        * Opportunities :
            - The fields 'Origin.description' & 'SalesPhase.description' have been removed.
            - CSV import is now OK.
        * Commercial:
            - Objectives: Entities can now be counted with a Filter.
        * Documents :
            - 'Folder.description' field is now nullable (ie: no more required).
        * VCFS :
            - Can export a Contact as a VCF file.

  Developers side :
  -----------------
    # The project layout has changed with Django 1.4 :
        - Apps are imported with namespace 'creme' (eg: 'creme.persons' instead of 'persons').
        - The script 'manage.py' is now at the root of the project.
    # Root 'urls.py' generates now automatically urls of all Creme apps : so you don't have to modify this file when you add an app anymore.
    # Credentials changes:
        * Permissions method in CremeEntity are now deprecated, and replaced by new methods in User.
            - CremeEntity.can_*{_or_die} methods are deprecated : use User.has_perm_to_*{_or_die} methods instead.
            - CremeEntity.populate_credentials is deprecated (delete the uses, because they are now useless).
        * The view creme_core.views.generic.edit.edit_model_with_popup() checks now the CremeEntity edition credentials (when the given model is a CremeEntity of course).
        * The credentials on models are now possible (eg: you can know if the user could link a Contact that is not created yet).
    # Lots of changes in creme_core.utils.meta :
        - New system of tags for models fields. Right now, 2 tags are available : 'viewable' & 'clonable'.
        - The following functions have been removed : get_flds_with_fk_flds(), get_flds_with_fk_flds_str().
        - The following functions have been renamed : 
            get_field_infos() became get_instance_field_info()
            get_model_field_infos() became get_model_field_info()
    # In CremeAbstractEntity class 'excluded_fields_in_html_output' and 'header_filter_exclude_fields' attributes have been removed (tags are used instead).
    # New attribute in CremeModel (so, in CremeEntity), 'creation_label', that contains the (localized) string used by forms, buttons etc... that create instances.
    # The code manages better the invalidation of model fields.
      HeaderFilters, EntityFilters & Histories check now at runtime if they handle invalid fields (and they modify themselves to ignore them).
    # New model field : 'CTypeForeignKey'. It uses the cache of ContentType manager, when ForeignKey(ContentType, ...) does not.
    # Unit tests for JavaScript code.
    # Blocks system :
        - Dependencies can be '*' (that means: "all models").
        - New attribute 'read_only' (boolean) ; if it is set to True, reloading this block will not force the blocks which share its dependencies to be reloaded too.
        - The 2 previous features are used by creme_core.blocks.HistoryBlock.
        - New templatetag 'get_block_footer'.
    # Relation model:
        - The method update_links() is now deprecated.
        - The unused method getCreateLang() has been removed.
        - __unicode__() no more returns an HTML string.
    # The arguments of the command 'creme_populate' have changed, in order to be like other django commands.
    # New command : 'i18n_overload'. It can generate a .po file with all MSGIDs that contain a given word (in order to overload a term).
        - 'verbosity' is now an integer, given with 'verbosity=VERBOSITY' (no more '-v' argument).
        - App names are simply the final arguments (no more '-a' argument).
    # FormBlock has been improved : you can now iterate on blocks that have not been retrieved 'manually'.
    # The unused view '/creme_core/entity/json' has been removed.
    # The form widget 'UploadedFileWidget' has been removed.
    # The setting DEFAULT_EMAIL_FOR_REMIND has been deleted ; DEFAULT_USER_EMAIL is used instead.
    # Apps :
        * Opportunities :
            - Opportunity.emitter & Opportunity.target properties added.
        * Emails : settings have changed.
            - CREME_EMAIL_SERVER => EMAILCAMPAIGN_HOST
            - CREME_EMAIL_PORT => EMAILCAMPAIGN_PORT
            - CREME_EMAIL_USERNAME => EMAILCAMPAIGN_HOST_USER
            - CREME_EMAIL_PASSWORD => EMAILCAMPAIGN_PASSWORD
            - EMAILCAMPAIGN_USE_TLS => added
            - SENDING_SIZE => EMAILCAMPAIGN_SIZE
            - SENDING_SLEEP_TIME => EMAILCAMPAIGN_SLEEP_TIME
        * Reports :
            - The templatetags files 'report_tags.py' and 'graph_tags.py' have been merged in 'reports_tags.py'
            - Several templatetags have been removed: get_column_header, get_html_column_value, get_value_at.



== Version 1.2 ==

  Users side :
  ------------
    # New inner edition feature : the most fields can be edited directly in the detail/list views.
    # A new view that merges 2 entities.
    # Light batch process : several entities returned by a filtered are modified with the same pattern :
        - String actions : 'To upper case', 'To lower case', 'Prefix', 'Suffix', 'Remove a sub-string'...
        - Integer actions : 'Add', 'Subtract', 'Multiply', 'Divide'.
    # New SemiFixedRelationType model that allows to accelerate the creation of Relation when one branch is always the same.
    # The deletion of small models (status/sector etc...) is better managed (protected or FK are set to NULL).
    # CSV import : the 'dialect' of the CSV file is now guessed.
    # Apps :
        * Emails :
            - The raw text and the HTML text of the bodies of emails (standalone ones and grouped by campaigns ones) can be written separately.
            - A standalone email can be created from a template as base.
        * Billing :
            - Line management was improved : you can create/edit/delete several lines at once.
            - Line fields can be edited directly.
            - Status of Invoice/Quote/Sales Order/Credit Note are ordered by config.
            - Numbers of Invoices are now editable, and all status can be chosen at creation.
        * Activities :
            - List views for meetings and phone calls.
            - Activities can be created directly in the Calendar view.
            - The view to add participants from the detailview of an Activity has been improved (it manages users like in the Activity creation view).
        * Assistants :
            - New FunctionFields for 'Todos', Memos' & 'Alerts'.
        * Opportunities :
            - Sales Phases are ordered by configuration.
        * Persons :
            - First name is no more required.
            - Siren is now unique or empty.
            - When the photograh is deleted, the Contact is no more deleted (FK is set to NULL).
        * Documents:
            - When a Folder is not empty, it can not be deleted any more (old behaviour: all the Documents in the Folder were deleted too).
        * Commercial:
            - The relationship type 'is related to the opportunity' has been removed.
    # Bug fixes :
        * Creme_config: only superusers can create/edit Users.
        * Activities: 'participates' relationship is now internal (to manage correctly Calendars).
        * Internal relationships are no more automatically cloned (eg: it caused problems when cloning an Organisation targeted by an Invoice).
        * Some HTML escaping problems fixed.
        * ...

  Developers side :
  -----------------
    # Upgrade to jquery 1.6.2 & jquery ui 1.8.15.
    # Improvements for FunctionFields (old API is broken) :
        * Return FunctionFieldResult objects (which can be easily serialised in HTML & CSV outputs).
        * Can now easily inject FunctionFields in a model.
    # In Billing app, the Line API was changed to be less error-prone (old API is broken).
    # Creme_config : handles automatically the ordering of models with a field 'order'.
    # The API of instance blocks has changed.
    # The API of BulkUpdateRegistry has changed.



== Version 1.1 ==

  Users side :
  ------------
    # Blocks :
        * New blocks :
            - 'History' (timeline).
            - 'Received billing documents'.
        * Blocks with state (open/close & show/hide empty fields) :
            - Blocks are now faded when folded ; icon is reduced, and buttons reduced.
            - Empty fields can be hidden.
        * New blocks locations system :
            - Nearly all blocks are now configurable (can be placed, or even removed).
            - Detailviews : the blocks can be located on top, left side, right side or bottom.
            - Portal & home : are now separated from the content types blocks configuration.
            - New view "My page" : it looks like the "Home" view, but each user can set the present blocks.
        * All relations blocks are reloaded when a change occurs on a block dependent from relations.
    # Deletion of users (& teams) with files assignation to an other user.
    # UI :
        * Improved scrolling for the side menu.
        * Portals have not yet the same name in the preferred menu.
        * Can delete all (allowed) relations on relation block in one click.
        * Lots of choices are now smartly ordered (eg: predicates in relation creation popup).
    # Credentials improved :
        * Credentials by type of Entity (ContentType).
        * Exportable types credentials (to export a listview for these types as CSV files).
    # Theme manager ; 2 themes are embedded : the old one become "Chantilly", and a new one has been created ("Ice cream").
    # Apps :
        * Crudity :
            - Crudity can handle forms submitted by infopath.
            - Multi-line in Crudity emails and better dates handling.
            - Crudity sandbox can be by user.
            - Parser improved.
        * Billing : currency management. For each billing Entity you choose the currency, and the displays of amounts are better.
        * Activesync : Can limit mobile synchronization to contacts or calendars.
        * Vcfs (NEW app) : you can now import a Contact (and the related Organisation) from a vCard.
    # Bug fixes :
        * Credentials problem in billing lines.
        * Billing lines were not added to the billing documents created from an Opportunity with related Products/Services.
        * Image file duplicated when an Image was edited.
        * ...

  Developers side :
  -----------------
    # Helper methods to build HeaderFilterItem objects.
    # Template tag 'get_html_field_value' replaced by a new one, 'print_field'.
    # New object block system: all blocks (at least on detailviews) are now 'true' blocks.
    # Database migration system with South.
    # Django official version for Creme is now 1.3.
    # Deletion system is now better (thanks to Django 1.3) :
        * New delete handlers for FK.
        * Delete management for models with internals relations types.
        * Base delete can handle auto file deletion.
    # Removed Lock model & add Mutex model.
    # Configuration portal of an app can be generated with only SettingKey/SettingValue.
    # User settings blocks are now registrable in creme_config.
    # Fix the small but annoying bugs that prevented Creme to run correctly with PostgreSQL.
    # Documentation for people who want to install Creme on Windows.
    # Code clean-up (in .js files for example), lots of unit tests were added.
