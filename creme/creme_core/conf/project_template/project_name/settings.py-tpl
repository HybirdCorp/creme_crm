# Django/Creme settings for {{ project_name }} project.
#
# Generated by 'creme creme_start_project' using Creme {{ creme_version }}.
#
# Creme extends the Django's settings:
#  - Full list of Django's settings:
#    https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
#  - Extended settings are in the file /path_to_creme/creme/settings.py

from creme.settings import *  # NOQA

# PROJECT SETTINGS -------------------------------------------------------------
# These settings are the same for everybody: developers & production

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

# Language used to populate to the Database with minimal data ;
# so you should set it to the language of your users if possible.
# Other available languages (may evolve with new Creme releases): 'fr'
LANGUAGE_CODE = 'en'

# Local time zone used for this installation (like the strings inserted in
# Data Base by the command "creme_populate") & interpreted as the default user
# time zone (when USE_TZ is True, which is the case by default in creme.settings).
# Choices ('Europe/Paris', 'America/Chicago', 'Asia/Tokyo' etc...) can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# (although not all choices may be available on all operating systems).
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'Europe/London'

# The list of apps is stored by INSTALLED_APPS ;
# you can see their descriptions in /path_to_creme/creme/settings.py
# Notice that the descriptions give also the dependencies.
#  - You can ignore this variable & so you will use the default list of apps.
#  - To add an app, use the method '.append()'.
#    For example:
#       INSTALLED_APPS.append('creme.mobile')
#  - To remove an app, use the method '.remove()'.
#    BEWARE: remove only apps which are in the section 'CREME OPTIONAL APPS'.
#    For example:
#       INSTALLED_APPS.remove('creme.tickets')

# Path to the python file generated by the command 'generatemedia' which
# contains the names of the final assets (with MD5 hashing).
# The folder containing the generated file must be WRITABLE.
# You can leave it commented if you have ONLY ONE creme project in the
# current virtualenv (in this case the path of the file will look like
# '/path_to_virtualenv/bin/_generated_media_names.py', which is generally OK).
GENERATED_MEDIA_NAMES_FILE = BASE_DIR / '_generated_media_names.py'

# Python module corresponding to GENERATED_MEDIA_NAMES_FILE
GENERATED_MEDIA_NAMES_MODULE = '{{ project_name }}._generated_media_names'

# Absolute filesystem path to the directory that will hold user-uploaded files,
# and files that are generated dynamically (CSV, PDF...).
# Must be writable of course.
# Example: "/var/www/example.com/media/"
MEDIA_ROOT = BASE_DIR / 'media' / 'upload'

# Absolute path to the directory static files should be collected to.
# Example: "/var/www/example.com/static/"
STATIC_ROOT = BASE_DIR / 'media' / 'static'

# Broker's URL (communication between the views and the job scheduler)
# It's a URL which starts by "type://".
# Currently, there are 2 queue types:
#  - Redis (type: "redis"):
#     It needs a Redis server to be launched, and the python package "redis".
#     It's multi-platform & distributed, so it's currently the default choice.
#     The URL follows this pattern: redis://[:password]@host:port/db
#     (password is optional; port & db are integers)
#  - Unix socket (type: "unix_socket"):
#     It needs a POSIX Operating System (*Linux, *BSD, ...).
#     The web servers & the job scheduler must run on the same machine.
#     Example of URL: unix_socket:///tmp/creme/
#      Remarks:
#         - The directories of the URL which do not exist will be created by
#           the scheduler (here "creme/", you do don't have to create it &
#           simply use /tmp as usual).
#         - The system user who runs Creme must have the permission to read &
#           write in the given directory of course.
#         - An additional/temporary directory "private-{username}/", containing
#           a file named "socket", will be created dynamically. So your URL just
#           have to indicate the parent directory.
JOBMANAGER_BROKER = 'redis://@localhost:6379/0'


# LOCAL SETTINGS ---------------------------------------------------------------
# These settings are specific to each user ; the values for the developers and
# the production are generally different :
#  - developers can enable the debug mode.
#  - the secret key use should not be shared.
#  - developers can use SQLite while the production use MYSQL/PostGreSQL
#  ...
# Local settings can override projects settings of course.
#
#  Important local settings (see details in example local_settings.py)
#   - ADMINS
#   - SECRET_KEY
#   - DATABASES
#
# The information from the section "EMAILS [internal]" of 'creme.settings.py'
# should be overridden if you want that your users receive e-mails from
# Creme (ToDos, Alerts...). These information can be filled/changed later.

# There are several ways to store these values (notice that you can mix these methods):
#
# A. The <local_settings.py> method:
#    Each instance defines a non-versioned file 'local_settings.py' and here you
#    write the following code:
#
#        try:
#            from .local_settings import *  # NOQA
#        except ImportError:
#            pass
#
#    An example of file 'local_settings.py' has been generated by the command
#    'creme_start_project' (you can remove it if you use another method).
#
# B. The <environment variables> method:
#    Values are stored in environment variable ; so write code which looks like:
#
#        import os
#
#        ADMINS = [
#           (
#               os.environ['{{ project_name|upper }}_ADMIN_NAME'],
#               os.environ['{{ project_name|upper }}_ADMIN_EMAIL'],
#           ),
#        ]
#
#        # SECURITY WARNING: keep the secret key used in production secret!
#        # HINT: use 'creme build_secret_key --settings={{ project_name }}.settings' to generate it.
#        SECRET_KEY = os.environ['{{ project_name|upper }}_SECRET_KEY']
#
#        DATABASES = {
#            'default': {
#                'ENGINE': os.environ.get(
#                    '{{ project_name|upper }}_DB_ENGINE',
#                    'django.db.backends.sqlite3',
#                ),
#                'NAME': os.environ.get(
#                    '{{ project_name|upper }}_DB_NAME',
#                    BASE_DIR / 'db.sqlite3',
#                ),
#
#                'USER': os.environ.get('{{ project_name|upper }}_DB_USER', ''),
#                'PASSWORD': os.environ.get('{{ project_name|upper }}_DB_PASSWORD', ''),
#
#                'HOST': os.environ.get('{{ project_name|upper }}_DB_PASSWORD', ''),
#                'PORT': os.environ.get('{{ project_name|upper }}_DB_PORT', ''),
#            },
#        }
#
# C. The <multi-settings> method
#    You have several setting files used for the different needs
#    (e.g. dev_settings.py, prod_settings.py) which make a <from .settings import*>
#    then defines their specific values.
#    You could put all of them in a 'settings/' folder too.
#
# D. The <generated settings> method
#    The values are stored in a vault and a script generates the settings file.
#
# E ...
